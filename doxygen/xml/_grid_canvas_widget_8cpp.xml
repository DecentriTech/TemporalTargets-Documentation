<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="_grid_canvas_widget_8cpp" kind="file" language="C++">
    <compoundname>GridCanvasWidget.cpp</compoundname>
    <includes refid="_grid_canvas_widget_8h" local="yes">GridCanvasWidget.h</includes>
    <includes local="yes">Rendering/DrawElements.h</includes>
    <includes local="yes">Framework/Application/SlateApplication.h</includes>
    <includes refid="_weapon_data_asset_8h" local="yes">WeaponDataAsset.h</includes>
    <incdepgraph>
      <node id="4">
        <label>Blueprint/UserWidget.h</label>
      </node>
      <node id="3">
        <label>CoreMinimal.h</label>
      </node>
      <node id="9">
        <label>Engine/DataAsset.h</label>
      </node>
      <node id="1">
        <label>Source/TimeAssassin/GridCanvasWidget.cpp</label>
        <link refid="_grid_canvas_widget_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>GridCanvasWidget.h</label>
        <link refid="_grid_canvas_widget_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>WeaponDataAsset.h</label>
        <link refid="_weapon_data_asset_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>Framework/Application/SlateApplication.h</label>
      </node>
      <node id="5">
        <label>GridCanvasWidget.generated.h</label>
      </node>
      <node id="6">
        <label>Rendering/DrawElements.h</label>
      </node>
      <node id="10">
        <label>WeaponDataAsset.generated.h</label>
      </node>
    </incdepgraph>
    <sectiondef kind="define">
      <memberdef kind="define" id="_grid_canvas_widget_8cpp_1a13e8325c35d5d7f71a450e32f173f50e" prot="public" static="no">
        <name>POINT_RADIUS</name>
        <initializer>3.0f</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/TimeAssassin/GridCanvasWidget.cpp" line="9" column="9" bodyfile="Source/TimeAssassin/GridCanvasWidget.cpp" bodystart="9" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_grid_canvas_widget_8cpp_1aa144abea62a576df6a8b38fcbff5cabd" prot="public" static="no">
        <name>GRID_COLOR</name>
        <initializer>FLinearColor(0.2f, 0.2f, 0.2f, 1.0f)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/TimeAssassin/GridCanvasWidget.cpp" line="10" column="9" bodyfile="Source/TimeAssassin/GridCanvasWidget.cpp" bodystart="10" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_grid_canvas_widget_8cpp_1a04cd60a9bf382ad3e21e7aa6c18ba505" prot="public" static="no">
        <name>POINT_COLOR</name>
        <initializer>FLinearColor::Red</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/TimeAssassin/GridCanvasWidget.cpp" line="11" column="9" bodyfile="Source/TimeAssassin/GridCanvasWidget.cpp" bodystart="11" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_grid_canvas_widget_8cpp_1a7942a7817f1ec1b9f48ca9d55374c3f7" prot="public" static="no">
        <name>HOVER_COLOR</name>
        <initializer>FLinearColor::Yellow</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/TimeAssassin/GridCanvasWidget.cpp" line="12" column="9" bodyfile="Source/TimeAssassin/GridCanvasWidget.cpp" bodystart="12" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="typedef">
      <memberdef kind="typedef" id="_grid_canvas_widget_8cpp_1a96505a0909802014ba3608717ba58bac" prot="public" static="no">
        <type><ref refid="struct_u_grid_canvas_widget_1_1_f_grid_params" kindref="compound">UGridCanvasWidget::FGridParams</ref></type>
        <definition>using FGridParams =  UGridCanvasWidget::FGridParams</definition>
        <argsstring></argsstring>
        <name>FGridParams</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/TimeAssassin/GridCanvasWidget.cpp" line="7" column="1" bodyfile="Source/TimeAssassin/GridCanvasWidget.cpp" bodystart="7" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>GridCanvasWidget.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_grid_canvas_widget_8h" kindref="compound">GridCanvasWidget.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Rendering/DrawElements.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Framework/Application/SlateApplication.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_weapon_data_asset_8h" kindref="compound">WeaponDataAsset.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7" refid="_grid_canvas_widget_8cpp_1a96505a0909802014ba3608717ba58bac" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="_grid_canvas_widget_8cpp_1a96505a0909802014ba3608717ba58bac" kindref="member">FGridParams</ref><sp/>=<sp/><ref refid="struct_u_grid_canvas_widget_1_1_f_grid_params" kindref="compound">UGridCanvasWidget::FGridParams</ref>;</highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9" refid="_grid_canvas_widget_8cpp_1a13e8325c35d5d7f71a450e32f173f50e" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>POINT_RADIUS<sp/><sp/><sp/><sp/>3.0f</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10" refid="_grid_canvas_widget_8cpp_1aa144abea62a576df6a8b38fcbff5cabd" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GRID_COLOR<sp/><sp/><sp/><sp/><sp/><sp/>FLinearColor(0.2f,<sp/>0.2f,<sp/>0.2f,<sp/>1.0f)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11" refid="_grid_canvas_widget_8cpp_1a04cd60a9bf382ad3e21e7aa6c18ba505" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>POINT_COLOR<sp/><sp/><sp/><sp/><sp/>FLinearColor::Red</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12" refid="_grid_canvas_widget_8cpp_1a7942a7817f1ec1b9f48ca9d55374c3f7" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>HOVER_COLOR<sp/><sp/><sp/><sp/><sp/>FLinearColor::Yellow</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-----------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>Local<sp/>utility<sp/>helpers<sp/><sp/>(file-scope<sp/>only<sp/>–<sp/>nothing<sp/>leaks<sp/>to<sp/>other<sp/>TUs)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-----------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keyword">namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal">{</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>---<sp/>&quot;Nice&quot;<sp/>step<sp/>tables<sp/>---------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TArray&lt;float&gt;<sp/>NiceSteps<sp/>=</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.01f,<sp/>0.025f,<sp/>0.05f,<sp/>0.1f,<sp/>0.25f,<sp/>0.5f,</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1.0f,<sp/>2.0f,<sp/>5.0f,<sp/>10.0f,<sp/>25.0f,<sp/>50.0f,<sp/>100.0f</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TArray&lt;float&gt;<sp/>NiceStepsWithEighth<sp/>=</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.01f,<sp/>0.025f,<sp/>0.05f,<sp/>0.1f,<sp/>0.125f,<sp/>0.25f,</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.5f,<sp/>1.0f,<sp/>2.0f,<sp/>2.5f,<sp/>5.0f,<sp/>10.0f,<sp/>25.0f,<sp/>50.0f,<sp/>100.0f</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>-------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>FORCEINLINE<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>RoundToNearestNiceStep(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>IdealStep)</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>Closest<sp/>=<sp/>NiceSteps[0];</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>SmallestDiff<sp/>=<sp/>FMath::Abs(IdealStep<sp/>-<sp/>Closest);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>Step<sp/>:<sp/>NiceSteps)</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>Diff<sp/>=<sp/>FMath::Abs(IdealStep<sp/>-<sp/>Step);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Diff<sp/>&lt;<sp/>SmallestDiff)</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Closest<sp/>=<sp/>Step;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SmallestDiff<sp/>=<sp/>Diff;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Closest;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>FORCEINLINE<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>RoundToNearestNiceSubstep(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>StepSize)</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>Substep<sp/>=<sp/>NiceSteps[0];</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>Nice<sp/>:<sp/>NiceSteps)</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Nice<sp/>&gt;=<sp/>StepSize)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>finished</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(FMath::IsNearlyZero(FMath::Fmod(StepSize,<sp/>Nice),<sp/>0.001f))</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Substep<sp/>=<sp/>Nice;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>divides<sp/>cleanly</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Substep;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>FORCEINLINE<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>RoundToConstrainedNiceSubstep(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>StepSize,<sp/>int32<sp/>MaxSubdivisions<sp/>=<sp/>5)</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>Candidate<sp/>:<sp/>NiceStepsWithEighth)</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Candidate<sp/>&gt;=<sp/>StepSize)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>too<sp/>large<sp/>?<sp/>done</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(FMath::IsNearlyZero(FMath::Fmod(StepSize,<sp/>Candidate),<sp/>0.0001f))</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>Divs<sp/>=<sp/>StepSize<sp/>/<sp/>Candidate;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Divs<sp/>&gt;=<sp/>2<sp/>&amp;&amp;<sp/>Divs<sp/>&lt;=<sp/>MaxSubdivisions)<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>within<sp/>designer<sp/>clamp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Candidate;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>StepSize;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>fallback<sp/>(unchanged)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>-------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>FORCEINLINE<sp/>FVector2D<sp/>CatmullRom(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FVector2D&amp;<sp/>P0,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FVector2D&amp;<sp/>P1,</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FVector2D&amp;<sp/>P2,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FVector2D&amp;<sp/>P3,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>T)</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>T2<sp/>=<sp/>T<sp/>*<sp/>T;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>T3<sp/>=<sp/>T2<sp/>*<sp/>T;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0.5f<sp/>*<sp/>((2.0f<sp/>*<sp/>P1)<sp/>+</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(-P0<sp/>+<sp/>P2)<sp/>*<sp/>T<sp/>+</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(2.0f<sp/>*<sp/>P0<sp/>-<sp/>5.0f<sp/>*<sp/>P1<sp/>+<sp/>4.0f<sp/>*<sp/>P2<sp/>-<sp/>P3)<sp/>*<sp/>T2<sp/>+</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(-P0<sp/>+<sp/>3.0f<sp/>*<sp/>P1<sp/>-<sp/>3.0f<sp/>*<sp/>P2<sp/>+<sp/>P3)<sp/>*<sp/>T3);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>FORCEINLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ShouldStorePoint(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FVector2D&amp;<sp/>Last,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FVector2D&amp;<sp/>Current,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>MinDist)</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FVector2D::Distance(Last,<sp/>Current)<sp/>&gt;<sp/>MinDist;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="104"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>~anon<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="comment">//---------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Actor<sp/>/<sp/>lifecycle</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="comment">//---------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110" refid="class_u_grid_canvas_widget_1adc343c9bfe7979e03aefc1b3b0693080" refkind="member"><highlight class="normal"><ref refid="class_u_grid_canvas_widget_1adc343c9bfe7979e03aefc1b3b0693080" kindref="member">UGridCanvasWidget::UGridCanvasWidget</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FObjectInitializer&amp;<sp/>ObjectInitializer)</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>Super(ObjectInitializer)</highlight></codeline>
<codeline lineno="112"><highlight class="normal">{</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>SetIsFocusable(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="114"><highlight class="normal">}</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116" refid="class_u_grid_canvas_widget_1a677510b3fdd746610ffa6e4e31a213e2" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_u_grid_canvas_widget_1a677510b3fdd746610ffa6e4e31a213e2" kindref="member">UGridCanvasWidget::NativeConstruct</ref>()</highlight></codeline>
<codeline lineno="117"><highlight class="normal">{</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>Super::NativeConstruct();</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="120"><highlight class="normal">}</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122" refid="class_u_grid_canvas_widget_1af181364848460173db92c2c13f9f3871" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_u_grid_canvas_widget_1af181364848460173db92c2c13f9f3871" kindref="member">UGridCanvasWidget::NativeTick</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FGeometry&amp;<sp/>MyGeometry,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>InDeltaTime)</highlight></codeline>
<codeline lineno="123"><highlight class="normal">{</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>Super::NativeTick(MyGeometry,<sp/>InDeltaTime);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>one-shot<sp/>auto-fit<sp/>when<sp/>widget<sp/>receives<sp/>first<sp/>valid<sp/>size</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="class_u_grid_canvas_widget_1aa3b08d7b17c4c7cadf6bd5ff5eca03a8" kindref="member">bDidInitialSetup</ref><sp/>&amp;&amp;<sp/>MyGeometry.GetLocalSize().X<sp/>&gt;<sp/>0.f)</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FVector2D<sp/>Size<sp/>=<sp/>MyGeometry.GetLocalSize();</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_u_grid_canvas_widget_1a8b294a32e146b92ece32f6ce8c0219d6" kindref="member">Zoom</ref><sp/>=<sp/>Size.X<sp/>/<sp/>(<ref refid="class_u_grid_canvas_widget_1a20d6268b561c6675de55f0c3c875a8c8" kindref="member">XAxisRange</ref><sp/>*<sp/>2.f);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_u_grid_canvas_widget_1a40c73780a82afbbe153da653d5facac7" kindref="member">PanOffset</ref><sp/>=<sp/>{<sp/>Size.X<sp/>/<sp/>2.f,<sp/>30.f<sp/>};<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>origin<sp/>centred,<sp/>Y-space<sp/>for<sp/>labels</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_u_grid_canvas_widget_1a5ac8aa12f7dc2cbb7f53f118e886e1a7" kindref="member">AddPoint</ref>({<sp/>0,0<sp/>});</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_u_grid_canvas_widget_1aa3b08d7b17c4c7cadf6bd5ff5eca03a8" kindref="member">bDidInitialSetup</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="135"><highlight class="normal">}</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="comment">//---------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-------------<sp/><sp/>***<sp/><sp/>PUBLIC<sp/>BLUEPRINT<sp/>API<sp/><sp/>***<sp/><sp/>---------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight><highlight class="comment">//---------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142" refid="class_u_grid_canvas_widget_1a17157daa6a01bbe1ae62b3d70abe47f6" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_u_grid_canvas_widget_1a17157daa6a01bbe1ae62b3d70abe47f6" kindref="member">UGridCanvasWidget::SetSprayPoints</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TArray&lt;FVector2D&gt;&amp;<sp/>NewPoints)</highlight></codeline>
<codeline lineno="143"><highlight class="normal">{</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/>SprayPoints<sp/>=<sp/>NewPoints;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/>BaselineSprayPoints<sp/>=<sp/>SprayPoints;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(SprayPoints.Num())</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_u_grid_canvas_widget_1a7b51a477edf97f3529f58695ebf5f201" kindref="member">PreviewPoint</ref><sp/>=<sp/>SprayPoints.Last();</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_u_grid_canvas_widget_1a7d9a9aec9a28dd561f30ee785d60ea2e" kindref="member">bHasPreviewPoint</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/><ref refid="class_u_grid_canvas_widget_1a7d9a9aec9a28dd561f30ee785d60ea2e" kindref="member">bHasPreviewPoint</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/>Invalidate(EInvalidateWidget::LayoutAndVolatility);</highlight></codeline>
<codeline lineno="155"><highlight class="normal">}</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157" refid="class_u_grid_canvas_widget_1a5a7bdf5d7870a0a87d9b45cab83526e2" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_u_grid_canvas_widget_1a5a7bdf5d7870a0a87d9b45cab83526e2" kindref="member">UGridCanvasWidget::ScaleSprayPattern</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>XMul,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>YMul)</highlight></codeline>
<codeline lineno="158"><highlight class="normal">{</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!BaselineSprayPoints.Num())<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_u_grid_canvas_widget_1a014eef438b321834225cc24ab83a8708" kindref="member">RecordUndoSnapshot</ref>();</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/>SprayPoints.Empty(BaselineSprayPoints.Num());</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FVector2D&amp;<sp/>Pt<sp/>:<sp/>BaselineSprayPoints)</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SprayPoints.Add({<sp/>Pt.X<sp/>*<sp/>XMul,<sp/>Pt.Y<sp/>*<sp/>YMul<sp/>});</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_u_grid_canvas_widget_1a7b51a477edf97f3529f58695ebf5f201" kindref="member">PreviewPoint</ref><sp/>=<sp/>SprayPoints.Last();</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_u_grid_canvas_widget_1a7d9a9aec9a28dd561f30ee785d60ea2e" kindref="member">bHasPreviewPoint</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/>Invalidate(EInvalidateWidget::LayoutAndVolatility);</highlight></codeline>
<codeline lineno="171"><highlight class="normal">}</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173" refid="class_u_grid_canvas_widget_1a277980892f05df5ed7fe46dc96ad3ddd" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_u_grid_canvas_widget_1a277980892f05df5ed7fe46dc96ad3ddd" kindref="member">UGridCanvasWidget::ScaleSprayPatternUniform</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>Mul)</highlight></codeline>
<codeline lineno="174"><highlight class="normal">{</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_u_grid_canvas_widget_1a5a7bdf5d7870a0a87d9b45cab83526e2" kindref="member">ScaleSprayPattern</ref>(Mul,<sp/>Mul);</highlight></codeline>
<codeline lineno="176"><highlight class="normal">}</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178" refid="class_u_grid_canvas_widget_1a5ac8aa12f7dc2cbb7f53f118e886e1a7" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_u_grid_canvas_widget_1a5ac8aa12f7dc2cbb7f53f118e886e1a7" kindref="member">UGridCanvasWidget::AddPoint</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FVector2D&amp;<sp/>Point)</highlight></codeline>
<codeline lineno="179"><highlight class="normal">{</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_u_grid_canvas_widget_1a014eef438b321834225cc24ab83a8708" kindref="member">RecordUndoSnapshot</ref>();</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_u_grid_canvas_widget_1ab2adad62b93aad5f052e93e0c6c6355c" kindref="member">SelectedWeapon</ref><sp/>&amp;&amp;<sp/>SprayPoints.Num()<sp/>&gt;=<sp/><ref refid="class_u_grid_canvas_widget_1ab2adad62b93aad5f052e93e0c6c6355c" kindref="member">SelectedWeapon</ref>-&gt;MagSize)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/>FVector2D<sp/>P<sp/>=<sp/>Point;</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>designer<sp/>wants<sp/>the<sp/>top<sp/>of<sp/>the<sp/>graph<sp/>clamped<sp/>to<sp/>Y<sp/>==<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(P.Y<sp/>&gt;<sp/>-10.f<sp/>&amp;&amp;<sp/>P.Y<sp/>&lt;<sp/>0.f)<sp/><sp/><sp/>P.Y<sp/>=<sp/>0.f;</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(P.Y<sp/>&lt;<sp/>-10.f)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_u_grid_canvas_widget_1a50a898f2741dfc0314582c7bf0bd0d18" kindref="member">bSnapToGrid</ref><sp/>&amp;&amp;<sp/><ref refid="class_u_grid_canvas_widget_1ae8549e85756ee94db673883d082fc793" kindref="member">SnapInterval</ref><sp/>&gt;<sp/>0.f)</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>P.X<sp/>=<sp/>FMath::RoundToFloat(P.X<sp/>/<sp/><ref refid="class_u_grid_canvas_widget_1ae8549e85756ee94db673883d082fc793" kindref="member">SnapInterval</ref>)<sp/>*<sp/><ref refid="class_u_grid_canvas_widget_1ae8549e85756ee94db673883d082fc793" kindref="member">SnapInterval</ref>;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>P.Y<sp/>=<sp/>FMath::RoundToFloat(P.Y<sp/>/<sp/><ref refid="class_u_grid_canvas_widget_1ae8549e85756ee94db673883d082fc793" kindref="member">SnapInterval</ref>)<sp/>*<sp/><ref refid="class_u_grid_canvas_widget_1ae8549e85756ee94db673883d082fc793" kindref="member">SnapInterval</ref>;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>avoid<sp/>duplicates</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FVector2D&amp;<sp/>Existing<sp/>:<sp/>SprayPoints)</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(FVector2D::Distance(Existing,<sp/>P)<sp/>&lt;=<sp/>KINDA_SMALL_NUMBER)</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_u_grid_canvas_widget_1a7b51a477edf97f3529f58695ebf5f201" kindref="member">PreviewPoint</ref><sp/>=<sp/>Existing;</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_u_grid_canvas_widget_1a7d9a9aec9a28dd561f30ee785d60ea2e" kindref="member">bHasPreviewPoint</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/>SprayPoints.Add(P);</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_u_grid_canvas_widget_1a7b51a477edf97f3529f58695ebf5f201" kindref="member">PreviewPoint</ref><sp/>=<sp/>P;</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_u_grid_canvas_widget_1a7d9a9aec9a28dd561f30ee785d60ea2e" kindref="member">bHasPreviewPoint</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="208"><highlight class="normal">}</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="210" refid="class_u_grid_canvas_widget_1a68a966efa9980870479593cfcc229198" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_u_grid_canvas_widget_1a68a966efa9980870479593cfcc229198" kindref="member">UGridCanvasWidget::ClearPoints</ref>()</highlight></codeline>
<codeline lineno="211"><highlight class="normal">{</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_u_grid_canvas_widget_1a014eef438b321834225cc24ab83a8708" kindref="member">RecordUndoSnapshot</ref>();</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/>SprayPoints.Empty();</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_u_grid_canvas_widget_1a7d9a9aec9a28dd561f30ee785d60ea2e" kindref="member">bHasPreviewPoint</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="215"><highlight class="normal">}</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="217" refid="class_u_grid_canvas_widget_1a027fe37cddafa66528807b887c419e30" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_u_grid_canvas_widget_1a027fe37cddafa66528807b887c419e30" kindref="member">UGridCanvasWidget::SetHoverPoint</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FVector2D&amp;<sp/>Point)</highlight></codeline>
<codeline lineno="218"><highlight class="normal">{</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_u_grid_canvas_widget_1a35fdbde2a5fe1124b1bd2e6519a64176" kindref="member">HoverPoint</ref><sp/>=<sp/>Point;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_u_grid_canvas_widget_1a9d88401a809fc530639c7f02be77285e" kindref="member">bHasHoverPoint</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="221"><highlight class="normal">}</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="223" refid="class_u_grid_canvas_widget_1a6a3556ef17031e0cb8bcf116a2c66eae" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_u_grid_canvas_widget_1a6a3556ef17031e0cb8bcf116a2c66eae" kindref="member">UGridCanvasWidget::SetWeaponData</ref>(<ref refid="class_u_weapon_data_asset" kindref="compound">UWeaponDataAsset</ref>*<sp/>NewWeaponData)</highlight></codeline>
<codeline lineno="224"><highlight class="normal">{</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_u_grid_canvas_widget_1ab2adad62b93aad5f052e93e0c6c6355c" kindref="member">SelectedWeapon</ref><sp/>=<sp/>NewWeaponData;</highlight></codeline>
<codeline lineno="226"><highlight class="normal">}</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="228" refid="class_u_grid_canvas_widget_1a40fc805fe9ee5e4d46730b85dddc173b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_u_grid_canvas_widget_1a40fc805fe9ee5e4d46730b85dddc173b" kindref="member">UGridCanvasWidget::GetPreviewPoint</ref>(FVector2D&amp;<sp/>OutPoint)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="229"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_u_grid_canvas_widget_1a7d9a9aec9a28dd561f30ee785d60ea2e" kindref="member">bHasPreviewPoint</ref>)</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OutPoint<sp/>=<sp/><ref refid="class_u_grid_canvas_widget_1a7b51a477edf97f3529f58695ebf5f201" kindref="member">PreviewPoint</ref>;</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="236"><highlight class="normal">}</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="238" refid="class_u_grid_canvas_widget_1a53a019ebb3c0d5ac9d8ea09e1b7fbe44" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_u_grid_canvas_widget_1a53a019ebb3c0d5ac9d8ea09e1b7fbe44" kindref="member">UGridCanvasWidget::ExportSprayPattern</ref>(<ref refid="class_u_weapon_data_asset" kindref="compound">UWeaponDataAsset</ref>*<sp/>TargetWeapon)</highlight></codeline>
<codeline lineno="239"><highlight class="normal">{</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!TargetWeapon)</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UE_LOG(LogTemp,<sp/>Error,<sp/>TEXT(</highlight><highlight class="stringliteral">&quot;[ExportSprayPattern]<sp/>Null<sp/>TargetWeapon<sp/>passed<sp/>in.&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/>UE_LOG(LogTemp,<sp/>Log,<sp/>TEXT(</highlight><highlight class="stringliteral">&quot;[ExportSprayPattern]<sp/>Setting<sp/>SprayPattern<sp/>for<sp/>%s.<sp/>Num<sp/>points:<sp/>%d&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*TargetWeapon-&gt;GetName(),<sp/>SprayPoints.Num());</highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/>TArray&lt;FVector2D&gt;<sp/>Ordered<sp/>=<sp/>SprayPoints;</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/>Ordered.Sort([](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FVector2D&amp;<sp/>A,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FVector2D&amp;<sp/>B)</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>A.Y<sp/>&lt;<sp/>B.Y;</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/>TargetWeapon-&gt;<ref refid="class_u_weapon_data_asset_1a39af4b368edb68fcc72abe2e94506208" kindref="member">SprayPattern</ref><sp/>=<sp/>Ordered;</highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/>TargetWeapon-&gt;Modify();<sp/></highlight><highlight class="comment">//<sp/>For<sp/>undo<sp/>support</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/>TargetWeapon-&gt;MarkPackageDirty();<sp/></highlight><highlight class="comment">//<sp/>Mark<sp/>the<sp/>asset<sp/>dirty<sp/>for<sp/>saving</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/>UE_LOG(LogTemp,<sp/>Log,<sp/>TEXT(</highlight><highlight class="stringliteral">&quot;Exported<sp/>%d<sp/>spray<sp/>points<sp/>to<sp/>weapon:<sp/>%s&quot;</highlight><highlight class="normal">),<sp/>Ordered.Num(),<sp/>*TargetWeapon-&gt;GetName());</highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal">}</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight></codeline>
<codeline lineno="265" refid="class_u_grid_canvas_widget_1ad20f17a7516276cf07f75ceb4d0b68e9" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_u_grid_canvas_widget_1ad20f17a7516276cf07f75ceb4d0b68e9" kindref="member">UGridCanvasWidget::ToggleEditMode</ref>()</highlight></codeline>
<codeline lineno="266"><highlight class="normal">{</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_u_grid_canvas_widget_1ab668fe409b2c2bb94178dd3a4f042d26" kindref="member">EditMode</ref><sp/>==<sp/>ERecoilEditMode::Point)</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_u_grid_canvas_widget_1a988a2364487a8b8773096af84da17f25" kindref="member">SetEditMode</ref>(ERecoilEditMode::Freehand);</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UE_LOG(LogTemp,<sp/>Log,<sp/>TEXT(</highlight><highlight class="stringliteral">&quot;Switched<sp/>to<sp/>Freehand<sp/>Edit<sp/>Mode&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_u_grid_canvas_widget_1a988a2364487a8b8773096af84da17f25" kindref="member">SetEditMode</ref>(ERecoilEditMode::Point);</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UE_LOG(LogTemp,<sp/>Log,<sp/>TEXT(</highlight><highlight class="stringliteral">&quot;Switched<sp/>to<sp/>Point<sp/>Edit<sp/>Mode&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="277"><highlight class="normal">}</highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="279" refid="class_u_grid_canvas_widget_1a9a07dfe3f2d4ce2bb4eb46204d4ba9a3" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_u_grid_canvas_widget_1a9a07dfe3f2d4ce2bb4eb46204d4ba9a3" kindref="member">UGridCanvasWidget::Undo</ref>()</highlight></codeline>
<codeline lineno="280"><highlight class="normal">{</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="class_u_grid_canvas_widget_1a4b9e258664b0c3fba9529554e21c6c04" kindref="member">CanUndo</ref>())<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_u_grid_canvas_widget_1aee5d312aa51f0694e52f8ed47a364c44" kindref="member">RedoStack</ref>.Emplace(SprayPoints,<sp/><ref refid="class_u_grid_canvas_widget_1a7b51a477edf97f3529f58695ebf5f201" kindref="member">PreviewPoint</ref>);<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Save<sp/>current<sp/>Redo</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/>SprayPoints<sp/>=<sp/>MoveTemp(<ref refid="class_u_grid_canvas_widget_1a4846065e699258f2529fc2bd1fb830e6" kindref="member">UndoStack</ref>.Last().Points);<sp/></highlight><highlight class="comment">//<sp/>Grab<sp/>Last<sp/>Points</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_u_grid_canvas_widget_1a7b51a477edf97f3529f58695ebf5f201" kindref="member">PreviewPoint</ref><sp/>=<sp/><ref refid="class_u_grid_canvas_widget_1a4846065e699258f2529fc2bd1fb830e6" kindref="member">UndoStack</ref>.Last().PreviewPoint;<sp/></highlight><highlight class="comment">//<sp/>Restore<sp/>preview<sp/>point</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_u_grid_canvas_widget_1a4846065e699258f2529fc2bd1fb830e6" kindref="member">UndoStack</ref>.Pop();</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/>BaselineSprayPoints<sp/>=<sp/>SprayPoints;</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/>Invalidate(EInvalidateWidget::LayoutAndVolatility);</highlight></codeline>
<codeline lineno="288"><highlight class="normal">}</highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight></codeline>
<codeline lineno="290" refid="class_u_grid_canvas_widget_1a94b56c765eaf5fa15566118b52d3ecf1" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_u_grid_canvas_widget_1a94b56c765eaf5fa15566118b52d3ecf1" kindref="member">UGridCanvasWidget::Redo</ref>()</highlight></codeline>
<codeline lineno="291"><highlight class="normal">{</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="class_u_grid_canvas_widget_1aede9aae66d771afd65a0143aca636574" kindref="member">CanRedo</ref>())<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_u_grid_canvas_widget_1a4846065e699258f2529fc2bd1fb830e6" kindref="member">UndoStack</ref>.Emplace(SprayPoints,<sp/><ref refid="class_u_grid_canvas_widget_1a7b51a477edf97f3529f58695ebf5f201" kindref="member">PreviewPoint</ref>);</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/>SprayPoints<sp/>=<sp/>MoveTemp(<ref refid="class_u_grid_canvas_widget_1aee5d312aa51f0694e52f8ed47a364c44" kindref="member">RedoStack</ref>.Last().Points);</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_u_grid_canvas_widget_1a7b51a477edf97f3529f58695ebf5f201" kindref="member">PreviewPoint</ref><sp/>=<sp/><ref refid="class_u_grid_canvas_widget_1aee5d312aa51f0694e52f8ed47a364c44" kindref="member">RedoStack</ref>.Last().PreviewPoint;</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_u_grid_canvas_widget_1aee5d312aa51f0694e52f8ed47a364c44" kindref="member">RedoStack</ref>.Pop();</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/>BaselineSprayPoints<sp/>=<sp/>SprayPoints;</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/>Invalidate(EInvalidateWidget::LayoutAndVolatility);</highlight></codeline>
<codeline lineno="299"><highlight class="normal">}</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight></codeline>
<codeline lineno="302" refid="class_u_grid_canvas_widget_1ac57384fa5f8227744bffc1cb1ee7465d" refkind="member"><highlight class="normal">int32<sp/><ref refid="class_u_grid_canvas_widget_1ac57384fa5f8227744bffc1cb1ee7465d" kindref="member">UGridCanvasWidget::NativePaint</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FPaintArgs&amp;<sp/>Args,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FGeometry&amp;<sp/>AllottedGeometry,</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FSlateRect&amp;<sp/>MyCullingRect,<sp/>FSlateWindowElementList&amp;<sp/>OutDrawElements,</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/>int32<sp/>LayerId,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FWidgetStyle&amp;<sp/>InWidgetStyle,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>bParentEnabled)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="305"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/>Super::NativePaint(Args,<sp/>AllottedGeometry,<sp/>MyCullingRect,<sp/>OutDrawElements,<sp/>LayerId,<sp/>InWidgetStyle,<sp/>bParentEnabled);</highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>1)<sp/>Push<sp/>one<sp/>clip<sp/>for<sp/>the<sp/>whole<sp/>widget</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FSlateRect<sp/>ClipRect<sp/>=<sp/>AllottedGeometry.GetLayoutBoundingRect();</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FSlateClippingZone<sp/>ClippingZone(ClipRect);</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/>OutDrawElements.PushClip(ClippingZone);</highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>1)<sp/>gather<sp/>all<sp/>the<sp/>numbers<sp/>your<sp/>grid<sp/>code<sp/>needs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_u_grid_canvas_widget_1_1_f_grid_params" kindref="compound">FGridParams</ref><sp/>P<sp/>=<sp/><ref refid="class_u_grid_canvas_widget_1a11eeb7716666f2401182caf03e728ffb" kindref="member">CalcGridParams</ref>(AllottedGeometry);</highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>2)<sp/>draw<sp/>the<sp/>grid<sp/>lines<sp/>(minor/major,<sp/>tick<sp/>at<sp/>Y=0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_u_grid_canvas_widget_1aea903413f50eabd54387ab5f0c85ce13" kindref="member">DrawGrid</ref>(AllottedGeometry,<sp/>OutDrawElements,<sp/>LayerId,<sp/>P);</highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>3)<sp/>the<sp/>origin<sp/>crosshair<sp/>(center<sp/>dot<sp/>+<sp/>4<sp/>ticks)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_u_grid_canvas_widget_1a4107170129374db71e599de859e53942" kindref="member">DrawOriginCrosshair</ref>(AllottedGeometry,<sp/>OutDrawElements,<sp/>LayerId,<sp/>P);</highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>4)<sp/>axis<sp/>labels<sp/>(0<sp/>label,<sp/>numeric<sp/>Y<sp/>left/right,<sp/>numeric<sp/>X<sp/>top)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_u_grid_canvas_widget_1a96bd4b8913fb555cf3757ad3683e03f1" kindref="member">DrawAxisLabels</ref>(AllottedGeometry,<sp/>OutDrawElements,<sp/>LayerId,<sp/>P);</highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>5)<sp/>little<sp/>HUD<sp/>hints<sp/>(&quot;&lt;-<sp/>LEFT&quot;<sp/>/<sp/>&quot;RIGHT<sp/>-&gt;&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_u_grid_canvas_widget_1a587a3193c11d8738d105235e7522a194" kindref="member">DrawHudHints</ref>(AllottedGeometry,<sp/>OutDrawElements,<sp/>LayerId);</highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>6)<sp/>spray-pattern<sp/>points<sp/>+<sp/>pulse<sp/>+<sp/>glow<sp/>+<sp/>index</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_u_grid_canvas_widget_1ae32d3546ec59577d71780cf9596e063a" kindref="member">DrawSprayPattern</ref>(AllottedGeometry,<sp/>OutDrawElements,<sp/>LayerId);</highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>7)<sp/>preview<sp/>point<sp/>rings<sp/>+<sp/>tooltip</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_u_grid_canvas_widget_1ad8a1b003a01c4d0c67b840507f66b91f" kindref="member">DrawPreviewPoint</ref>(AllottedGeometry,<sp/>OutDrawElements,<sp/>LayerId);</highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>8)<sp/>live<sp/>freehand<sp/>ribbon<sp/>if<sp/>active</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_u_grid_canvas_widget_1ab668fe409b2c2bb94178dd3a4f042d26" kindref="member">EditMode</ref><sp/>==<sp/>ERecoilEditMode::Freehand<sp/>&amp;&amp;<sp/><ref refid="class_u_grid_canvas_widget_1abdd250134c6f7067b7ee2b91a1de7c13" kindref="member">bDrawingStroke</ref><sp/>&amp;&amp;<sp/>RawStroke.Num()<sp/>&gt;<sp/>1)</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_u_grid_canvas_widget_1a88f74842a895dcbe707101091072c419" kindref="member">DrawFreehandPreview</ref>(OutDrawElements,<sp/>LayerId,<sp/>AllottedGeometry,<sp/>MyCullingRect);</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>9)<sp/>pop<sp/>our<sp/>clipping<sp/>zone<sp/>and<sp/>return<sp/>the<sp/>new<sp/>max<sp/>layer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/>OutDrawElements.PopClip();</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LayerId<sp/>+<sp/>13;</highlight></codeline>
<codeline lineno="344"><highlight class="normal">}</highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight></codeline>
<codeline lineno="346" refid="class_u_grid_canvas_widget_1ae98764d7d1f3f34dc98ea9371639af27" refkind="member"><highlight class="normal">FReply<sp/><ref refid="class_u_grid_canvas_widget_1ae98764d7d1f3f34dc98ea9371639af27" kindref="member">UGridCanvasWidget::NativeOnMouseButtonDown</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FGeometry&amp;<sp/>InGeometry,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FPointerEvent&amp;<sp/>InMouseEvent)</highlight></codeline>
<codeline lineno="347"><highlight class="normal">{</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/>UE_LOG(LogTemp,<sp/>Log,<sp/>TEXT(</highlight><highlight class="stringliteral">&quot;UGridCanvasWidget::NativeOnMouseButtonDown&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Make<sp/>sure<sp/>the<sp/>widget<sp/>can<sp/>receive<sp/>keyboard<sp/>input</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(TSharedPtr&lt;SWidget&gt;<sp/>MySlate<sp/>=<sp/>GetCachedWidget())</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!FSlateApplication::Get().HasFocusedDescendants(MySlate.ToSharedRef()))</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FSlateApplication::Get().SetKeyboardFocus(</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MySlate.ToSharedRef(),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>convert<sp/>Ptr<sp/>-&gt;<sp/>Ref</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EFocusCause::SetDirectly);</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FVector2D<sp/>Local<sp/>=<sp/>InGeometry.AbsoluteToLocal(InMouseEvent.GetScreenSpacePosition());</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FVector2D<sp/>Logical<sp/>=<sp/>(Local<sp/>-<sp/><ref refid="class_u_grid_canvas_widget_1a40c73780a82afbbe153da653d5facac7" kindref="member">PanOffset</ref>)<sp/>/<sp/><ref refid="class_u_grid_canvas_widget_1a8b294a32e146b92ece32f6ce8c0219d6" kindref="member">Zoom</ref>;</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>SnapRadius<sp/>=<sp/>8.0f<sp/>/<sp/><ref refid="class_u_grid_canvas_widget_1a8b294a32e146b92ece32f6ce8c0219d6" kindref="member">Zoom</ref>;</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/>FVector2D<sp/>FinalLogical<sp/>=<sp/>Logical;</highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Logical.Y<sp/>&gt;<sp/>-10.0f<sp/>&amp;&amp;<sp/>Logical.Y<sp/>&lt;<sp/>0.0f)</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FinalLogical.Y<sp/>=<sp/>0.0f;<sp/></highlight><highlight class="comment">//<sp/>clamp<sp/>to<sp/>zero</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Logical.Y<sp/>&lt;<sp/>0<sp/>&amp;&amp;<sp/>Logical.Y<sp/>&lt;<sp/>-10.0f)</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FReply::Handled();<sp/></highlight><highlight class="comment">//<sp/>ignore<sp/>points<sp/>above<sp/>Y=-10<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_u_grid_canvas_widget_1a50a898f2741dfc0314582c7bf0bd0d18" kindref="member">bSnapToGrid</ref><sp/>&amp;&amp;<sp/><ref refid="class_u_grid_canvas_widget_1ae8549e85756ee94db673883d082fc793" kindref="member">SnapInterval</ref><sp/>&gt;<sp/>0.0f)</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FinalLogical.X<sp/>=<sp/>FMath::RoundToFloat(FinalLogical.X<sp/>/<sp/><ref refid="class_u_grid_canvas_widget_1ae8549e85756ee94db673883d082fc793" kindref="member">SnapInterval</ref>)<sp/>*<sp/><ref refid="class_u_grid_canvas_widget_1ae8549e85756ee94db673883d082fc793" kindref="member">SnapInterval</ref>;</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FinalLogical.Y<sp/>=<sp/>FMath::RoundToFloat(FinalLogical.Y<sp/>/<sp/><ref refid="class_u_grid_canvas_widget_1ae8549e85756ee94db673883d082fc793" kindref="member">SnapInterval</ref>)<sp/>*<sp/><ref refid="class_u_grid_canvas_widget_1ae8549e85756ee94db673883d082fc793" kindref="member">SnapInterval</ref>;</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_u_grid_canvas_widget_1ab668fe409b2c2bb94178dd3a4f042d26" kindref="member">EditMode</ref><sp/>==<sp/>ERecoilEditMode::Freehand<sp/>&amp;&amp;<sp/>InMouseEvent.GetEffectingButton()<sp/>==<sp/>EKeys::LeftMouseButton)</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_u_grid_canvas_widget_1a014eef438b321834225cc24ab83a8708" kindref="member">RecordUndoSnapshot</ref>();</highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RawStroke.Reset();</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RawStroke.Add(FinalLogical);</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_u_grid_canvas_widget_1abdd250134c6f7067b7ee2b91a1de7c13" kindref="member">bDrawingStroke</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>reuse<sp/>existing<sp/>flag<sp/>to<sp/>keep<sp/>capture</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FReply::Handled().CaptureMouse(GetCachedWidget().ToSharedRef());</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(InMouseEvent.GetEffectingButton()<sp/>==<sp/>EKeys::LeftMouseButton)</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(InMouseEvent.IsShiftDown())</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_u_grid_canvas_widget_1a014eef438b321834225cc24ab83a8708" kindref="member">RecordUndoSnapshot</ref>();</highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(int32<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>SprayPoints.Num();<sp/>++i)</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(FVector2D::Distance(SprayPoints[i],<sp/>FinalLogical)<sp/>&lt;=<sp/>SnapRadius)</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_u_grid_canvas_widget_1a7949570df7b2f99fb8d16a9406be32d4" kindref="member">DraggedPointIndex</ref><sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_u_grid_canvas_widget_1a7b51a477edf97f3529f58695ebf5f201" kindref="member">PreviewPoint</ref><sp/>=<sp/>SprayPoints[i];</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_u_grid_canvas_widget_1a76a9ead5074a39f965a356e3f2e66d7f" kindref="member">bDraggingPoint</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FReply::Handled().CaptureMouse(GetCachedWidget().ToSharedRef());</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Normal<sp/>add<sp/>behavior</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FVector2D&amp;<sp/>Point<sp/>:<sp/>SprayPoints)</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(FVector2D::Distance(Point,<sp/>Logical)<sp/>&lt;=<sp/>SnapRadius)</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_u_grid_canvas_widget_1a014eef438b321834225cc24ab83a8708" kindref="member">RecordUndoSnapshot</ref>();</highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_u_grid_canvas_widget_1a7b51a477edf97f3529f58695ebf5f201" kindref="member">PreviewPoint</ref><sp/>=<sp/>Point;</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_u_grid_canvas_widget_1a7d9a9aec9a28dd561f30ee785d60ea2e" kindref="member">bHasPreviewPoint</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FReply::Handled();</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_u_grid_canvas_widget_1a5ac8aa12f7dc2cbb7f53f118e886e1a7" kindref="member">AddPoint</ref>(Logical);</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_u_grid_canvas_widget_1a7d9a9aec9a28dd561f30ee785d60ea2e" kindref="member">bHasPreviewPoint</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FReply::Handled();</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="436"><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(InMouseEvent.GetEffectingButton()<sp/>==<sp/>EKeys::RightMouseButton)</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(InMouseEvent.IsShiftDown())</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>RMB<sp/>(without<sp/>SHIFT)<sp/>=<sp/>Delete</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(int32<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>SprayPoints.Num();<sp/>++i)</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(FVector2D::Distance(SprayPoints[i],<sp/>FinalLogical)<sp/>&lt;=<sp/>SnapRadius)</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SprayPoints.RemoveAt(i);</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_u_grid_canvas_widget_1a7d9a9aec9a28dd561f30ee785d60ea2e" kindref="member">bHasPreviewPoint</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FReply::Handled();</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_u_grid_canvas_widget_1aaacfe7d9208179a84fbb9f2462c33c30" kindref="member">bDragging</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_u_grid_canvas_widget_1adaa3e6605fd9649fdc2108c2310b4c64" kindref="member">LastMousePosition</ref><sp/>=<sp/>InMouseEvent.GetScreenSpacePosition();</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FReply::Handled().CaptureMouse(GetCachedWidget().ToSharedRef());</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FReply::Unhandled();</highlight></codeline>
<codeline lineno="463"><highlight class="normal">}</highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight></codeline>
<codeline lineno="465" refid="class_u_grid_canvas_widget_1a5831de6a6d20d8e528317a450b09a2b5" refkind="member"><highlight class="normal">FReply<sp/><ref refid="class_u_grid_canvas_widget_1a5831de6a6d20d8e528317a450b09a2b5" kindref="member">UGridCanvasWidget::NativeOnMouseButtonUp</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FGeometry&amp;<sp/>InGeometry,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FPointerEvent&amp;<sp/>InMouseEvent)</highlight></codeline>
<codeline lineno="466"><highlight class="normal">{</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(InMouseEvent.GetEffectingButton()<sp/>==<sp/>EKeys::LeftMouseButton<sp/>&amp;&amp;<sp/><ref refid="class_u_grid_canvas_widget_1ab668fe409b2c2bb94178dd3a4f042d26" kindref="member">EditMode</ref><sp/>==<sp/>ERecoilEditMode::Freehand<sp/>&amp;&amp;<sp/><ref refid="class_u_grid_canvas_widget_1abdd250134c6f7067b7ee2b91a1de7c13" kindref="member">bDrawingStroke</ref>)</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="469"><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_u_grid_canvas_widget_1abdd250134c6f7067b7ee2b91a1de7c13" kindref="member">bDrawingStroke</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>int32<sp/>DesiredCount<sp/>=<sp/><ref refid="class_u_grid_canvas_widget_1af7bf4020fd90f435b0ee8d28368152be" kindref="member">GetDesiredShotCount</ref>();</highlight></codeline>
<codeline lineno="473"><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SprayPoints<sp/>=<sp/><ref refid="class_u_grid_canvas_widget_1a91b9acde88110b4e989da74c410d2dbd" kindref="member">ResampleStroke</ref>(DesiredCount);</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BaselineSprayPoints<sp/>=<sp/>SprayPoints;</highlight></codeline>
<codeline lineno="476"><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(SprayPoints.Num())</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_u_grid_canvas_widget_1a7b51a477edf97f3529f58695ebf5f201" kindref="member">PreviewPoint</ref><sp/>=<sp/>SprayPoints.Last();</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_u_grid_canvas_widget_1a7d9a9aec9a28dd561f30ee785d60ea2e" kindref="member">bHasPreviewPoint</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="482"><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FReply::Handled().ReleaseMouseCapture();</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="485"><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(InMouseEvent.GetEffectingButton()<sp/>==<sp/>EKeys::LeftMouseButton)</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_u_grid_canvas_widget_1a76a9ead5074a39f965a356e3f2e66d7f" kindref="member">bDraggingPoint</ref>)</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_u_grid_canvas_widget_1a76a9ead5074a39f965a356e3f2e66d7f" kindref="member">bDraggingPoint</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_u_grid_canvas_widget_1a7949570df7b2f99fb8d16a9406be32d4" kindref="member">DraggedPointIndex</ref><sp/>=<sp/>INDEX_NONE;</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FReply::Handled().ReleaseMouseCapture();</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="495"><highlight class="normal"></highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(InMouseEvent.GetEffectingButton()<sp/>==<sp/>EKeys::RightMouseButton)</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_u_grid_canvas_widget_1aaacfe7d9208179a84fbb9f2462c33c30" kindref="member">bDragging</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FReply::Handled().ReleaseMouseCapture();</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="501"><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FReply::Unhandled();</highlight></codeline>
<codeline lineno="503"><highlight class="normal">}</highlight></codeline>
<codeline lineno="504"><highlight class="normal"></highlight></codeline>
<codeline lineno="505" refid="class_u_grid_canvas_widget_1ab3b62d27d17e1b58c7bb0a435bde6754" refkind="member"><highlight class="normal">FReply<sp/><ref refid="class_u_grid_canvas_widget_1ab3b62d27d17e1b58c7bb0a435bde6754" kindref="member">UGridCanvasWidget::NativeOnMouseMove</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FGeometry&amp;<sp/>InGeometry,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FPointerEvent&amp;<sp/>InMouseEvent)</highlight></codeline>
<codeline lineno="506"><highlight class="normal">{</highlight></codeline>
<codeline lineno="507"><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Freehand<sp/>drawing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_u_grid_canvas_widget_1abdd250134c6f7067b7ee2b91a1de7c13" kindref="member">bDrawingStroke</ref><sp/>&amp;&amp;<sp/><ref refid="class_u_grid_canvas_widget_1ab668fe409b2c2bb94178dd3a4f042d26" kindref="member">EditMode</ref><sp/>==<sp/>ERecoilEditMode::Freehand)</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FVector2D<sp/>Local<sp/>=<sp/>InGeometry.AbsoluteToLocal(</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>InMouseEvent.GetScreenSpacePosition());</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FVector2D<sp/>Logical<sp/>=<sp/>(Local<sp/>-<sp/><ref refid="class_u_grid_canvas_widget_1a40c73780a82afbbe153da653d5facac7" kindref="member">PanOffset</ref>)<sp/>/<sp/><ref refid="class_u_grid_canvas_widget_1a8b294a32e146b92ece32f6ce8c0219d6" kindref="member">Zoom</ref>;</highlight></codeline>
<codeline lineno="514"><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>snap<sp/>/<sp/>clamp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_u_grid_canvas_widget_1a50a898f2741dfc0314582c7bf0bd0d18" kindref="member">bSnapToGrid</ref><sp/>&amp;&amp;<sp/><ref refid="class_u_grid_canvas_widget_1ae8549e85756ee94db673883d082fc793" kindref="member">SnapInterval</ref><sp/>&gt;<sp/>0.0f)</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Logical.X<sp/>=<sp/>FMath::RoundToFloat(Logical.X<sp/>/<sp/><ref refid="class_u_grid_canvas_widget_1ae8549e85756ee94db673883d082fc793" kindref="member">SnapInterval</ref>)<sp/>*<sp/><ref refid="class_u_grid_canvas_widget_1ae8549e85756ee94db673883d082fc793" kindref="member">SnapInterval</ref>;</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Logical.Y<sp/>=<sp/>FMath::RoundToFloat(Logical.Y<sp/>/<sp/><ref refid="class_u_grid_canvas_widget_1ae8549e85756ee94db673883d082fc793" kindref="member">SnapInterval</ref>)<sp/>*<sp/><ref refid="class_u_grid_canvas_widget_1ae8549e85756ee94db673883d082fc793" kindref="member">SnapInterval</ref>;</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="521"><highlight class="normal"></highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Logical.Y<sp/>&gt;<sp/>-10.0f<sp/>&amp;&amp;<sp/>Logical.Y<sp/>&lt;<sp/>0.0f)</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Logical.Y<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Logical.Y<sp/>&lt;<sp/>-10.0f)</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Logical.Y<sp/>=<sp/>-10.0f;</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="530"><highlight class="normal"></highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ShouldStorePoint(RawStroke.Last(),<sp/>Logical,<sp/>0.005<sp/>))</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RawStroke.Add(Logical);</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_u_grid_canvas_widget_1a7b51a477edf97f3529f58695ebf5f201" kindref="member">PreviewPoint</ref><sp/>=<sp/>Logical;</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_u_grid_canvas_widget_1a7d9a9aec9a28dd561f30ee785d60ea2e" kindref="member">bHasPreviewPoint</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Invalidate(EInvalidateWidget::Layout);</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FReply::Handled();</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="540"><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal"></highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_u_grid_canvas_widget_1a76a9ead5074a39f965a356e3f2e66d7f" kindref="member">bDraggingPoint</ref><sp/>&amp;&amp;<sp/><ref refid="class_u_grid_canvas_widget_1a7949570df7b2f99fb8d16a9406be32d4" kindref="member">DraggedPointIndex</ref><sp/>!=<sp/>INDEX_NONE)</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FVector2D<sp/>Local<sp/>=<sp/>InGeometry.AbsoluteToLocal(InMouseEvent.GetScreenSpacePosition());</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FVector2D<sp/>NewLogical<sp/>=<sp/>(Local<sp/>-<sp/><ref refid="class_u_grid_canvas_widget_1a40c73780a82afbbe153da653d5facac7" kindref="member">PanOffset</ref>)<sp/>/<sp/><ref refid="class_u_grid_canvas_widget_1a8b294a32e146b92ece32f6ce8c0219d6" kindref="member">Zoom</ref>;</highlight></codeline>
<codeline lineno="546"><highlight class="normal"></highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_u_grid_canvas_widget_1a50a898f2741dfc0314582c7bf0bd0d18" kindref="member">bSnapToGrid</ref><sp/>&amp;&amp;<sp/><ref refid="class_u_grid_canvas_widget_1ae8549e85756ee94db673883d082fc793" kindref="member">SnapInterval</ref><sp/>&gt;<sp/>0.0f)</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NewLogical.X<sp/>=<sp/>FMath::RoundToFloat(NewLogical.X<sp/>/<sp/><ref refid="class_u_grid_canvas_widget_1ae8549e85756ee94db673883d082fc793" kindref="member">SnapInterval</ref>)<sp/>*<sp/><ref refid="class_u_grid_canvas_widget_1ae8549e85756ee94db673883d082fc793" kindref="member">SnapInterval</ref>;</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NewLogical.Y<sp/>=<sp/>FMath::RoundToFloat(NewLogical.Y<sp/>/<sp/><ref refid="class_u_grid_canvas_widget_1ae8549e85756ee94db673883d082fc793" kindref="member">SnapInterval</ref>)<sp/>*<sp/><ref refid="class_u_grid_canvas_widget_1ae8549e85756ee94db673883d082fc793" kindref="member">SnapInterval</ref>;</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="552"><highlight class="normal"></highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(NewLogical.Y<sp/>&gt;<sp/>-10.0f<sp/>&amp;&amp;<sp/>NewLogical.Y<sp/>&lt;<sp/>0.0f)</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NewLogical.Y<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(NewLogical.Y<sp/>&lt;<sp/>-10.0f)</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NewLogical.Y<sp/>=<sp/>-10.0f;</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="561"><highlight class="normal"></highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SprayPoints[<ref refid="class_u_grid_canvas_widget_1a7949570df7b2f99fb8d16a9406be32d4" kindref="member">DraggedPointIndex</ref>]<sp/>=<sp/>NewLogical;</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_u_grid_canvas_widget_1a7b51a477edf97f3529f58695ebf5f201" kindref="member">PreviewPoint</ref><sp/>=<sp/>NewLogical;</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_u_grid_canvas_widget_1a7d9a9aec9a28dd561f30ee785d60ea2e" kindref="member">bHasPreviewPoint</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="565"><highlight class="normal"></highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FReply::Handled();</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="568"><highlight class="normal"></highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_u_grid_canvas_widget_1aaacfe7d9208179a84fbb9f2462c33c30" kindref="member">bDragging</ref>)</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>cursor<sp/>while<sp/>dragging</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(APlayerController*<sp/>PC<sp/>=<sp/>GetWorld()-&gt;GetFirstPlayerController())</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PC-&gt;CurrentMouseCursor<sp/>=<sp/>EMouseCursor::GrabHand;</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="576"><highlight class="normal"></highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FVector2D<sp/>Size<sp/>=<sp/>GetCachedGeometry().GetLocalSize();</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FVector2D<sp/>Delta<sp/>=<sp/>InMouseEvent.GetScreenSpacePosition()<sp/>-<sp/><ref refid="class_u_grid_canvas_widget_1adaa3e6605fd9649fdc2108c2310b4c64" kindref="member">LastMousePosition</ref>;</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_u_grid_canvas_widget_1a40c73780a82afbbe153da653d5facac7" kindref="member">PanOffset</ref><sp/>+=<sp/>Delta;</highlight></codeline>
<codeline lineno="580"><highlight class="normal"></highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_u_grid_canvas_widget_1a40c73780a82afbbe153da653d5facac7" kindref="member">PanOffset</ref>.Y<sp/>=<sp/>FMath::Min(<ref refid="class_u_grid_canvas_widget_1a40c73780a82afbbe153da653d5facac7" kindref="member">PanOffset</ref>.Y,<sp/>30.0f);</highlight></codeline>
<codeline lineno="582"><highlight class="normal"></highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>LeftWorldX<sp/>=<sp/>(-<ref refid="class_u_grid_canvas_widget_1a40c73780a82afbbe153da653d5facac7" kindref="member">PanOffset</ref>.X)<sp/>/<sp/><ref refid="class_u_grid_canvas_widget_1a8b294a32e146b92ece32f6ce8c0219d6" kindref="member">Zoom</ref>;</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>RightWorldX<sp/>=<sp/>(Size.X<sp/>-<sp/><ref refid="class_u_grid_canvas_widget_1a40c73780a82afbbe153da653d5facac7" kindref="member">PanOffset</ref>.X)<sp/>/<sp/><ref refid="class_u_grid_canvas_widget_1a8b294a32e146b92ece32f6ce8c0219d6" kindref="member">Zoom</ref>;</highlight></codeline>
<codeline lineno="585"><highlight class="normal"></highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(LeftWorldX<sp/>&lt;<sp/>-<ref refid="class_u_grid_canvas_widget_1a20d6268b561c6675de55f0c3c875a8c8" kindref="member">XAxisRange</ref>)</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_u_grid_canvas_widget_1a40c73780a82afbbe153da653d5facac7" kindref="member">PanOffset</ref>.X<sp/>=<sp/>-(-<ref refid="class_u_grid_canvas_widget_1a20d6268b561c6675de55f0c3c875a8c8" kindref="member">XAxisRange</ref><sp/>*<sp/><ref refid="class_u_grid_canvas_widget_1a8b294a32e146b92ece32f6ce8c0219d6" kindref="member">Zoom</ref>);</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(RightWorldX<sp/>&gt;<sp/><ref refid="class_u_grid_canvas_widget_1a20d6268b561c6675de55f0c3c875a8c8" kindref="member">XAxisRange</ref>)</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_u_grid_canvas_widget_1a40c73780a82afbbe153da653d5facac7" kindref="member">PanOffset</ref>.X<sp/>=<sp/>Size.X<sp/>-<sp/>(<ref refid="class_u_grid_canvas_widget_1a20d6268b561c6675de55f0c3c875a8c8" kindref="member">XAxisRange</ref><sp/>*<sp/><ref refid="class_u_grid_canvas_widget_1a8b294a32e146b92ece32f6ce8c0219d6" kindref="member">Zoom</ref>);</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="594"><highlight class="normal"></highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_u_grid_canvas_widget_1adaa3e6605fd9649fdc2108c2310b4c64" kindref="member">LastMousePosition</ref><sp/>=<sp/>InMouseEvent.GetScreenSpacePosition();</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FReply::Handled();</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Reset<sp/>cursor<sp/>when<sp/>done<sp/>dragging</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(APlayerController*<sp/>PC<sp/>=<sp/>GetWorld()-&gt;GetFirstPlayerController())</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PC-&gt;CurrentMouseCursor<sp/>=<sp/>EMouseCursor::Default;</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="605"><highlight class="normal"></highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FReply::Handled().ReleaseMouseCapture();</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="608"><highlight class="normal"></highlight></codeline>
<codeline lineno="609"><highlight class="normal"></highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FReply::Unhandled();</highlight></codeline>
<codeline lineno="611"><highlight class="normal">}</highlight></codeline>
<codeline lineno="612"><highlight class="normal"></highlight></codeline>
<codeline lineno="613" refid="class_u_grid_canvas_widget_1a6bf7aad699bdf4bbd46d29d4d2ca0b34" refkind="member"><highlight class="normal">FReply<sp/><ref refid="class_u_grid_canvas_widget_1a6bf7aad699bdf4bbd46d29d4d2ca0b34" kindref="member">UGridCanvasWidget::NativeOnMouseWheel</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FGeometry&amp;<sp/>InGeometry,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FPointerEvent&amp;<sp/>InMouseEvent)</highlight></codeline>
<codeline lineno="614"><highlight class="normal">{</highlight></codeline>
<codeline lineno="615"><highlight class="normal"></highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FVector2D<sp/>Size<sp/>=<sp/>GetCachedGeometry().GetLocalSize();</highlight></codeline>
<codeline lineno="617"><highlight class="normal"></highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>ScrollDelta<sp/>=<sp/>InMouseEvent.GetWheelDelta();</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>ZoomFactor<sp/>=<sp/>FMath::Pow(1.1f,<sp/>ScrollDelta);</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>NewUnclampedZoom<sp/>=<sp/><ref refid="class_u_grid_canvas_widget_1a8b294a32e146b92ece32f6ce8c0219d6" kindref="member">Zoom</ref><sp/>*<sp/>ZoomFactor;</highlight></codeline>
<codeline lineno="621"><highlight class="normal"></highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>ScreenWidth<sp/>=<sp/>InGeometry.GetLocalSize().X;</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>MinAllowedZoom<sp/>=<sp/>ScreenWidth<sp/>/<sp/>(<ref refid="class_u_grid_canvas_widget_1a20d6268b561c6675de55f0c3c875a8c8" kindref="member">XAxisRange</ref><sp/>*<sp/>2.0f);<sp/></highlight><highlight class="comment">//<sp/>Don&apos;t<sp/>allow<sp/>zooming<sp/>out<sp/>past<sp/>this</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>MaxAllowedZoom<sp/>=<sp/><ref refid="class_u_grid_canvas_widget_1ae8ef53adbbe9319fcdfdfc60b2debe84" kindref="member">MaxZoom</ref>;<sp/></highlight><highlight class="comment">//<sp/>Your<sp/>defined<sp/>zoom-in<sp/>limit<sp/>(e.g.,<sp/>100)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="625"><highlight class="normal"></highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>NewZoom<sp/>=<sp/>FMath::Clamp(NewUnclampedZoom,<sp/>MinAllowedZoom,<sp/>MaxAllowedZoom);</highlight></codeline>
<codeline lineno="627"><highlight class="normal"></highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Optional:<sp/>Snap<sp/>to<sp/>min<sp/>if<sp/>close</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(FMath::IsNearlyEqual(NewZoom,<sp/>MinAllowedZoom,<sp/>0.01f))</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NewZoom<sp/>=<sp/>MinAllowedZoom;</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="633"><highlight class="normal"></highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Adjust<sp/>PanOffset<sp/>to<sp/>zoom<sp/>around<sp/>mouse<sp/>location</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FVector2D<sp/>MouseLocal<sp/>=<sp/>InGeometry.AbsoluteToLocal(InMouseEvent.GetScreenSpacePosition());</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_u_grid_canvas_widget_1a40c73780a82afbbe153da653d5facac7" kindref="member">PanOffset</ref><sp/>=<sp/>MouseLocal<sp/>-<sp/>((MouseLocal<sp/>-<sp/><ref refid="class_u_grid_canvas_widget_1a40c73780a82afbbe153da653d5facac7" kindref="member">PanOffset</ref>)<sp/>*<sp/>(NewZoom<sp/>/<sp/><ref refid="class_u_grid_canvas_widget_1a8b294a32e146b92ece32f6ce8c0219d6" kindref="member">Zoom</ref>));</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_u_grid_canvas_widget_1a8b294a32e146b92ece32f6ce8c0219d6" kindref="member">Zoom</ref><sp/>=<sp/>NewZoom;</highlight></codeline>
<codeline lineno="638"><highlight class="normal"></highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>world<sp/>space<sp/>positions<sp/>of<sp/>left/right<sp/>edges</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>LeftWorldX<sp/>=<sp/>(-<ref refid="class_u_grid_canvas_widget_1a40c73780a82afbbe153da653d5facac7" kindref="member">PanOffset</ref>.X)<sp/>/<sp/><ref refid="class_u_grid_canvas_widget_1a8b294a32e146b92ece32f6ce8c0219d6" kindref="member">Zoom</ref>;</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>RightWorldX<sp/>=<sp/>(Size.X<sp/>-<sp/><ref refid="class_u_grid_canvas_widget_1a40c73780a82afbbe153da653d5facac7" kindref="member">PanOffset</ref>.X)<sp/>/<sp/><ref refid="class_u_grid_canvas_widget_1a8b294a32e146b92ece32f6ce8c0219d6" kindref="member">Zoom</ref>;</highlight></codeline>
<codeline lineno="642"><highlight class="normal"></highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Clamp<sp/>to<sp/>-XAxisRange<sp/>and<sp/>+XAxisRange</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(LeftWorldX<sp/>&lt;<sp/>-<ref refid="class_u_grid_canvas_widget_1a20d6268b561c6675de55f0c3c875a8c8" kindref="member">XAxisRange</ref>)</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_u_grid_canvas_widget_1a40c73780a82afbbe153da653d5facac7" kindref="member">PanOffset</ref>.X<sp/>=<sp/>-(-<ref refid="class_u_grid_canvas_widget_1a20d6268b561c6675de55f0c3c875a8c8" kindref="member">XAxisRange</ref><sp/>*<sp/><ref refid="class_u_grid_canvas_widget_1a8b294a32e146b92ece32f6ce8c0219d6" kindref="member">Zoom</ref>);</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(RightWorldX<sp/>&gt;<sp/><ref refid="class_u_grid_canvas_widget_1a20d6268b561c6675de55f0c3c875a8c8" kindref="member">XAxisRange</ref>)</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_u_grid_canvas_widget_1a40c73780a82afbbe153da653d5facac7" kindref="member">PanOffset</ref>.X<sp/>=<sp/>Size.X<sp/>-<sp/>(<ref refid="class_u_grid_canvas_widget_1a20d6268b561c6675de55f0c3c875a8c8" kindref="member">XAxisRange</ref><sp/>*<sp/><ref refid="class_u_grid_canvas_widget_1a8b294a32e146b92ece32f6ce8c0219d6" kindref="member">Zoom</ref>);</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="652"><highlight class="normal"></highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Clamp<sp/>vertical<sp/>pan</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_u_grid_canvas_widget_1a40c73780a82afbbe153da653d5facac7" kindref="member">PanOffset</ref>.Y<sp/>=<sp/>FMath::Min(<ref refid="class_u_grid_canvas_widget_1a40c73780a82afbbe153da653d5facac7" kindref="member">PanOffset</ref>.Y,<sp/>30.0f);</highlight></codeline>
<codeline lineno="655"><highlight class="normal"></highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FReply::Handled();</highlight></codeline>
<codeline lineno="657"><highlight class="normal">}</highlight></codeline>
<codeline lineno="658"><highlight class="normal"></highlight></codeline>
<codeline lineno="659" refid="class_u_grid_canvas_widget_1a8878f0eceafba9d3e25bb389c5179592" refkind="member"><highlight class="normal">FReply<sp/><ref refid="class_u_grid_canvas_widget_1a8878f0eceafba9d3e25bb389c5179592" kindref="member">UGridCanvasWidget::NativeOnKeyDown</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FGeometry&amp;<sp/>MyGeometry,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FKeyEvent&amp;<sp/>InKeyEvent)</highlight></codeline>
<codeline lineno="660"><highlight class="normal">{</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>bCtrl<sp/>=<sp/>InKeyEvent.IsControlDown();</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>bAlt<sp/>=<sp/>InKeyEvent.IsAltDown();</highlight></codeline>
<codeline lineno="663"><highlight class="normal"></highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bAlt)</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_u_grid_canvas_widget_1ad20f17a7516276cf07f75ceb4d0b68e9" kindref="member">ToggleEditMode</ref>();</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="668"><highlight class="normal"></highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bCtrl<sp/>&amp;&amp;<sp/>InKeyEvent.GetKey()<sp/>==<sp/>EKeys::Z)</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_u_grid_canvas_widget_1a9a07dfe3f2d4ce2bb4eb46204d4ba9a3" kindref="member">Undo</ref>();</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FReply::Handled();</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bCtrl<sp/>&amp;&amp;<sp/>InKeyEvent.GetKey()<sp/>==<sp/>EKeys::Y)</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_u_grid_canvas_widget_1a94b56c765eaf5fa15566118b52d3ecf1" kindref="member">Redo</ref>();</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FReply::Handled();</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Super::NativeOnKeyDown(MyGeometry,<sp/>InKeyEvent);</highlight></codeline>
<codeline lineno="680"><highlight class="normal">}</highlight></codeline>
<codeline lineno="681"><highlight class="normal"></highlight></codeline>
<codeline lineno="682" refid="class_u_grid_canvas_widget_1a76184b92e94562cf1fb7db29dde34d7d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_u_grid_canvas_widget_1a76184b92e94562cf1fb7db29dde34d7d" kindref="member">UGridCanvasWidget::NativeOnMouseEnter</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FGeometry&amp;<sp/>InGeometry,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FPointerEvent&amp;<sp/>InMouseEvent)</highlight></codeline>
<codeline lineno="683"><highlight class="normal">{</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/>Super::NativeOnMouseEnter(InGeometry,<sp/>InMouseEvent);</highlight></codeline>
<codeline lineno="685"><highlight class="normal"></highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Force<sp/>keyboard<sp/>focus<sp/>to<sp/>this<sp/>widget<sp/>as<sp/>soon<sp/>as<sp/>the<sp/>mouse<sp/>enters<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(TSharedPtr&lt;SWidget&gt;<sp/>Slate<sp/>=<sp/>GetCachedWidget())</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FSlateApplication::Get().SetKeyboardFocus(</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Slate.ToSharedRef(),</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EFocusCause::Mouse</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="694"><highlight class="normal">}</highlight></codeline>
<codeline lineno="695"><highlight class="normal"></highlight></codeline>
<codeline lineno="696" refid="class_u_grid_canvas_widget_1af7bf4020fd90f435b0ee8d28368152be" refkind="member"><highlight class="normal">int32<sp/><ref refid="class_u_grid_canvas_widget_1af7bf4020fd90f435b0ee8d28368152be" kindref="member">UGridCanvasWidget::GetDesiredShotCount</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="697"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_u_grid_canvas_widget_1ab2adad62b93aad5f052e93e0c6c6355c" kindref="member">SelectedWeapon</ref><sp/>&amp;&amp;<sp/><ref refid="class_u_grid_canvas_widget_1ab2adad62b93aad5f052e93e0c6c6355c" kindref="member">SelectedWeapon</ref>-&gt;MagSize<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_u_grid_canvas_widget_1ab2adad62b93aad5f052e93e0c6c6355c" kindref="member">SelectedWeapon</ref>-&gt;MagSize;</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="702"><highlight class="normal"></highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_u_grid_canvas_widget_1ab2adad62b93aad5f052e93e0c6c6355c" kindref="member">SelectedWeapon</ref><sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UE_LOG(LogTemp,<sp/>Warning,<sp/>TEXT(</highlight><highlight class="stringliteral">&quot;SelectedWeapon<sp/>is<sp/>null.<sp/>Using<sp/>default<sp/>MagSize:<sp/>%d&quot;</highlight><highlight class="normal">),<sp/><ref refid="class_u_grid_canvas_widget_1ab12277f9c08374ba232cc695dd1b32ed" kindref="member">DefaultMagSize</ref>);</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_u_grid_canvas_widget_1ab12277f9c08374ba232cc695dd1b32ed" kindref="member">DefaultMagSize</ref>;</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="708"><highlight class="normal"></highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FMath::Max(1,<sp/><ref refid="class_u_grid_canvas_widget_1ab12277f9c08374ba232cc695dd1b32ed" kindref="member">DefaultMagSize</ref>);</highlight></codeline>
<codeline lineno="710"><highlight class="normal">}</highlight></codeline>
<codeline lineno="711"><highlight class="normal"></highlight></codeline>
<codeline lineno="712" refid="class_u_grid_canvas_widget_1a014eef438b321834225cc24ab83a8708" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_u_grid_canvas_widget_1a014eef438b321834225cc24ab83a8708" kindref="member">UGridCanvasWidget::RecordUndoSnapshot</ref>()</highlight></codeline>
<codeline lineno="713"><highlight class="normal">{</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Trim<sp/>if<sp/>we&apos;re<sp/>at<sp/>capacity</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_u_grid_canvas_widget_1a4846065e699258f2529fc2bd1fb830e6" kindref="member">UndoStack</ref>.Num()<sp/>&gt;=<sp/><ref refid="class_u_grid_canvas_widget_1a117126e5eeb9fe06c16cdd58223daea4" kindref="member">MaxHistory</ref>)</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_u_grid_canvas_widget_1a4846065e699258f2529fc2bd1fb830e6" kindref="member">UndoStack</ref>.RemoveAt(0);</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="719"><highlight class="normal"></highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_u_grid_canvas_widget_1a4846065e699258f2529fc2bd1fb830e6" kindref="member">UndoStack</ref>.Emplace(SprayPoints,<sp/><ref refid="class_u_grid_canvas_widget_1a7b51a477edf97f3529f58695ebf5f201" kindref="member">PreviewPoint</ref>);<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>store<sp/>*copy*<sp/>of<sp/>current<sp/>pattern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_u_grid_canvas_widget_1aee5d312aa51f0694e52f8ed47a364c44" kindref="member">RedoStack</ref>.Empty();</highlight></codeline>
<codeline lineno="722"><highlight class="normal">}</highlight></codeline>
<codeline lineno="723"><highlight class="normal"></highlight></codeline>
<codeline lineno="724" refid="class_u_grid_canvas_widget_1a11eeb7716666f2401182caf03e728ffb" refkind="member"><highlight class="normal"><ref refid="struct_u_grid_canvas_widget_1_1_f_grid_params" kindref="compound">FGridParams</ref><sp/><ref refid="class_u_grid_canvas_widget_1a11eeb7716666f2401182caf03e728ffb" kindref="member">UGridCanvasWidget::CalcGridParams</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FGeometry&amp;<sp/>G)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="725"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_u_grid_canvas_widget_1_1_f_grid_params" kindref="compound">FGridParams</ref><sp/>P;</highlight></codeline>
<codeline lineno="727"><highlight class="normal"></highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/>P.<ref refid="struct_u_grid_canvas_widget_1_1_f_grid_params_1a8e941a456655006e0a339a0bcb4d7648" kindref="member">Size</ref><sp/>=<sp/>G.GetLocalSize();</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/>P.<ref refid="struct_u_grid_canvas_widget_1_1_f_grid_params_1a54cec641d31937db260aecbc20d7b807" kindref="member">WorldTL</ref><sp/>=<sp/>-<ref refid="class_u_grid_canvas_widget_1a40c73780a82afbbe153da653d5facac7" kindref="member">PanOffset</ref><sp/>/<sp/><ref refid="class_u_grid_canvas_widget_1a8b294a32e146b92ece32f6ce8c0219d6" kindref="member">Zoom</ref>;</highlight></codeline>
<codeline lineno="730"><highlight class="normal"></highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>IdealPxPerStep<sp/>=<sp/>85.f;</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>UnitsPerPx<sp/>=<sp/>1.f<sp/>/<sp/><ref refid="class_u_grid_canvas_widget_1a8b294a32e146b92ece32f6ce8c0219d6" kindref="member">Zoom</ref>;</highlight></codeline>
<codeline lineno="733"><highlight class="normal"></highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/>P.<ref refid="struct_u_grid_canvas_widget_1_1_f_grid_params_1aa9639175b0bab59dc02b3f01cb3fcae7" kindref="member">Step</ref><sp/>=<sp/>RoundToNearestNiceStep(IdealPxPerStep<sp/>*<sp/>UnitsPerPx);</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/>P.<ref refid="struct_u_grid_canvas_widget_1_1_f_grid_params_1a7b31e262c210847afac169ee6dbbadf2" kindref="member">SubStep</ref><sp/>=<sp/>RoundToConstrainedNiceSubstep(P.<ref refid="struct_u_grid_canvas_widget_1_1_f_grid_params_1aa9639175b0bab59dc02b3f01cb3fcae7" kindref="member">Step</ref>,<sp/>5);</highlight></codeline>
<codeline lineno="736"><highlight class="normal"></highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/>UE_LOG(LogTemp,<sp/>Log,<sp/>TEXT(</highlight><highlight class="stringliteral">&quot;Grid<sp/>Params:<sp/>Step<sp/>=<sp/>%.3f,<sp/>SubStep<sp/>=<sp/>%.3f&quot;</highlight><highlight class="normal">),<sp/>P.<ref refid="struct_u_grid_canvas_widget_1_1_f_grid_params_1aa9639175b0bab59dc02b3f01cb3fcae7" kindref="member">Step</ref>,<sp/>P.<ref refid="struct_u_grid_canvas_widget_1_1_f_grid_params_1a7b31e262c210847afac169ee6dbbadf2" kindref="member">SubStep</ref>);</highlight></codeline>
<codeline lineno="738"><highlight class="normal"></highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>world-space<sp/>bounds<sp/>that<sp/>original<sp/>loops<sp/>used</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/>P.<ref refid="struct_u_grid_canvas_widget_1_1_f_grid_params_1a481a8d20d75011e840b94974c08de7b2" kindref="member">StartWorldX</ref><sp/>=<sp/>FMath::FloorToFloat(P.<ref refid="struct_u_grid_canvas_widget_1_1_f_grid_params_1a54cec641d31937db260aecbc20d7b807" kindref="member">WorldTL</ref>.X<sp/>/<sp/>P.<ref refid="struct_u_grid_canvas_widget_1_1_f_grid_params_1aa9639175b0bab59dc02b3f01cb3fcae7" kindref="member">Step</ref>)<sp/>*<sp/>P.<ref refid="struct_u_grid_canvas_widget_1_1_f_grid_params_1aa9639175b0bab59dc02b3f01cb3fcae7" kindref="member">Step</ref>;</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/>P.<ref refid="struct_u_grid_canvas_widget_1_1_f_grid_params_1ae54af48e062237cbda053a76bc9cec47" kindref="member">StartWorldY</ref><sp/>=<sp/>FMath::FloorToFloat(P.<ref refid="struct_u_grid_canvas_widget_1_1_f_grid_params_1a54cec641d31937db260aecbc20d7b807" kindref="member">WorldTL</ref>.Y<sp/>/<sp/>P.<ref refid="struct_u_grid_canvas_widget_1_1_f_grid_params_1aa9639175b0bab59dc02b3f01cb3fcae7" kindref="member">Step</ref>)<sp/>*<sp/>P.<ref refid="struct_u_grid_canvas_widget_1_1_f_grid_params_1aa9639175b0bab59dc02b3f01cb3fcae7" kindref="member">Step</ref>;</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/>P.<ref refid="struct_u_grid_canvas_widget_1_1_f_grid_params_1a2c007d5e4f653e59d3c0437b9b9d9bfb" kindref="member">StartWorldXMinor</ref><sp/>=<sp/>FMath::FloorToFloat(0.f<sp/>/<sp/>P.<ref refid="struct_u_grid_canvas_widget_1_1_f_grid_params_1a7b31e262c210847afac169ee6dbbadf2" kindref="member">SubStep</ref>)<sp/>*<sp/>P.<ref refid="struct_u_grid_canvas_widget_1_1_f_grid_params_1a7b31e262c210847afac169ee6dbbadf2" kindref="member">SubStep</ref><sp/>+</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FMath::CeilToFloat((P.<ref refid="struct_u_grid_canvas_widget_1_1_f_grid_params_1a54cec641d31937db260aecbc20d7b807" kindref="member">WorldTL</ref>.X<sp/>-<sp/>0.f)<sp/>/<sp/>P.<ref refid="struct_u_grid_canvas_widget_1_1_f_grid_params_1a7b31e262c210847afac169ee6dbbadf2" kindref="member">SubStep</ref>)<sp/>*<sp/>P.<ref refid="struct_u_grid_canvas_widget_1_1_f_grid_params_1a7b31e262c210847afac169ee6dbbadf2" kindref="member">SubStep</ref>;</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/>P.<ref refid="struct_u_grid_canvas_widget_1_1_f_grid_params_1ae006ff799a1916d27846f57bb86d2a42" kindref="member">StartWorldYMinor</ref><sp/>=<sp/>FMath::FloorToFloat(0.f<sp/>/<sp/>P.<ref refid="struct_u_grid_canvas_widget_1_1_f_grid_params_1a7b31e262c210847afac169ee6dbbadf2" kindref="member">SubStep</ref>)<sp/>*<sp/>P.<ref refid="struct_u_grid_canvas_widget_1_1_f_grid_params_1a7b31e262c210847afac169ee6dbbadf2" kindref="member">SubStep</ref><sp/>+</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FMath::CeilToFloat((P.<ref refid="struct_u_grid_canvas_widget_1_1_f_grid_params_1a54cec641d31937db260aecbc20d7b807" kindref="member">WorldTL</ref>.Y<sp/>-<sp/>0.f)<sp/>/<sp/>P.<ref refid="struct_u_grid_canvas_widget_1_1_f_grid_params_1a7b31e262c210847afac169ee6dbbadf2" kindref="member">SubStep</ref>)<sp/>*<sp/>P.<ref refid="struct_u_grid_canvas_widget_1_1_f_grid_params_1a7b31e262c210847afac169ee6dbbadf2" kindref="member">SubStep</ref>;</highlight></codeline>
<codeline lineno="746"><highlight class="normal"></highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/>P.<ref refid="struct_u_grid_canvas_widget_1_1_f_grid_params_1ac4b897b66b43041460bf45ca4bcc61c5" kindref="member">YZeroPx</ref><sp/>=<sp/>0.f<sp/>*<sp/><ref refid="class_u_grid_canvas_widget_1a8b294a32e146b92ece32f6ce8c0219d6" kindref="member">Zoom</ref><sp/>+<sp/><ref refid="class_u_grid_canvas_widget_1a40c73780a82afbbe153da653d5facac7" kindref="member">PanOffset</ref>.Y;</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/>P.<ref refid="struct_u_grid_canvas_widget_1_1_f_grid_params_1a875aec0b7dd3fd0b82857613dc542873" kindref="member">XZeroPx</ref><sp/>=<sp/>0.f<sp/>*<sp/><ref refid="class_u_grid_canvas_widget_1a8b294a32e146b92ece32f6ce8c0219d6" kindref="member">Zoom</ref><sp/>+<sp/><ref refid="class_u_grid_canvas_widget_1a40c73780a82afbbe153da653d5facac7" kindref="member">PanOffset</ref>.X;</highlight></codeline>
<codeline lineno="749"><highlight class="normal"></highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>P;</highlight></codeline>
<codeline lineno="751"><highlight class="normal">}</highlight></codeline>
<codeline lineno="752"><highlight class="normal"></highlight></codeline>
<codeline lineno="753"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-----------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="754"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>Grid<sp/>drawing<sp/>–<sp/>draws<sp/>both<sp/>vertical<sp/>&amp;<sp/>horizontal,<sp/>major<sp/>&amp;<sp/>minor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="755"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-----------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="756" refid="class_u_grid_canvas_widget_1aea903413f50eabd54387ab5f0c85ce13" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_u_grid_canvas_widget_1aea903413f50eabd54387ab5f0c85ce13" kindref="member">UGridCanvasWidget::DrawGrid</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FGeometry&amp;<sp/>G,<sp/>FSlateWindowElementList&amp;<sp/>Out,</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/>int32&amp;<sp/>Layer,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_u_grid_canvas_widget_1_1_f_grid_params" kindref="compound">FGridParams</ref>&amp;<sp/>P)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="758"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">FLinePts<sp/>=<sp/>TStaticArray&lt;FVector2D,<sp/>2&gt;;</highlight></codeline>
<codeline lineno="760"><highlight class="normal"></highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>LineTop<sp/>=<sp/>FMath::Max(0.f,<sp/>P.<ref refid="struct_u_grid_canvas_widget_1_1_f_grid_params_1ac4b897b66b43041460bf45ca4bcc61c5" kindref="member">YZeroPx</ref>);</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>LineBottom<sp/>=<sp/>P.<ref refid="struct_u_grid_canvas_widget_1_1_f_grid_params_1a8e941a456655006e0a339a0bcb4d7648" kindref="member">Size</ref>.Y;</highlight></codeline>
<codeline lineno="763"><highlight class="normal"></highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>-----<sp/>Minor<sp/>Vertical<sp/>-----</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="_temporal_character_8cpp_1af9b7a70540abecc8e501d289684cb973" kindref="member">X</ref><sp/>=<sp/>P.<ref refid="struct_u_grid_canvas_widget_1_1_f_grid_params_1a2c007d5e4f653e59d3c0437b9b9d9bfb" kindref="member">StartWorldXMinor</ref>;<sp/>(<ref refid="_temporal_character_8cpp_1af9b7a70540abecc8e501d289684cb973" kindref="member">X</ref><sp/>*<sp/><ref refid="class_u_grid_canvas_widget_1a8b294a32e146b92ece32f6ce8c0219d6" kindref="member">Zoom</ref><sp/>+<sp/><ref refid="class_u_grid_canvas_widget_1a40c73780a82afbbe153da653d5facac7" kindref="member">PanOffset</ref>.X)<sp/>&lt;<sp/>P.<ref refid="struct_u_grid_canvas_widget_1_1_f_grid_params_1a8e941a456655006e0a339a0bcb4d7648" kindref="member">Size</ref>.X;<sp/><ref refid="_temporal_character_8cpp_1af9b7a70540abecc8e501d289684cb973" kindref="member">X</ref><sp/>+=<sp/>P.<ref refid="struct_u_grid_canvas_widget_1_1_f_grid_params_1a7b31e262c210847afac169ee6dbbadf2" kindref="member">SubStep</ref>)</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>Px<sp/>=<sp/><ref refid="_temporal_character_8cpp_1af9b7a70540abecc8e501d289684cb973" kindref="member">X</ref><sp/>*<sp/><ref refid="class_u_grid_canvas_widget_1a8b294a32e146b92ece32f6ce8c0219d6" kindref="member">Zoom</ref><sp/>+<sp/><ref refid="class_u_grid_canvas_widget_1a40c73780a82afbbe153da653d5facac7" kindref="member">PanOffset</ref>.X;</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Px<sp/>&lt;<sp/>0.f)<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="769"><highlight class="normal"></highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FSlateDrawElement::MakeLines(</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Out,<sp/>Layer,<sp/>G.ToPaintGeometry(),</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>FVector2D(Px,<sp/>LineTop),</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FVector2D(Px,<sp/>LineBottom)<sp/>},<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>&lt;-<sp/>initializer-list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESlateDrawEffect::None,</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_u_grid_canvas_widget_1a7cb82720e145f5443bb1ed860e2723c2" kindref="member">MinorLineColor</ref>,</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.5f);</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="779"><highlight class="normal"></highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>-----<sp/>Major<sp/>Vertical<sp/>-----</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="_temporal_character_8cpp_1af9b7a70540abecc8e501d289684cb973" kindref="member">X</ref><sp/>=<sp/>P.<ref refid="struct_u_grid_canvas_widget_1_1_f_grid_params_1a481a8d20d75011e840b94974c08de7b2" kindref="member">StartWorldX</ref>;<sp/>(<ref refid="_temporal_character_8cpp_1af9b7a70540abecc8e501d289684cb973" kindref="member">X</ref><sp/>*<sp/><ref refid="class_u_grid_canvas_widget_1a8b294a32e146b92ece32f6ce8c0219d6" kindref="member">Zoom</ref><sp/>+<sp/><ref refid="class_u_grid_canvas_widget_1a40c73780a82afbbe153da653d5facac7" kindref="member">PanOffset</ref>.X)<sp/>&lt;<sp/>P.<ref refid="struct_u_grid_canvas_widget_1_1_f_grid_params_1a8e941a456655006e0a339a0bcb4d7648" kindref="member">Size</ref>.X;<sp/><ref refid="_temporal_character_8cpp_1af9b7a70540abecc8e501d289684cb973" kindref="member">X</ref><sp/>+=<sp/>P.<ref refid="struct_u_grid_canvas_widget_1_1_f_grid_params_1aa9639175b0bab59dc02b3f01cb3fcae7" kindref="member">Step</ref>)</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>Px<sp/>=<sp/><ref refid="_temporal_character_8cpp_1af9b7a70540abecc8e501d289684cb973" kindref="member">X</ref><sp/>*<sp/><ref refid="class_u_grid_canvas_widget_1a8b294a32e146b92ece32f6ce8c0219d6" kindref="member">Zoom</ref><sp/>+<sp/><ref refid="class_u_grid_canvas_widget_1a40c73780a82afbbe153da653d5facac7" kindref="member">PanOffset</ref>.X;</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Px<sp/>&lt;<sp/>0.f)<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="785"><highlight class="normal"></highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FSlateDrawElement::MakeLines(</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Out,<sp/>Layer<sp/>+<sp/>1,<sp/>G.ToPaintGeometry(),</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>FVector2D(Px,<sp/>LineTop),</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FVector2D(Px,<sp/>LineBottom)<sp/>},</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESlateDrawEffect::None,</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_u_grid_canvas_widget_1a349b8127fd0eee997c2a14b8f9741170" kindref="member">MajorLineColor</ref>,</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1.0f);</highlight></codeline>
<codeline lineno="794"><highlight class="normal"></highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>tick<sp/>at<sp/>world-Y<sp/>==<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(P.<ref refid="struct_u_grid_canvas_widget_1_1_f_grid_params_1ac4b897b66b43041460bf45ca4bcc61c5" kindref="member">YZeroPx</ref><sp/>&gt;=<sp/>0.f<sp/>&amp;&amp;<sp/>P.<ref refid="struct_u_grid_canvas_widget_1_1_f_grid_params_1ac4b897b66b43041460bf45ca4bcc61c5" kindref="member">YZeroPx</ref><sp/>&lt;=<sp/>P.<ref refid="struct_u_grid_canvas_widget_1_1_f_grid_params_1a8e941a456655006e0a339a0bcb4d7648" kindref="member">Size</ref>.Y)</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FSlateDrawElement::MakeLines(</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Out,<sp/>Layer<sp/>+<sp/>5,<sp/>G.ToPaintGeometry(),</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>FVector2D(Px,<sp/>P.YZeroPx),</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FVector2D(Px,<sp/>P.YZeroPx<sp/>-<sp/>6.f)<sp/>},</highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESlateDrawEffect::None,</highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FLinearColor(1.f,<sp/>1.f,<sp/>1.f,<sp/>0.15f),</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.85f);</highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="808"><highlight class="normal"></highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>-----<sp/>Minor<sp/>Horizontal<sp/>-----</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>Y<sp/>=<sp/>P.<ref refid="struct_u_grid_canvas_widget_1_1_f_grid_params_1ae006ff799a1916d27846f57bb86d2a42" kindref="member">StartWorldYMinor</ref>;<sp/>(Y<sp/>*<sp/><ref refid="class_u_grid_canvas_widget_1a8b294a32e146b92ece32f6ce8c0219d6" kindref="member">Zoom</ref><sp/>+<sp/><ref refid="class_u_grid_canvas_widget_1a40c73780a82afbbe153da653d5facac7" kindref="member">PanOffset</ref>.Y)<sp/>&lt;<sp/>P.<ref refid="struct_u_grid_canvas_widget_1_1_f_grid_params_1a8e941a456655006e0a339a0bcb4d7648" kindref="member">Size</ref>.Y;<sp/>Y<sp/>+=<sp/>P.<ref refid="struct_u_grid_canvas_widget_1_1_f_grid_params_1a7b31e262c210847afac169ee6dbbadf2" kindref="member">SubStep</ref>)</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Y<sp/>&lt;<sp/>0.f)<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="813"><highlight class="normal"></highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>Py<sp/>=<sp/>Y<sp/>*<sp/><ref refid="class_u_grid_canvas_widget_1a8b294a32e146b92ece32f6ce8c0219d6" kindref="member">Zoom</ref><sp/>+<sp/><ref refid="class_u_grid_canvas_widget_1a40c73780a82afbbe153da653d5facac7" kindref="member">PanOffset</ref>.Y;</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Py<sp/>&lt;<sp/>0.f)<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="816"><highlight class="normal"></highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FSlateDrawElement::MakeLines(</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Out,<sp/>Layer,<sp/>G.ToPaintGeometry(),</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>FVector2D(0.f,<sp/><sp/><sp/><sp/><sp/><sp/>Py),</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FVector2D(P.Size.X,<sp/>Py)<sp/>},</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESlateDrawEffect::None,</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_u_grid_canvas_widget_1a7cb82720e145f5443bb1ed860e2723c2" kindref="member">MinorLineColor</ref>,</highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.5f);</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="826"><highlight class="normal"></highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>-----<sp/>Major<sp/>Horizontal<sp/>-----</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>Y<sp/>=<sp/>P.<ref refid="struct_u_grid_canvas_widget_1_1_f_grid_params_1ae54af48e062237cbda053a76bc9cec47" kindref="member">StartWorldY</ref>;<sp/>(Y<sp/>*<sp/><ref refid="class_u_grid_canvas_widget_1a8b294a32e146b92ece32f6ce8c0219d6" kindref="member">Zoom</ref><sp/>+<sp/><ref refid="class_u_grid_canvas_widget_1a40c73780a82afbbe153da653d5facac7" kindref="member">PanOffset</ref>.Y)<sp/>&lt;<sp/>P.<ref refid="struct_u_grid_canvas_widget_1_1_f_grid_params_1a8e941a456655006e0a339a0bcb4d7648" kindref="member">Size</ref>.Y;<sp/>Y<sp/>+=<sp/>P.<ref refid="struct_u_grid_canvas_widget_1_1_f_grid_params_1aa9639175b0bab59dc02b3f01cb3fcae7" kindref="member">Step</ref>)</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Y<sp/>&lt;<sp/>0.f)<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="831"><highlight class="normal"></highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>Py<sp/>=<sp/>Y<sp/>*<sp/><ref refid="class_u_grid_canvas_widget_1a8b294a32e146b92ece32f6ce8c0219d6" kindref="member">Zoom</ref><sp/>+<sp/><ref refid="class_u_grid_canvas_widget_1a40c73780a82afbbe153da653d5facac7" kindref="member">PanOffset</ref>.Y;</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Py<sp/>&lt;<sp/>0.f)<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="834"><highlight class="normal"></highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FSlateDrawElement::MakeLines(</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Out,<sp/>Layer<sp/>+<sp/>1,<sp/>G.ToPaintGeometry(),</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>FVector2D(0.f,<sp/><sp/><sp/><sp/><sp/><sp/>Py),</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FVector2D(P.Size.X,<sp/>Py)<sp/>},</highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESlateDrawEffect::None,</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_u_grid_canvas_widget_1a349b8127fd0eee997c2a14b8f9741170" kindref="member">MajorLineColor</ref>,</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.85f);</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="844"><highlight class="normal">}</highlight></codeline>
<codeline lineno="845"><highlight class="normal"></highlight></codeline>
<codeline lineno="846"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-----------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="847"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>Origin<sp/>crosshair</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="848"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-----------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="849" refid="class_u_grid_canvas_widget_1a4107170129374db71e599de859e53942" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_u_grid_canvas_widget_1a4107170129374db71e599de859e53942" kindref="member">UGridCanvasWidget::DrawOriginCrosshair</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FGeometry&amp;<sp/>G,<sp/>FSlateWindowElementList&amp;<sp/>Out,</highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/><sp/><sp/>int32&amp;<sp/>Layer,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_u_grid_canvas_widget_1_1_f_grid_params" kindref="compound">FGridParams</ref>&amp;<sp/>P)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="851"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="_temporal_character_8cpp_1af9b7a70540abecc8e501d289684cb973" kindref="member">X</ref><sp/>=<sp/>P.<ref refid="struct_u_grid_canvas_widget_1_1_f_grid_params_1a875aec0b7dd3fd0b82857613dc542873" kindref="member">XZeroPx</ref>;</highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>Y<sp/>=<sp/>P.<ref refid="struct_u_grid_canvas_widget_1_1_f_grid_params_1ac4b897b66b43041460bf45ca4bcc61c5" kindref="member">YZeroPx</ref>;</highlight></codeline>
<codeline lineno="854"><highlight class="normal"></highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Only<sp/>draw<sp/>if<sp/>the<sp/>origin<sp/>is<sp/>on-screen</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="_temporal_character_8cpp_1af9b7a70540abecc8e501d289684cb973" kindref="member">X &lt; 0.f || X &gt;</ref><sp/>P.<ref refid="struct_u_grid_canvas_widget_1_1_f_grid_params_1a8e941a456655006e0a339a0bcb4d7648" kindref="member">Size</ref>.X<sp/>||<sp/>Y<sp/>&lt;<sp/>0.f<sp/>||<sp/>Y<sp/>&gt;<sp/>P.<ref refid="struct_u_grid_canvas_widget_1_1_f_grid_params_1a8e941a456655006e0a339a0bcb4d7648" kindref="member">Size</ref>.Y)</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="858"><highlight class="normal"></highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>styling<sp/>constants<sp/>(same<sp/>numbers<sp/>as<sp/>before)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>TickLength<sp/>=<sp/>15.f;</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>GapSize<sp/>=<sp/>7.f;</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>LineThickness<sp/>=<sp/>2.f;</highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>DotSize<sp/>=<sp/>3.f;</highlight></codeline>
<codeline lineno="864"><highlight class="normal"></highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FLinearColor<sp/>OuterColor(0.8f,<sp/>0.8f,<sp/>0.8f,<sp/>0.8f);<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>bright<sp/>grey</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FLinearColor<sp/>InnerDotColor(1.f,<sp/>0.2f,<sp/>0.2f,<sp/>0.8f);<sp/></highlight><highlight class="comment">//<sp/>reddish<sp/>dot</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="867"><highlight class="normal"></highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>----<sp/>layering<sp/>scheme<sp/>----</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Layer<sp/><sp/><sp/>+3<sp/>:<sp/>four<sp/>tick<sp/>lines</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Layer<sp/><sp/><sp/>+4<sp/>:<sp/>center<sp/>dot</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(Layers<sp/>0/1<sp/>were<sp/>used<sp/>by<sp/>grid<sp/>lines,<sp/>so<sp/>we<sp/>leapfrog<sp/>them<sp/>exactly</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>like<sp/>NativePaint<sp/>did<sp/>with<sp/>+3/+4<sp/>relative<sp/>offsets.)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>int32<sp/>TickLayer<sp/>=<sp/>Layer<sp/>+<sp/>3;</highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>int32<sp/>DotLayer<sp/>=<sp/>Layer<sp/>+<sp/>4;</highlight></codeline>
<codeline lineno="875"><highlight class="normal"></highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>--<sp/>centre<sp/>dot<sp/>-----------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><sp/><sp/>FSlateDrawElement::MakeBox(</highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Out,<sp/>DotLayer,</highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G.ToPaintGeometry(</highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FVector2D(<ref refid="_temporal_character_8cpp_1af9b7a70540abecc8e501d289684cb973" kindref="member">X</ref><sp/>-<sp/>DotSize<sp/>*<sp/>0.5f,<sp/>Y<sp/>-<sp/>DotSize<sp/>*<sp/>0.5f),</highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FVector2D(DotSize,<sp/>DotSize)),</highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FCoreStyle::Get().GetBrush(</highlight><highlight class="stringliteral">&quot;WhiteBrush&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESlateDrawEffect::None,</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>InnerDotColor);</highlight></codeline>
<codeline lineno="885"><highlight class="normal"></highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>--<sp/>helper<sp/>Lambda<sp/>for<sp/>a<sp/>single<sp/>tick<sp/>line<sp/>---------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>DrawLine<sp/>=<sp/>[&amp;](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FVector2D&amp;<sp/>A,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FVector2D&amp;<sp/>B)</highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FSlateDrawElement::MakeLines(</highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Out,<sp/>TickLayer,<sp/>G.ToPaintGeometry(),</highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>A,<sp/>B<sp/>},<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>brace-initialiser<sp/>like<sp/>original</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESlateDrawEffect::None,</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OuterColor,</highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>no<sp/>antialias<sp/>-<sp/>matches<sp/>old<sp/>code</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LineThickness);</highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="897"><highlight class="normal"></highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>horizontal<sp/>ticks</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/><sp/><sp/>DrawLine({<sp/><ref refid="_temporal_character_8cpp_1af9b7a70540abecc8e501d289684cb973" kindref="member">X</ref><sp/>-<sp/>GapSize,<sp/>Y<sp/>},<sp/>{<sp/><ref refid="_temporal_character_8cpp_1af9b7a70540abecc8e501d289684cb973" kindref="member">X</ref><sp/>-<sp/>TickLength,<sp/>Y<sp/>});</highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><sp/><sp/>DrawLine({<sp/><ref refid="_temporal_character_8cpp_1af9b7a70540abecc8e501d289684cb973" kindref="member">X</ref><sp/>+<sp/>GapSize,<sp/>Y<sp/>},<sp/>{<sp/><ref refid="_temporal_character_8cpp_1af9b7a70540abecc8e501d289684cb973" kindref="member">X</ref><sp/>+<sp/>TickLength,<sp/>Y<sp/>});</highlight></codeline>
<codeline lineno="901"><highlight class="normal"></highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>vertical<sp/>ticks</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><sp/><sp/>DrawLine({<sp/><ref refid="_temporal_character_8cpp_1af9b7a70540abecc8e501d289684cb973" kindref="member">X</ref>,<sp/>Y<sp/>-<sp/>GapSize<sp/>},<sp/>{<sp/><ref refid="_temporal_character_8cpp_1af9b7a70540abecc8e501d289684cb973" kindref="member">X</ref>,<sp/>Y<sp/>-<sp/>TickLength<sp/>});</highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/><sp/><sp/>DrawLine({<sp/><ref refid="_temporal_character_8cpp_1af9b7a70540abecc8e501d289684cb973" kindref="member">X</ref>,<sp/>Y<sp/>+<sp/>GapSize<sp/>},<sp/>{<sp/><ref refid="_temporal_character_8cpp_1af9b7a70540abecc8e501d289684cb973" kindref="member">X</ref>,<sp/>Y<sp/>+<sp/>TickLength<sp/>});</highlight></codeline>
<codeline lineno="905"><highlight class="normal">}</highlight></codeline>
<codeline lineno="906"><highlight class="normal"></highlight></codeline>
<codeline lineno="907"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-----------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="908"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>Axis<sp/>number<sp/>labels<sp/>(sticky<sp/>behaviour<sp/>preserved)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="909"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-----------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="910" refid="class_u_grid_canvas_widget_1a96bd4b8913fb555cf3757ad3683e03f1" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_u_grid_canvas_widget_1a96bd4b8913fb555cf3757ad3683e03f1" kindref="member">UGridCanvasWidget::DrawAxisLabels</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FGeometry&amp;<sp/>G,<sp/>FSlateWindowElementList&amp;<sp/>Out,</highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/><sp/><sp/>int32&amp;<sp/>Layer,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_u_grid_canvas_widget_1_1_f_grid_params" kindref="compound">FGridParams</ref>&amp;<sp/>P)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="912"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>----------<sp/>shared<sp/>font<sp/>+<sp/>colour<sp/>----------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/><sp/><sp/>FSlateFontInfo<sp/>Font<sp/>=<sp/>FCoreStyle::Get().GetFontStyle(</highlight><highlight class="stringliteral">&quot;NormalFont&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/><sp/><sp/>Font.Size<sp/>=<sp/>10;</highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FLinearColor<sp/>LabelCol(0.6f,<sp/>0.6f,<sp/>0.6f,<sp/>1.f);</highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>CharW<sp/>=<sp/>Font.Size<sp/>*<sp/>0.6f;</highlight></codeline>
<codeline lineno="918"><highlight class="normal"></highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>======================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>1)<sp/><sp/>Draw<sp/>the<sp/>single<sp/>&quot;0&quot;<sp/>label<sp/>next<sp/>to<sp/>origin<sp/>(matches<sp/>old<sp/>code)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>======================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FString<sp/>ZeroTxt<sp/>=<sp/>TEXT(</highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FVector2D<sp/>TxtSize(ZeroTxt.Len()<sp/>*<sp/>CharW,<sp/>Font.Size<sp/>+<sp/>2);</highlight></codeline>
<codeline lineno="925"><highlight class="normal"></highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="_temporal_character_8cpp_1af9b7a70540abecc8e501d289684cb973" kindref="member">X</ref><sp/>=<sp/>P.<ref refid="struct_u_grid_canvas_widget_1_1_f_grid_params_1a875aec0b7dd3fd0b82857613dc542873" kindref="member">XZeroPx</ref><sp/>-<sp/>TxtSize.X<sp/>-<sp/>5.f;</highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>Y<sp/>=<sp/>P.<ref refid="struct_u_grid_canvas_widget_1_1_f_grid_params_1ac4b897b66b43041460bf45ca4bcc61c5" kindref="member">YZeroPx</ref><sp/>+<sp/>2.f;</highlight></codeline>
<codeline lineno="928"><highlight class="normal"></highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="_temporal_character_8cpp_1af9b7a70540abecc8e501d289684cb973" kindref="member">X</ref><sp/>+<sp/>TxtSize.X<sp/>&gt;=<sp/>0.f<sp/>&amp;&amp;<sp/><ref refid="_temporal_character_8cpp_1af9b7a70540abecc8e501d289684cb973" kindref="member">X</ref><sp/>&lt;=<sp/>P.<ref refid="struct_u_grid_canvas_widget_1_1_f_grid_params_1a8e941a456655006e0a339a0bcb4d7648" kindref="member">Size</ref>.X<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Y<sp/>+<sp/>TxtSize.Y<sp/>&gt;=<sp/>0.f<sp/>&amp;&amp;<sp/>Y<sp/>&lt;=<sp/>P.<ref refid="struct_u_grid_canvas_widget_1_1_f_grid_params_1a8e941a456655006e0a339a0bcb4d7648" kindref="member">Size</ref>.Y)</highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FSlateDrawElement::MakeText(</highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Out,<sp/>Layer<sp/>+<sp/>5,</highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G.ToPaintGeometry({<sp/>X,<sp/>Y<sp/>},<sp/>TxtSize),</highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ZeroTxt,<sp/>Font,<sp/>ESlateDrawEffect::None,<sp/>LabelCol);</highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="938"><highlight class="normal"></highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>======================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>2)<sp/><sp/>Blue<sp/>vertical<sp/>axis<sp/>at<sp/>X<sp/>==<sp/>0<sp/>(only<sp/>when<sp/>visible)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>======================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(P.<ref refid="struct_u_grid_canvas_widget_1_1_f_grid_params_1a875aec0b7dd3fd0b82857613dc542873" kindref="member">XZeroPx</ref><sp/>&gt;=<sp/>0.f<sp/>&amp;&amp;<sp/>P.<ref refid="struct_u_grid_canvas_widget_1_1_f_grid_params_1a875aec0b7dd3fd0b82857613dc542873" kindref="member">XZeroPx</ref><sp/>&lt;<sp/>P.<ref refid="struct_u_grid_canvas_widget_1_1_f_grid_params_1a8e941a456655006e0a339a0bcb4d7648" kindref="member">Size</ref>.X)</highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>clamp<sp/>to<sp/>grid<sp/>area<sp/>instead<sp/>of<sp/>full<sp/>widget</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>LineBottom<sp/>=<sp/>P.<ref refid="struct_u_grid_canvas_widget_1_1_f_grid_params_1a8e941a456655006e0a339a0bcb4d7648" kindref="member">Size</ref>.Y;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>bottom<sp/>of<sp/>grid</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>LineTop<sp/>=<sp/>FMath::Max(0.f,<sp/>P.<ref refid="struct_u_grid_canvas_widget_1_1_f_grid_params_1ac4b897b66b43041460bf45ca4bcc61c5" kindref="member">YZeroPx</ref>);<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>zero-line<sp/>or<sp/>top</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="947"><highlight class="normal"></highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FSlateDrawElement::MakeLines(</highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Out,<sp/>Layer,<sp/>G.ToPaintGeometry(),</highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>FVector2D(P.XZeroPx,<sp/>LineBottom),</highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FVector2D(P.XZeroPx,<sp/>LineTop)<sp/>},<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>use<sp/>LineTop,<sp/>not<sp/>0.f</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESlateDrawEffect::None,</highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FLinearColor(0.5f,<sp/>0.5f,<sp/>1.f,<sp/>0.5f),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>light-blue</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>2.f);</highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="956"><highlight class="normal"></highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>InvStep<sp/>=<sp/>1.f<sp/>/<sp/>P.<ref refid="struct_u_grid_canvas_widget_1_1_f_grid_params_1aa9639175b0bab59dc02b3f01cb3fcae7" kindref="member">Step</ref>;</highlight></codeline>
<codeline lineno="958"><highlight class="normal"></highlight></codeline>
<codeline lineno="959"><highlight class="normal"></highlight><highlight class="comment">//<sp/>======================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="960"><highlight class="normal"></highlight><highlight class="comment">//<sp/>3)<sp/><sp/>Y-axis<sp/>numeric<sp/>labels<sp/><sp/>(sticky<sp/>left<sp/>/<sp/>right)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="961"><highlight class="normal"></highlight><highlight class="comment">//<sp/>======================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>MaxWorldY<sp/>=<sp/>(P.<ref refid="struct_u_grid_canvas_widget_1_1_f_grid_params_1a8e941a456655006e0a339a0bcb4d7648" kindref="member">Size</ref>.Y<sp/>/<sp/><ref refid="class_u_grid_canvas_widget_1a8b294a32e146b92ece32f6ce8c0219d6" kindref="member">Zoom</ref>)<sp/>+<sp/>P.<ref refid="struct_u_grid_canvas_widget_1_1_f_grid_params_1a54cec641d31937db260aecbc20d7b807" kindref="member">WorldTL</ref>.Y;</highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(int32<sp/>i<sp/>=<sp/>FMath::FloorToInt(P.<ref refid="struct_u_grid_canvas_widget_1_1_f_grid_params_1a54cec641d31937db260aecbc20d7b807" kindref="member">WorldTL</ref>.Y<sp/>*<sp/>InvStep);</highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>&lt;=<sp/>FMath::CeilToInt(MaxWorldY<sp/>*<sp/>InvStep);<sp/>++i)</highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>Yw<sp/>=<sp/>i<sp/>*<sp/>P.<ref refid="struct_u_grid_canvas_widget_1_1_f_grid_params_1aa9639175b0bab59dc02b3f01cb3fcae7" kindref="member">Step</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(FMath::IsNearlyZero(Yw)<sp/>||<sp/>Yw<sp/>&lt;<sp/>0.f)<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>Py<sp/>=<sp/>Yw<sp/>*<sp/><ref refid="class_u_grid_canvas_widget_1a8b294a32e146b92ece32f6ce8c0219d6" kindref="member">Zoom</ref><sp/>+<sp/><ref refid="class_u_grid_canvas_widget_1a40c73780a82afbbe153da653d5facac7" kindref="member">PanOffset</ref>.Y;<sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Py<sp/>&lt;<sp/>0.f<sp/>||<sp/>Py<sp/>&gt;<sp/>P.<ref refid="struct_u_grid_canvas_widget_1_1_f_grid_params_1a8e941a456655006e0a339a0bcb4d7648" kindref="member">Size</ref>.Y)<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="968"><highlight class="normal"></highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FString<sp/>Label;</highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(FMath::IsNearlyEqual(Yw,<sp/>FMath::RoundToFloat(Yw)))</highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Label<sp/>=<sp/>FString::Printf(TEXT(</highlight><highlight class="stringliteral">&quot;%.0f&quot;</highlight><highlight class="normal">),<sp/>Yw);</highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Label<sp/>=<sp/>FString::Printf(TEXT(</highlight><highlight class="stringliteral">&quot;%.2f&quot;</highlight><highlight class="normal">),<sp/>Yw);</highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>strip<sp/>trailing<sp/>zeros<sp/>and<sp/>then<sp/>a<sp/>trailing<sp/>decimal<sp/>point<sp/>if<sp/>present:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Label.RemoveFromEnd(TEXT(</highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Label.RemoveFromEnd(TEXT(</highlight><highlight class="stringliteral">&quot;.&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="981"><highlight class="normal"></highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>---<sp/>EXACT<sp/>same<sp/>sizing<sp/>&amp;<sp/>position<sp/>calc<sp/>as<sp/>original<sp/>---</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FVector2D<sp/>LabelSize(Label.Len()<sp/>*<sp/>CharW,<sp/>Font.Size<sp/>+<sp/>2.f);</highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>LabelX<sp/>=<sp/>P.<ref refid="struct_u_grid_canvas_widget_1_1_f_grid_params_1a875aec0b7dd3fd0b82857613dc542873" kindref="member">XZeroPx</ref><sp/>-<sp/>LabelSize.X<sp/>-<sp/>4.f;</highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bStuck<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(P.<ref refid="struct_u_grid_canvas_widget_1_1_f_grid_params_1a875aec0b7dd3fd0b82857613dc542873" kindref="member">XZeroPx</ref><sp/>&lt;<sp/>LabelSize.X<sp/>+<sp/>4.f)<sp/>{<sp/>LabelX<sp/>=<sp/>4.f;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bStuck<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(P.<ref refid="struct_u_grid_canvas_widget_1_1_f_grid_params_1a875aec0b7dd3fd0b82857613dc542873" kindref="member">XZeroPx</ref><sp/>&gt;<sp/>P.<ref refid="struct_u_grid_canvas_widget_1_1_f_grid_params_1a8e941a456655006e0a339a0bcb4d7648" kindref="member">Size</ref>.X)<sp/>{<sp/>LabelX<sp/>=<sp/>P.<ref refid="struct_u_grid_canvas_widget_1_1_f_grid_params_1a8e941a456655006e0a339a0bcb4d7648" kindref="member">Size</ref>.X<sp/>-<sp/>LabelSize.X<sp/>-<sp/>4.f;<sp/>bStuck<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="988"><highlight class="normal"></highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FVector2D<sp/>LabelPos(LabelX,<sp/>Py<sp/>-<sp/>LabelSize.Y<sp/>*<sp/>0.5f);</highlight></codeline>
<codeline lineno="990"><highlight class="normal"></highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>cull<sp/>check</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(LabelPos.Y<sp/>+<sp/>LabelSize.Y<sp/>&lt;<sp/>0.f<sp/>||<sp/>LabelPos.Y<sp/>&gt;<sp/>P.<ref refid="struct_u_grid_canvas_widget_1_1_f_grid_params_1a8e941a456655006e0a339a0bcb4d7648" kindref="member">Size</ref>.Y)<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="993"><highlight class="normal"></highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FLinearColor<sp/>FinalCol<sp/>=<sp/>LabelCol;</highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bStuck)<sp/>{<sp/>FinalCol<sp/>*=<sp/>FLinearColor(0.85f,<sp/>0.85f,<sp/>0.85f);<sp/>FinalCol.A<sp/>*=<sp/>0.70f;<sp/>}</highlight></codeline>
<codeline lineno="996"><highlight class="normal"></highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FSlateDrawElement::MakeText(</highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Out,<sp/>Layer,</highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G.ToPaintGeometry(LabelPos,<sp/>LabelSize),<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>&lt;-<sp/>variables,<sp/>no<sp/>overload<sp/>ambiguity</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Label,<sp/>Font,<sp/>ESlateDrawEffect::None,<sp/>FinalCol);</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"></highlight></codeline>
<codeline lineno="1003"><highlight class="normal"></highlight><highlight class="comment">//<sp/>======================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1004"><highlight class="normal"></highlight><highlight class="comment">//<sp/>4)<sp/><sp/>X-axis<sp/>numeric<sp/>labels<sp/><sp/>(sticky<sp/>top)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1005"><highlight class="normal"></highlight><highlight class="comment">//<sp/>======================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/>bStuckTop<sp/>=<sp/>P.<ref refid="struct_u_grid_canvas_widget_1_1_f_grid_params_1ac4b897b66b43041460bf45ca4bcc61c5" kindref="member">YZeroPx</ref><sp/>&lt;=<sp/>0.f;</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>LabelY<sp/>=<sp/>bStuckTop<sp/>?<sp/>1.f<sp/>:<sp/>P.<ref refid="struct_u_grid_canvas_widget_1_1_f_grid_params_1ac4b897b66b43041460bf45ca4bcc61c5" kindref="member">YZeroPx</ref><sp/>+<sp/>1.f;</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"></highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(int32<sp/>i<sp/>=<sp/>FMath::FloorToInt(P.<ref refid="struct_u_grid_canvas_widget_1_1_f_grid_params_1a54cec641d31937db260aecbc20d7b807" kindref="member">WorldTL</ref>.X<sp/>*<sp/>InvStep);</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>&lt;=<sp/>FMath::CeilToInt(<ref refid="class_u_grid_canvas_widget_1a20d6268b561c6675de55f0c3c875a8c8" kindref="member">XAxisRange</ref><sp/>*<sp/>InvStep);<sp/>++i)</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>Xw<sp/>=<sp/>i<sp/>*<sp/>P.<ref refid="struct_u_grid_canvas_widget_1_1_f_grid_params_1aa9639175b0bab59dc02b3f01cb3fcae7" kindref="member">Step</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(FMath::IsNearlyZero(Xw)<sp/>||<sp/>Xw<sp/>&lt;<sp/>-<ref refid="class_u_grid_canvas_widget_1a20d6268b561c6675de55f0c3c875a8c8" kindref="member">XAxisRange</ref>)<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>Px<sp/>=<sp/>Xw<sp/>*<sp/><ref refid="class_u_grid_canvas_widget_1a8b294a32e146b92ece32f6ce8c0219d6" kindref="member">Zoom</ref><sp/>+<sp/><ref refid="class_u_grid_canvas_widget_1a40c73780a82afbbe153da653d5facac7" kindref="member">PanOffset</ref>.X;<sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Px<sp/>&lt;<sp/>0.f<sp/>||<sp/>Px<sp/>&gt;<sp/>P.<ref refid="struct_u_grid_canvas_widget_1_1_f_grid_params_1a8e941a456655006e0a339a0bcb4d7648" kindref="member">Size</ref>.X)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"></highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FString<sp/>Label;</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(FMath::IsNearlyEqual(Xw,<sp/>FMath::RoundToFloat(Xw)))</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Label<sp/>=<sp/>FString::Printf(TEXT(</highlight><highlight class="stringliteral">&quot;%.0f&quot;</highlight><highlight class="normal">),<sp/>Xw);</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Label<sp/>=<sp/>FString::Printf(TEXT(</highlight><highlight class="stringliteral">&quot;%.2f&quot;</highlight><highlight class="normal">),<sp/>Xw);</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>strip<sp/>trailing<sp/>zeros<sp/>and<sp/>then<sp/>a<sp/>trailing<sp/>decimal<sp/>point<sp/>if<sp/>present:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Label.RemoveFromEnd(TEXT(</highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Label.RemoveFromEnd(TEXT(</highlight><highlight class="stringliteral">&quot;.&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"></highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>---<sp/>original<sp/>sizing<sp/>&amp;<sp/>centering<sp/>---</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FVector2D<sp/>LabelSize(Label.Len()<sp/>*<sp/>CharW,<sp/>Font.Size<sp/>+<sp/>2.f);</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"></highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>OffsetMagnitude<sp/>=<sp/>1.f;</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>LabelOffset<sp/>=<sp/>(i<sp/>&lt;<sp/>0)<sp/>?<sp/>-OffsetMagnitude<sp/>:<sp/>OffsetMagnitude;</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>LabelX<sp/>=<sp/>Px<sp/>-<sp/>(LabelSize.X<sp/>*<sp/>0.5f)<sp/>+<sp/>LabelOffset;</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"></highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FVector2D<sp/>LabelPos(LabelX,<sp/>LabelY);</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"></highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(LabelPos.X<sp/>+<sp/>LabelSize.X<sp/>&lt;<sp/>0.f<sp/>||<sp/>LabelPos.X<sp/>&gt;<sp/>P.<ref refid="struct_u_grid_canvas_widget_1_1_f_grid_params_1a8e941a456655006e0a339a0bcb4d7648" kindref="member">Size</ref>.X)<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"></highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FLinearColor<sp/>FinalCol<sp/>=<sp/>LabelCol;</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bStuckTop)<sp/>{<sp/>FinalCol<sp/>*=<sp/>FLinearColor(0.85f,<sp/>0.85f,<sp/>0.85f);<sp/>FinalCol.A<sp/>*=<sp/>0.70f;<sp/>}</highlight></codeline>
<codeline lineno="1041"><highlight class="normal"></highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FSlateDrawElement::MakeText(</highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Out,<sp/>Layer,</highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G.ToPaintGeometry(LabelPos,<sp/>LabelSize),<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>?<sp/>variables,<sp/>no<sp/>overload<sp/>ambiguity</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Label,<sp/>Font,<sp/>ESlateDrawEffect::None,<sp/>FinalCol);</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1047"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"></highlight></codeline>
<codeline lineno="1049"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-----------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1050"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>&quot;&lt;-<sp/>LEFT<sp/>/<sp/>RIGHT<sp/>-&gt;&quot;<sp/>hints<sp/>(fixed<sp/>position)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1051"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-----------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1052" refid="class_u_grid_canvas_widget_1a587a3193c11d8738d105235e7522a194" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_u_grid_canvas_widget_1a587a3193c11d8738d105235e7522a194" kindref="member">UGridCanvasWidget::DrawHudHints</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FGeometry&amp;<sp/>G,<sp/>FSlateWindowElementList&amp;<sp/>Out,</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/><sp/><sp/>int32&amp;<sp/>Layer)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1054"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/><sp/><sp/>FSlateFontInfo<sp/>Font<sp/>=<sp/>FCoreStyle::Get().GetFontStyle(</highlight><highlight class="stringliteral">&quot;NormalFont&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/><sp/><sp/>Font.Size<sp/>=<sp/>12;</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"></highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FVector2D<sp/>Size<sp/>=<sp/>G.GetLocalSize();</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>Pad<sp/>=<sp/>5.f;</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"></highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NOTE:<sp/>make<sp/>Box<sp/>a<sp/>float?only<sp/>FVector2D<sp/>to<sp/>avoid<sp/>any<sp/>double/float<sp/>confusion</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FVector2D<sp/>Box(100.f,<sp/>20.f);</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FLinearColor<sp/>Hint(1.f,<sp/>1.f,<sp/>1.f,<sp/>0.08f);</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"></highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Precompute<sp/>the<sp/>two<sp/>hint<sp/>positions<sp/>exactly<sp/>as<sp/>you<sp/>had<sp/>them:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FVector2D<sp/>LeftPos(Pad,<sp/>Pad);</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FVector2D<sp/>RightPos(Size.X<sp/>-<sp/>Box.X<sp/>-<sp/>Pad,<sp/>Pad);</highlight></codeline>
<codeline lineno="1068"><highlight class="normal"></highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Now<sp/>pass<sp/>the<sp/>variables<sp/>into<sp/>ToPaintGeometry-no<sp/>brace?lists<sp/>here:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/><sp/><sp/>FSlateDrawElement::MakeText(</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Out,<sp/>Layer,</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G.ToPaintGeometry(LeftPos,<sp/>Box),</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TEXT(</highlight><highlight class="stringliteral">&quot;&lt;-<sp/>LEFT&quot;</highlight><highlight class="normal">),<sp/>Font,<sp/>ESlateDrawEffect::None,<sp/>Hint);</highlight></codeline>
<codeline lineno="1074"><highlight class="normal"></highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/><sp/><sp/>FSlateDrawElement::MakeText(</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Out,<sp/>Layer,</highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G.ToPaintGeometry(RightPos,<sp/>Box),</highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TEXT(</highlight><highlight class="stringliteral">&quot;RIGHT<sp/>-&gt;&quot;</highlight><highlight class="normal">),<sp/>Font,<sp/>ESlateDrawEffect::None,<sp/>Hint);</highlight></codeline>
<codeline lineno="1079"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1080"><highlight class="normal"></highlight></codeline>
<codeline lineno="1081"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-----------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1082"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>Preview<sp/>point<sp/>ring<sp/>-<sp/>unchanged<sp/>implementation<sp/>moved<sp/>here<sp/>for<sp/>clarity</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1083"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-----------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1084" refid="class_u_grid_canvas_widget_1ad8a1b003a01c4d0c67b840507f66b91f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_u_grid_canvas_widget_1ad8a1b003a01c4d0c67b840507f66b91f" kindref="member">UGridCanvasWidget::DrawPreviewPoint</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FGeometry&amp;<sp/>G,<sp/>FSlateWindowElementList&amp;<sp/>Out,</highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/><sp/><sp/>int32&amp;<sp/>Layer)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1086"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="class_u_grid_canvas_widget_1a7d9a9aec9a28dd561f30ee785d60ea2e" kindref="member">bHasPreviewPoint</ref>)</highlight></codeline>
<codeline lineno="1088"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1089"><highlight class="normal"></highlight></codeline>
<codeline lineno="1090"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>same<sp/>world?screen<sp/>conversion</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FVector2D<sp/>CanvasPoint<sp/>=<sp/>(<ref refid="class_u_grid_canvas_widget_1a7b51a477edf97f3529f58695ebf5f201" kindref="member">PreviewPoint</ref><sp/>*<sp/><ref refid="class_u_grid_canvas_widget_1a8b294a32e146b92ece32f6ce8c0219d6" kindref="member">Zoom</ref>)<sp/>+<sp/><ref refid="class_u_grid_canvas_widget_1a40c73780a82afbbe153da653d5facac7" kindref="member">PanOffset</ref>;</highlight></codeline>
<codeline lineno="1092"><highlight class="normal"></highlight></codeline>
<codeline lineno="1093"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>OuterRadius<sp/>=<sp/><ref refid="_grid_canvas_widget_8cpp_1a13e8325c35d5d7f71a450e32f173f50e" kindref="member">POINT_RADIUS</ref><sp/>+<sp/>4.f;</highlight></codeline>
<codeline lineno="1094"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>InnerRadius<sp/>=<sp/><ref refid="_grid_canvas_widget_8cpp_1a13e8325c35d5d7f71a450e32f173f50e" kindref="member">POINT_RADIUS</ref><sp/>+<sp/>2.f;</highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>int32<sp/>Segments<sp/>=<sp/>32;</highlight></codeline>
<codeline lineno="1096"><highlight class="normal"></highlight></codeline>
<codeline lineno="1097"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>build<sp/>the<sp/>two<sp/>rings</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1098"><highlight class="normal"><sp/><sp/><sp/><sp/>TArray&lt;FVector2D&gt;<sp/>OuterPoints;</highlight></codeline>
<codeline lineno="1099"><highlight class="normal"><sp/><sp/><sp/><sp/>TArray&lt;FVector2D&gt;<sp/>InnerPoints;</highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/><sp/><sp/><sp/>OuterPoints.Reserve(Segments<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="1101"><highlight class="normal"><sp/><sp/><sp/><sp/>InnerPoints.Reserve(Segments<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="1102"><highlight class="normal"></highlight></codeline>
<codeline lineno="1103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(int32<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;=<sp/>Segments;<sp/>++i)</highlight></codeline>
<codeline lineno="1104"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>Angle<sp/>=<sp/>(2.f<sp/>*<sp/>PI<sp/>*<sp/>i)<sp/>/<sp/>Segments;</highlight></codeline>
<codeline lineno="1106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FVector2D<sp/>Dir(FMath::Cos(Angle),<sp/>FMath::Sin(Angle));</highlight></codeline>
<codeline lineno="1107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OuterPoints.Add(CanvasPoint<sp/>+<sp/>Dir<sp/>*<sp/>OuterRadius);</highlight></codeline>
<codeline lineno="1108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>InnerPoints.Add(CanvasPoint<sp/>+<sp/>Dir<sp/>*<sp/>InnerRadius);</highlight></codeline>
<codeline lineno="1109"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1110"><highlight class="normal"></highlight></codeline>
<codeline lineno="1111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Outer<sp/>faded<sp/>black<sp/>ring<sp/>(Layer+10)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1112"><highlight class="normal"><sp/><sp/><sp/><sp/>FSlateDrawElement::MakeLines(</highlight></codeline>
<codeline lineno="1113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Out,<sp/>Layer<sp/>+<sp/>10,<sp/>G.ToPaintGeometry(),<sp/>OuterPoints,</highlight></codeline>
<codeline lineno="1114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESlateDrawEffect::None,</highlight></codeline>
<codeline lineno="1115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FLinearColor(0.f,<sp/>0.f,<sp/>0.f,<sp/>0.4f),</highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>2.f);</highlight></codeline>
<codeline lineno="1117"><highlight class="normal"></highlight></codeline>
<codeline lineno="1118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Inner<sp/>faded<sp/>gray<sp/>ring<sp/>(Layer+11)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1119"><highlight class="normal"><sp/><sp/><sp/><sp/>FSlateDrawElement::MakeLines(</highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Out,<sp/>Layer<sp/>+<sp/>11,<sp/>G.ToPaintGeometry(),<sp/>InnerPoints,</highlight></codeline>
<codeline lineno="1121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESlateDrawEffect::None,</highlight></codeline>
<codeline lineno="1122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FLinearColor(0.85f,<sp/>0.85f,<sp/>0.85f,<sp/>0.35f),</highlight></codeline>
<codeline lineno="1123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>1.5f);</highlight></codeline>
<codeline lineno="1124"><highlight class="normal"></highlight></codeline>
<codeline lineno="1125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Tooltip<sp/>text<sp/>(Layer+11)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1126"><highlight class="normal"><sp/><sp/><sp/><sp/>FSlateFontInfo<sp/>Font<sp/>=<sp/>FCoreStyle::Get().GetFontStyle(</highlight><highlight class="stringliteral">&quot;NormalFont&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1127"><highlight class="normal"><sp/><sp/><sp/><sp/>Font.Size<sp/>=<sp/>10;</highlight></codeline>
<codeline lineno="1128"><highlight class="normal"></highlight></codeline>
<codeline lineno="1129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FString<sp/>Coords<sp/>=<sp/>FString::Printf(TEXT(</highlight><highlight class="stringliteral">&quot;[%.2f,<sp/>%.2f]&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="1130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_u_grid_canvas_widget_1a7b51a477edf97f3529f58695ebf5f201" kindref="member">PreviewPoint</ref>.X,<sp/><ref refid="class_u_grid_canvas_widget_1a7b51a477edf97f3529f58695ebf5f201" kindref="member">PreviewPoint</ref>.Y);</highlight></codeline>
<codeline lineno="1131"><highlight class="normal"><sp/><sp/><sp/><sp/>FSlateDrawElement::MakeText(</highlight></codeline>
<codeline lineno="1132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Out,<sp/>Layer<sp/>+<sp/>11,</highlight></codeline>
<codeline lineno="1133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G.ToPaintGeometry(CanvasPoint<sp/>+<sp/>FVector2D(10.f,<sp/>-20.f),<sp/>FVector2D(100.f,<sp/>14.f)),</highlight></codeline>
<codeline lineno="1134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Coords,<sp/>Font,<sp/>ESlateDrawEffect::None,</highlight></codeline>
<codeline lineno="1135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FLinearColor::White);</highlight></codeline>
<codeline lineno="1136"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1137"><highlight class="normal"></highlight></codeline>
<codeline lineno="1138" refid="class_u_grid_canvas_widget_1ae32d3546ec59577d71780cf9596e063a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_u_grid_canvas_widget_1ae32d3546ec59577d71780cf9596e063a" kindref="member">UGridCanvasWidget::DrawSprayPattern</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FGeometry&amp;<sp/>AllottedGeometry,<sp/>FSlateWindowElementList&amp;<sp/>OutDrawElements,<sp/>int32&amp;<sp/>LayerId)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1139"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>---<sp/>Fixed<sp/>size<sp/>config<sp/>---</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1141"><highlight class="normal"><sp/><sp/><sp/><sp/>int32<sp/>FixedFontSize<sp/>=<sp/>10;</highlight></codeline>
<codeline lineno="1142"><highlight class="normal"><sp/><sp/><sp/><sp/>FSlateFontInfo<sp/>FixedFont<sp/>=<sp/>FCoreStyle::Get().GetFontStyle(</highlight><highlight class="stringliteral">&quot;NormalFont&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1143"><highlight class="normal"><sp/><sp/><sp/><sp/>FixedFont.Size<sp/>=<sp/>FixedFontSize;</highlight></codeline>
<codeline lineno="1144"><highlight class="normal"></highlight></codeline>
<codeline lineno="1145"><highlight class="normal"></highlight></codeline>
<codeline lineno="1146"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>===<sp/>Draw<sp/>sorted<sp/>spray<sp/>points<sp/>(first<sp/>=<sp/>highest)<sp/>===</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1147"><highlight class="normal"><sp/><sp/><sp/><sp/>TArray&lt;FVector2D&gt;<sp/>Sorted<sp/>=<sp/>SprayPoints;</highlight></codeline>
<codeline lineno="1148"><highlight class="normal"><sp/><sp/><sp/><sp/>Sorted.Sort([](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FVector2D&amp;<sp/>A,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FVector2D&amp;<sp/>B)<sp/>{</highlight></codeline>
<codeline lineno="1149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>A.Y<sp/>&lt;<sp/>B.Y;</highlight></codeline>
<codeline lineno="1150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="1151"><highlight class="normal"></highlight></codeline>
<codeline lineno="1152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NOTE:<sp/>the<sp/>clipping<sp/>zone<sp/>is<sp/>already<sp/>pushed<sp/>in<sp/>NativePaint,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>so<sp/>we<sp/>just<sp/>draw<sp/>into<sp/>that<sp/>same<sp/>clip.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1154"><highlight class="normal"></highlight></codeline>
<codeline lineno="1155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>GlowRadius<sp/>=<sp/>6.0f;</highlight></codeline>
<codeline lineno="1156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>HoverRingRadius<sp/>=<sp/><ref refid="_grid_canvas_widget_8cpp_1a13e8325c35d5d7f71a450e32f173f50e" kindref="member">POINT_RADIUS</ref><sp/>+<sp/>4.0f;</highlight></codeline>
<codeline lineno="1157"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>int32<sp/>RingSegments<sp/>=<sp/>8;</highlight></codeline>
<codeline lineno="1158"><highlight class="normal"></highlight></codeline>
<codeline lineno="1159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(int32<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>Sorted.Num();<sp/>++i)</highlight></codeline>
<codeline lineno="1160"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FVector2D&amp;<sp/>P<sp/>=<sp/>Sorted[i];</highlight></codeline>
<codeline lineno="1162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FVector2D<sp/>CanvasP<sp/>=<sp/>(P<sp/>*<sp/><ref refid="class_u_grid_canvas_widget_1a8b294a32e146b92ece32f6ce8c0219d6" kindref="member">Zoom</ref>)<sp/>+<sp/><ref refid="class_u_grid_canvas_widget_1a40c73780a82afbbe153da653d5facac7" kindref="member">PanOffset</ref>;</highlight></codeline>
<codeline lineno="1163"><highlight class="normal"></highlight></codeline>
<codeline lineno="1164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>---<sp/>Connection<sp/>&amp;<sp/>pulse<sp/>between<sp/>points<sp/>---</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="1166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FVector2D&amp;<sp/>A<sp/>=<sp/>Sorted[i<sp/>-<sp/>1];</highlight></codeline>
<codeline lineno="1168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FVector2D&amp;<sp/>B<sp/>=<sp/>Sorted[i];</highlight></codeline>
<codeline lineno="1169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FVector2D<sp/>CanvasA<sp/>=<sp/>(A<sp/>*<sp/><ref refid="class_u_grid_canvas_widget_1a8b294a32e146b92ece32f6ce8c0219d6" kindref="member">Zoom</ref>)<sp/>+<sp/><ref refid="class_u_grid_canvas_widget_1a40c73780a82afbbe153da653d5facac7" kindref="member">PanOffset</ref>;</highlight></codeline>
<codeline lineno="1170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FVector2D<sp/>CanvasB<sp/>=<sp/>(B<sp/>*<sp/><ref refid="class_u_grid_canvas_widget_1a8b294a32e146b92ece32f6ce8c0219d6" kindref="member">Zoom</ref>)<sp/>+<sp/><ref refid="class_u_grid_canvas_widget_1a40c73780a82afbbe153da653d5facac7" kindref="member">PanOffset</ref>;</highlight></codeline>
<codeline lineno="1171"><highlight class="normal"></highlight></codeline>
<codeline lineno="1172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>base<sp/>line<sp/>coloured<sp/>by<sp/>distance</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>Dist<sp/>=<sp/>FVector2D::Distance(A,<sp/>B);</highlight></codeline>
<codeline lineno="1174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>TNorm<sp/>=<sp/>FMath::Clamp(Dist<sp/>/<sp/>10.0f,<sp/>0.0f,<sp/>1.0f);</highlight></codeline>
<codeline lineno="1175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FLinearColor<sp/>BaseColor<sp/>=<sp/>FLinearColor::LerpUsingHSV(FLinearColor::Green,</highlight></codeline>
<codeline lineno="1176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FLinearColor::Red,</highlight></codeline>
<codeline lineno="1177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TNorm);</highlight></codeline>
<codeline lineno="1178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BaseColor.A<sp/>=<sp/>0.4f;</highlight></codeline>
<codeline lineno="1179"><highlight class="normal"></highlight></codeline>
<codeline lineno="1180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FSlateDrawElement::MakeLines(</highlight></codeline>
<codeline lineno="1181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OutDrawElements,</highlight></codeline>
<codeline lineno="1182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LayerId<sp/>+<sp/>6,</highlight></codeline>
<codeline lineno="1183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AllottedGeometry.ToPaintGeometry(),</highlight></codeline>
<codeline lineno="1184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>CanvasA,<sp/>CanvasB<sp/>},</highlight></codeline>
<codeline lineno="1185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESlateDrawEffect::None,</highlight></codeline>
<codeline lineno="1186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BaseColor,</highlight></codeline>
<codeline lineno="1187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>2.0f</highlight></codeline>
<codeline lineno="1189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1190"><highlight class="normal"></highlight></codeline>
<codeline lineno="1191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>pulsing<sp/>glow<sp/>along<sp/>the<sp/>segment</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>SegmentLength<sp/>=<sp/>Dist;</highlight></codeline>
<codeline lineno="1193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>MaxExpected<sp/>=<sp/>100.0f;</highlight></codeline>
<codeline lineno="1194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>T<sp/>=<sp/>FMath::Clamp(SegmentLength<sp/>/<sp/>MaxExpected,<sp/>0.0f,<sp/>1.0f);</highlight></codeline>
<codeline lineno="1195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>Time<sp/>=<sp/>GetWorld()-&gt;GetTimeSeconds();</highlight></codeline>
<codeline lineno="1196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>PulseSpeed<sp/>=<sp/>2.5f;</highlight></codeline>
<codeline lineno="1197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>PulseWidth<sp/>=<sp/>0.1f;</highlight></codeline>
<codeline lineno="1198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>PulseT<sp/>=<sp/>FMath::Fmod(Time<sp/>*<sp/>PulseSpeed,<sp/>1.0f<sp/>+<sp/>PulseWidth);</highlight></codeline>
<codeline lineno="1199"><highlight class="normal"></highlight></codeline>
<codeline lineno="1200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(PulseT<sp/>&lt;=<sp/>1.0f)</highlight></codeline>
<codeline lineno="1201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FVector2D<sp/>PulseStart<sp/>=<sp/>FMath::Lerp(CanvasA,<sp/>CanvasB,<sp/>PulseT);</highlight></codeline>
<codeline lineno="1203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>ClampedEndT<sp/>=<sp/>FMath::Clamp(PulseT<sp/>+<sp/>PulseWidth,<sp/>0.0f,<sp/>1.0f);</highlight></codeline>
<codeline lineno="1204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FVector2D<sp/>PulseEnd<sp/>=<sp/>FMath::Lerp(CanvasA,<sp/>CanvasB,<sp/>ClampedEndT);</highlight></codeline>
<codeline lineno="1205"><highlight class="normal"></highlight></codeline>
<codeline lineno="1206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FLinearColor<sp/>GlowColor<sp/>=<sp/>FLinearColor::LerpUsingHSV(FLinearColor::Green,</highlight></codeline>
<codeline lineno="1207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FLinearColor::Red,</highlight></codeline>
<codeline lineno="1208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T);</highlight></codeline>
<codeline lineno="1209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>FadeStartAlpha<sp/>=<sp/>0.25f;</highlight></codeline>
<codeline lineno="1210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>FadeEndAlpha<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="1211"><highlight class="normal"></highlight></codeline>
<codeline lineno="1212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FLinearColor<sp/>GlowStart<sp/>=<sp/>GlowColor.CopyWithNewOpacity(FadeStartAlpha);</highlight></codeline>
<codeline lineno="1213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FLinearColor<sp/>GlowEnd<sp/>=<sp/>GlowColor.CopyWithNewOpacity(FadeEndAlpha);</highlight></codeline>
<codeline lineno="1214"><highlight class="normal"></highlight></codeline>
<codeline lineno="1215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Soft<sp/>glow<sp/>trail</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FSlateDrawElement::MakeLines(</highlight></codeline>
<codeline lineno="1217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OutDrawElements,</highlight></codeline>
<codeline lineno="1218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LayerId<sp/>+<sp/>7,</highlight></codeline>
<codeline lineno="1219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AllottedGeometry.ToPaintGeometry(),</highlight></codeline>
<codeline lineno="1220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>PulseStart,<sp/>PulseEnd<sp/>},</highlight></codeline>
<codeline lineno="1221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESlateDrawEffect::None,</highlight></codeline>
<codeline lineno="1222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GlowStart,</highlight></codeline>
<codeline lineno="1223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>6.0f</highlight></codeline>
<codeline lineno="1225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1226"><highlight class="normal"></highlight></codeline>
<codeline lineno="1227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Main<sp/>pulse<sp/>core</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FSlateDrawElement::MakeLines(</highlight></codeline>
<codeline lineno="1229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OutDrawElements,</highlight></codeline>
<codeline lineno="1230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LayerId<sp/>+<sp/>8,</highlight></codeline>
<codeline lineno="1231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AllottedGeometry.ToPaintGeometry(),</highlight></codeline>
<codeline lineno="1232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>PulseStart,<sp/>PulseEnd<sp/>},</highlight></codeline>
<codeline lineno="1233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESlateDrawEffect::None,</highlight></codeline>
<codeline lineno="1234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FLinearColor::White,</highlight></codeline>
<codeline lineno="1235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>2.0f</highlight></codeline>
<codeline lineno="1237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1240"><highlight class="normal"></highlight></codeline>
<codeline lineno="1241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>---<sp/>Glow<sp/>circle<sp/>around<sp/>each<sp/>point<sp/>---</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TArray&lt;FVector2D&gt;<sp/>GlowCircle;</highlight></codeline>
<codeline lineno="1244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>int32<sp/>GlowSegments<sp/>=<sp/>32;</highlight></codeline>
<codeline lineno="1245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GlowCircle.Reserve(GlowSegments<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="1246"><highlight class="normal"></highlight></codeline>
<codeline lineno="1247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(int32<sp/>seg<sp/>=<sp/>0;<sp/>seg<sp/>&lt;=<sp/>GlowSegments;<sp/>++seg)</highlight></codeline>
<codeline lineno="1248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>Angle<sp/>=<sp/>(2.0f<sp/>*<sp/>PI<sp/>*<sp/>seg)<sp/>/<sp/>GlowSegments;</highlight></codeline>
<codeline lineno="1250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FVector2D<sp/>Dir(FMath::Cos(Angle),<sp/>FMath::Sin(Angle));</highlight></codeline>
<codeline lineno="1251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GlowCircle.Add(CanvasP<sp/>+<sp/>Dir<sp/>*<sp/>GlowRadius);</highlight></codeline>
<codeline lineno="1252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1253"><highlight class="normal"></highlight></codeline>
<codeline lineno="1254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FSlateDrawElement::MakeLines(</highlight></codeline>
<codeline lineno="1255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OutDrawElements,</highlight></codeline>
<codeline lineno="1256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LayerId<sp/>+<sp/>6,</highlight></codeline>
<codeline lineno="1257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AllottedGeometry.ToPaintGeometry(),</highlight></codeline>
<codeline lineno="1258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GlowCircle,</highlight></codeline>
<codeline lineno="1259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESlateDrawEffect::None,</highlight></codeline>
<codeline lineno="1260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FLinearColor(1.f,<sp/>1.f,<sp/>1.f,<sp/>0.06f),</highlight></codeline>
<codeline lineno="1261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>2.0f</highlight></codeline>
<codeline lineno="1263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1265"><highlight class="normal"></highlight></codeline>
<codeline lineno="1266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>---<sp/>Solid-style<sp/>dot<sp/>rings<sp/>---</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>int32<sp/>DotSegments<sp/>=<sp/>32;</highlight></codeline>
<codeline lineno="1269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>int32<sp/>Rings<sp/>=<sp/>3;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>layered<sp/>circles</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>RadiusStep<sp/>=<sp/>1.0f;</highlight></codeline>
<codeline lineno="1271"><highlight class="normal"></highlight></codeline>
<codeline lineno="1272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(int32<sp/>r<sp/>=<sp/>0;<sp/>r<sp/>&lt;<sp/>Rings;<sp/>++r)</highlight></codeline>
<codeline lineno="1273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>Radius<sp/>=<sp/><ref refid="_grid_canvas_widget_8cpp_1a13e8325c35d5d7f71a450e32f173f50e" kindref="member">POINT_RADIUS</ref><sp/>-<sp/>r<sp/>*<sp/>RadiusStep;</highlight></codeline>
<codeline lineno="1275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Radius<sp/>&lt;=<sp/>0.0f)<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1276"><highlight class="normal"></highlight></codeline>
<codeline lineno="1277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TArray&lt;FVector2D&gt;<sp/>Ring;</highlight></codeline>
<codeline lineno="1278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Ring.Reserve(DotSegments<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="1279"><highlight class="normal"></highlight></codeline>
<codeline lineno="1280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(int32<sp/>seg<sp/>=<sp/>0;<sp/>seg<sp/>&lt;=<sp/>DotSegments;<sp/>++seg)</highlight></codeline>
<codeline lineno="1281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>Angle<sp/>=<sp/>(2.0f<sp/>*<sp/>PI<sp/>*<sp/>seg)<sp/>/<sp/>DotSegments;</highlight></codeline>
<codeline lineno="1283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FVector2D<sp/>Dir(FMath::Cos(Angle),<sp/>FMath::Sin(Angle));</highlight></codeline>
<codeline lineno="1284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Ring.Add(CanvasP<sp/>+<sp/>Dir<sp/>*<sp/>Radius);</highlight></codeline>
<codeline lineno="1285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1286"><highlight class="normal"></highlight></codeline>
<codeline lineno="1287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FSlateDrawElement::MakeLines(</highlight></codeline>
<codeline lineno="1288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OutDrawElements,</highlight></codeline>
<codeline lineno="1289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LayerId<sp/>+<sp/>7<sp/>+<sp/>r,</highlight></codeline>
<codeline lineno="1290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AllottedGeometry.ToPaintGeometry(),</highlight></codeline>
<codeline lineno="1291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Ring,</highlight></codeline>
<codeline lineno="1292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESlateDrawEffect::None,</highlight></codeline>
<codeline lineno="1293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_grid_canvas_widget_8cpp_1a04cd60a9bf382ad3e21e7aa6c18ba505" kindref="member">POINT_COLOR</ref>,</highlight></codeline>
<codeline lineno="1294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1.0f</highlight></codeline>
<codeline lineno="1296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1299"><highlight class="normal"></highlight></codeline>
<codeline lineno="1300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>---<sp/>Shot<sp/>index<sp/>label<sp/>---</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FString<sp/>ShotLabel<sp/>=<sp/>FString::Printf(TEXT(</highlight><highlight class="stringliteral">&quot;%d&quot;</highlight><highlight class="normal">),<sp/>i<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="1302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="1303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FSlateDrawElement::MakeText(</highlight></codeline>
<codeline lineno="1305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OutDrawElements,</highlight></codeline>
<codeline lineno="1306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LayerId<sp/>+<sp/>9,</highlight></codeline>
<codeline lineno="1307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AllottedGeometry.ToPaintGeometry(</highlight></codeline>
<codeline lineno="1308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CanvasP<sp/>+<sp/>FVector2D(6.f,<sp/>-6.f),</highlight></codeline>
<codeline lineno="1309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FVector2D(20.f,<sp/>14.f)),</highlight></codeline>
<codeline lineno="1310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ShotLabel,</highlight></codeline>
<codeline lineno="1311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FixedFont,</highlight></codeline>
<codeline lineno="1312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESlateDrawEffect::None,</highlight></codeline>
<codeline lineno="1313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FLinearColor::White</highlight></codeline>
<codeline lineno="1314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1316"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1317"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1318"><highlight class="normal"></highlight></codeline>
<codeline lineno="1319" refid="class_u_grid_canvas_widget_1a91b9acde88110b4e989da74c410d2dbd" refkind="member"><highlight class="normal">TArray&lt;FVector2D&gt;<sp/><ref refid="class_u_grid_canvas_widget_1a91b9acde88110b4e989da74c410d2dbd" kindref="member">UGridCanvasWidget::ResampleStroke</ref>(int32<sp/>NumSamples)</highlight></codeline>
<codeline lineno="1320"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1321"><highlight class="normal"><sp/><sp/><sp/><sp/>TArray&lt;FVector2D&gt;<sp/>Result;</highlight></codeline>
<codeline lineno="1322"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(NumSamples<sp/>&lt;=<sp/>0<sp/>||<sp/>RawStroke.Num()<sp/>&lt;<sp/>2)</highlight></codeline>
<codeline lineno="1323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Result;</highlight></codeline>
<codeline lineno="1324"><highlight class="normal"></highlight></codeline>
<codeline lineno="1325"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>1)<sp/>Deduplicate<sp/>tiny<sp/>movements<sp/>so<sp/>zero<sp/>length<sp/>segments<sp/>don&apos;t<sp/>confuse<sp/>us</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1326"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>MinSegLen<sp/>=<sp/>0.001f;</highlight></codeline>
<codeline lineno="1327"><highlight class="normal"><sp/><sp/><sp/><sp/>TArray&lt;FVector2D&gt;<sp/>CleanStroke;</highlight></codeline>
<codeline lineno="1328"><highlight class="normal"><sp/><sp/><sp/><sp/>CleanStroke.Reserve(RawStroke.Num());</highlight></codeline>
<codeline lineno="1329"><highlight class="normal"><sp/><sp/><sp/><sp/>CleanStroke.Add(RawStroke[0]);</highlight></codeline>
<codeline lineno="1330"><highlight class="normal"></highlight></codeline>
<codeline lineno="1331"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(int32<sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>RawStroke.Num();<sp/>++i)</highlight></codeline>
<codeline lineno="1332"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(FVector2D::Distance(RawStroke[i<sp/>-<sp/>1],<sp/>RawStroke[i])<sp/>&gt;<sp/>MinSegLen)</highlight></codeline>
<codeline lineno="1334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CleanStroke.Add(RawStroke[i]);</highlight></codeline>
<codeline lineno="1336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1337"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1338"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(CleanStroke.Num()<sp/>&lt;<sp/>2)</highlight></codeline>
<codeline lineno="1339"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Degenerate<sp/>stroke<sp/>replicate<sp/>the<sp/>same<sp/>point</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Result.Init(CleanStroke[0],<sp/>NumSamples);</highlight></codeline>
<codeline lineno="1342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Result;</highlight></codeline>
<codeline lineno="1343"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1344"><highlight class="normal"></highlight></codeline>
<codeline lineno="1345"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>2)<sp/>Build<sp/>cumulative<sp/>length<sp/>table</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1346"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>int32<sp/>SegCount<sp/>=<sp/>CleanStroke.Num()<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="1347"><highlight class="normal"><sp/><sp/><sp/><sp/>TArray&lt;float&gt;<sp/>CumLen;</highlight></codeline>
<codeline lineno="1348"><highlight class="normal"><sp/><sp/><sp/><sp/>CumLen.SetNum(CleanStroke.Num());</highlight></codeline>
<codeline lineno="1349"><highlight class="normal"><sp/><sp/><sp/><sp/>CumLen[0]<sp/>=<sp/>0.f;</highlight></codeline>
<codeline lineno="1350"><highlight class="normal"></highlight></codeline>
<codeline lineno="1351"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>TotalLen<sp/>=<sp/>0.f;</highlight></codeline>
<codeline lineno="1352"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(int32<sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>CleanStroke.Num();<sp/>++i)</highlight></codeline>
<codeline lineno="1353"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TotalLen<sp/>+=<sp/>FVector2D::Distance(CleanStroke[i<sp/>-<sp/>1],<sp/>CleanStroke[i]);</highlight></codeline>
<codeline lineno="1355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CumLen[i]<sp/>=<sp/>TotalLen;</highlight></codeline>
<codeline lineno="1356"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1357"><highlight class="normal"></highlight></codeline>
<codeline lineno="1358"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>3)<sp/>Evenly<sp/>distribute<sp/>samples</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1359"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>Step<sp/>=<sp/>TotalLen<sp/>/<sp/>(NumSamples<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="1360"><highlight class="normal"><sp/><sp/><sp/><sp/>int32<sp/>SegIdx<sp/>=<sp/>1;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>current<sp/>segment<sp/>in<sp/>CleanStroke</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1361"><highlight class="normal"></highlight></codeline>
<codeline lineno="1362"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(int32<sp/>s<sp/>=<sp/>0;<sp/>s<sp/>&lt;<sp/>NumSamples;<sp/>++s)</highlight></codeline>
<codeline lineno="1363"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>TargetDist<sp/>=<sp/>s<sp/>*<sp/>Step;</highlight></codeline>
<codeline lineno="1365"><highlight class="normal"></highlight></codeline>
<codeline lineno="1366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>advance<sp/>until<sp/>TargetDist<sp/>falls<sp/>inside<sp/>[CumLen[SegIdx-1],<sp/>CumLen[SegIdx]]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(SegIdx<sp/>&lt;<sp/>CleanStroke.Num()<sp/>-<sp/>1<sp/>&amp;&amp;<sp/>CumLen[SegIdx]<sp/>&lt;<sp/>TargetDist)</highlight></codeline>
<codeline lineno="1368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++SegIdx;</highlight></codeline>
<codeline lineno="1369"><highlight class="normal"></highlight></codeline>
<codeline lineno="1370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>PrevCum<sp/>=<sp/>CumLen[SegIdx<sp/>-<sp/>1];</highlight></codeline>
<codeline lineno="1371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>SegLen<sp/>=<sp/>CumLen[SegIdx]<sp/>-<sp/>PrevCum;</highlight></codeline>
<codeline lineno="1372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>Alpha<sp/>=<sp/>(SegLen<sp/>&gt;<sp/>0.f)<sp/>?<sp/>(TargetDist<sp/>-<sp/>PrevCum)<sp/>/<sp/>SegLen<sp/>:<sp/>0.f;</highlight></codeline>
<codeline lineno="1373"><highlight class="normal"></highlight></codeline>
<codeline lineno="1374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FVector2D<sp/>Sample<sp/>=<sp/>FMath::Lerp(CleanStroke[SegIdx<sp/>-<sp/>1],<sp/>CleanStroke[SegIdx],<sp/>Alpha);</highlight></codeline>
<codeline lineno="1375"><highlight class="normal"></highlight></codeline>
<codeline lineno="1376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Result.Add(Sample);</highlight></codeline>
<codeline lineno="1377"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1378"><highlight class="normal"></highlight></codeline>
<codeline lineno="1379"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Result;</highlight></codeline>
<codeline lineno="1380"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1381"><highlight class="normal"></highlight></codeline>
<codeline lineno="1382" refid="class_u_grid_canvas_widget_1a43b4b12518604a85227c9a196173cdee" refkind="member"><highlight class="normal">TArray&lt;FVector2D&gt;<sp/><ref refid="class_u_grid_canvas_widget_1a43b4b12518604a85227c9a196173cdee" kindref="member">UGridCanvasWidget::ChaikinSmooth</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TArray&lt;FVector2D&gt;&amp;<sp/>Points,<sp/>int32<sp/>Iterations)</highlight></codeline>
<codeline lineno="1383"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1384"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Points.Num()<sp/>&lt;<sp/>3<sp/>||<sp/>Iterations<sp/>&lt;=<sp/>0)</highlight></codeline>
<codeline lineno="1385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Points;</highlight></codeline>
<codeline lineno="1386"><highlight class="normal"></highlight></codeline>
<codeline lineno="1387"><highlight class="normal"><sp/><sp/><sp/><sp/>TArray&lt;FVector2D&gt;<sp/>Cur<sp/>=<sp/>Points;</highlight></codeline>
<codeline lineno="1388"><highlight class="normal"><sp/><sp/><sp/><sp/>TArray&lt;FVector2D&gt;<sp/>Next;</highlight></codeline>
<codeline lineno="1389"><highlight class="normal"></highlight></codeline>
<codeline lineno="1390"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(int32<sp/>it<sp/>=<sp/>0;<sp/>it<sp/>&lt;<sp/>Iterations;<sp/>++it)</highlight></codeline>
<codeline lineno="1391"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Next.Reset();</highlight></codeline>
<codeline lineno="1393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Next.Reserve(Cur.Num()<sp/>*<sp/>2);</highlight></codeline>
<codeline lineno="1394"><highlight class="normal"></highlight></codeline>
<codeline lineno="1395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>keep<sp/>first<sp/>&amp;<sp/>last<sp/>to<sp/>avoid<sp/>shrinkage<sp/>at<sp/>the<sp/>ends</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Next.Add(Cur[0]);</highlight></codeline>
<codeline lineno="1397"><highlight class="normal"></highlight></codeline>
<codeline lineno="1398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(int32<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>Cur.Num()<sp/>-<sp/>1;<sp/>++i)</highlight></codeline>
<codeline lineno="1399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FVector2D&amp;<sp/>P0<sp/>=<sp/>Cur[i];</highlight></codeline>
<codeline lineno="1401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FVector2D&amp;<sp/>P1<sp/>=<sp/>Cur[i<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="1402"><highlight class="normal"></highlight></codeline>
<codeline lineno="1403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Chaikin<sp/>cut<sp/>points<sp/>(1/4<sp/>and<sp/>3/4<sp/>along<sp/>segment)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FVector2D<sp/>Q<sp/>=<sp/>P0<sp/>+<sp/>0.25f<sp/>*<sp/>(P1<sp/>-<sp/>P0);</highlight></codeline>
<codeline lineno="1405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FVector2D<sp/>R<sp/>=<sp/>P0<sp/>+<sp/>0.75f<sp/>*<sp/>(P1<sp/>-<sp/>P0);</highlight></codeline>
<codeline lineno="1406"><highlight class="normal"></highlight></codeline>
<codeline lineno="1407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Next.Add(Q);</highlight></codeline>
<codeline lineno="1408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Next.Add(R);</highlight></codeline>
<codeline lineno="1409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1410"><highlight class="normal"></highlight></codeline>
<codeline lineno="1411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Next.Add(Cur.Last());</highlight></codeline>
<codeline lineno="1412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Cur<sp/>=<sp/>MoveTemp(Next);</highlight></codeline>
<codeline lineno="1413"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1414"><highlight class="normal"></highlight></codeline>
<codeline lineno="1415"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Cur;</highlight></codeline>
<codeline lineno="1416"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1417"><highlight class="normal"></highlight></codeline>
<codeline lineno="1418" refid="class_u_grid_canvas_widget_1a88f74842a895dcbe707101091072c419" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_u_grid_canvas_widget_1a88f74842a895dcbe707101091072c419" kindref="member">UGridCanvasWidget::DrawFreehandPreview</ref>(FSlateWindowElementList&amp;<sp/>OutDrawElements,<sp/>int32&amp;<sp/>LayerId,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FGeometry&amp;<sp/>AllottedGeometry,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FSlateRect&amp;<sp/>ClipRect)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1419"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1420"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="class_u_grid_canvas_widget_1abdd250134c6f7067b7ee2b91a1de7c13" kindref="member">bDrawingStroke</ref><sp/>||<sp/>RawStroke.Num()<sp/>&lt;<sp/>2)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1421"><highlight class="normal"></highlight></codeline>
<codeline lineno="1422"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1423"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SETTINGS<sp/><sp/>(tweak<sp/>here<sp/>if<sp/>desired)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1424"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1425"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>ScreenSampleStep<sp/>=<sp/>1.f<sp/>/<sp/>32.f;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>px<sp/>between<sp/>spline<sp/>samples</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1426"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>GlowThickness<sp/>=<sp/>6.f;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>px<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1427"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>CoreMinThick<sp/>=<sp/>1.f;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>px<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1428"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>CoreMaxThick<sp/>=<sp/>3.f;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>px<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1429"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FLinearColor<sp/>BaseRGB(1.f,<sp/>0.1f,<sp/>0.1f);<sp/><sp/></highlight><highlight class="comment">//<sp/>red<sp/>tone<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1430"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>TailAlpha<sp/>=<sp/>0.35f;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1431"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>HeadAlpha<sp/>=<sp/>0.75f;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>brighter<sp/>at<sp/>pen<sp/>tip<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1432"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>TipSize<sp/>=<sp/>4.f;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>px<sp/>box<sp/>size<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1433"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>Chaikin<sp/>smoothing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1434"><highlight class="normal"><sp/><sp/><sp/><sp/>TArray&lt;FVector2D&gt;<sp/>Smooth<sp/>=<sp/><ref refid="class_u_grid_canvas_widget_1a43b4b12518604a85227c9a196173cdee" kindref="member">ChaikinSmooth</ref>(RawStroke,<sp/>4);<sp/><sp/></highlight><highlight class="comment">//<sp/>2<sp/>passes<sp/>1/4<sp/>pts</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1435"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1436"><highlight class="normal"></highlight></codeline>
<codeline lineno="1437"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Duplicate<sp/>endpoints<sp/>(copy<sp/>first/last<sp/>so<sp/>we<sp/>don&apos;t<sp/>alias)<sp/><sp/>[spline<sp/>boundary]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1438"><highlight class="normal"><sp/><sp/><sp/><sp/>TArray&lt;FVector2D&gt;<sp/>Pts<sp/>=<sp/>Smooth;</highlight></codeline>
<codeline lineno="1439"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FVector2D<sp/>First<sp/>=<sp/>Pts[0];</highlight></codeline>
<codeline lineno="1441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FVector2D<sp/>Last<sp/>=<sp/>Pts.Last();</highlight></codeline>
<codeline lineno="1442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Pts.Insert(First,<sp/>0);</highlight></codeline>
<codeline lineno="1443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Pts.Add(Last);</highlight></codeline>
<codeline lineno="1444"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1445"><highlight class="normal"></highlight></codeline>
<codeline lineno="1446"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>1)<sp/>Catmull<sp/>Rom<sp/>oversampling<sp/>in<sp/>*world<sp/>space*<sp/>--------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1447"><highlight class="normal"><sp/><sp/><sp/><sp/>TArray&lt;FVector2D&gt;<sp/>SamplesWorld;</highlight></codeline>
<codeline lineno="1448"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>StepPerSeg<sp/>=<sp/>1.f<sp/>/<sp/>12.f;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>12<sp/>subs<sp/>per<sp/>span</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1449"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(int32<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>Pts.Num()<sp/>-<sp/>3;<sp/>++i)</highlight></codeline>
<codeline lineno="1450"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>t<sp/>=<sp/>0.f;<sp/>t<sp/>&lt;<sp/>1.f;<sp/>t<sp/>+=<sp/>StepPerSeg)</highlight></codeline>
<codeline lineno="1452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SamplesWorld.Add(</highlight></codeline>
<codeline lineno="1454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CatmullRom(Pts[i],<sp/>Pts[i<sp/>+<sp/>1],<sp/>Pts[i<sp/>+<sp/>2],<sp/>Pts[i<sp/>+<sp/>3],<sp/>t));</highlight></codeline>
<codeline lineno="1455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1456"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1457"><highlight class="normal"><sp/><sp/><sp/><sp/>SamplesWorld.Add(Smooth.Last());</highlight></codeline>
<codeline lineno="1458"><highlight class="normal"></highlight></codeline>
<codeline lineno="1459"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>2)<sp/>World<sp/>screen<sp/>coords<sp/>--------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1460"><highlight class="normal"><sp/><sp/><sp/><sp/>TArray&lt;FVector2D&gt;<sp/>SamplesScreen;</highlight></codeline>
<codeline lineno="1461"><highlight class="normal"><sp/><sp/><sp/><sp/>SamplesScreen.Reserve(SamplesWorld.Num());</highlight></codeline>
<codeline lineno="1462"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FVector2D&amp;<sp/>W<sp/>:<sp/>SamplesWorld)</highlight></codeline>
<codeline lineno="1463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SamplesScreen.Add((W<sp/>*<sp/><ref refid="class_u_grid_canvas_widget_1a8b294a32e146b92ece32f6ce8c0219d6" kindref="member">Zoom</ref>)<sp/>+<sp/><ref refid="class_u_grid_canvas_widget_1a40c73780a82afbbe153da653d5facac7" kindref="member">PanOffset</ref>);</highlight></codeline>
<codeline lineno="1464"><highlight class="normal"></highlight></codeline>
<codeline lineno="1465"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>3)<sp/>Pixel<sp/>step<sp/>resample<sp/>for<sp/>perfectly<sp/>even<sp/>spacing<sp/><sp/>(4px)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1466"><highlight class="normal"><sp/><sp/><sp/><sp/>TArray&lt;FVector2D&gt;<sp/>Resampled;</highlight></codeline>
<codeline lineno="1467"><highlight class="normal"><sp/><sp/><sp/><sp/>Resampled.Add(SamplesScreen[0]);</highlight></codeline>
<codeline lineno="1468"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(int32<sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>SamplesScreen.Num();<sp/>++i)</highlight></codeline>
<codeline lineno="1469"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(FVector2D::Distance(Resampled.Last(),<sp/>SamplesScreen[i])<sp/>&gt;=<sp/>ScreenSampleStep)</highlight></codeline>
<codeline lineno="1471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Resampled.Add(SamplesScreen[i]);</highlight></codeline>
<codeline lineno="1472"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1473"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Resampled.Last()<sp/>!=<sp/>SamplesScreen.Last())</highlight></codeline>
<codeline lineno="1474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Resampled.Add(SamplesScreen.Last());</highlight></codeline>
<codeline lineno="1475"><highlight class="normal"></highlight></codeline>
<codeline lineno="1476"><highlight class="normal"></highlight></codeline>
<codeline lineno="1477"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Cull<sp/>segments<sp/>&lt;<sp/>0.5<sp/>*<sp/>CoreThickness<sp/>(1px)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1478"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>CullDist<sp/>=<sp/>1.f;<sp/><sp/></highlight><highlight class="comment">//<sp/>px</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TArray&lt;FVector2D&gt;<sp/>Culled;<sp/>Culled.Reserve(Resampled.Num());</highlight></codeline>
<codeline lineno="1481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Culled.Add(Resampled[0]);</highlight></codeline>
<codeline lineno="1482"><highlight class="normal"></highlight></codeline>
<codeline lineno="1483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(int32<sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>Resampled.Num();<sp/>++i)</highlight></codeline>
<codeline lineno="1484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(FVector2D::Distance(Culled.Last(),<sp/>Resampled[i])<sp/>&gt;=<sp/>CullDist)</highlight></codeline>
<codeline lineno="1486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Culled.Add(Resampled[i]);</highlight></codeline>
<codeline lineno="1487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Resampled<sp/>=<sp/>MoveTemp(Culled);</highlight></codeline>
<codeline lineno="1489"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1490"><highlight class="normal"></highlight></codeline>
<codeline lineno="1491"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>4)<sp/>Draw<sp/>---------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1492"><highlight class="normal"><sp/><sp/><sp/><sp/>FSlateClippingZone<sp/>Zone(ClipRect);</highlight></codeline>
<codeline lineno="1493"><highlight class="normal"><sp/><sp/><sp/><sp/>OutDrawElements.PushClip(Zone);</highlight></codeline>
<codeline lineno="1494"><highlight class="normal"></highlight></codeline>
<codeline lineno="1495"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1496"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>4?A<sp/><sp/>soft<sp/>glow<sp/>(one<sp/>polyline)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>replace<sp/>the<sp/>loop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1497"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1498"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TArray&lt;FVector2D&gt;<sp/>GlowPts<sp/>=<sp/>Resampled;</highlight></codeline>
<codeline lineno="1500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Closed<sp/>=<sp/>false,<sp/>antialias,<sp/>one<sp/>thickness</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FSlateDrawElement::MakeLines(</highlight></codeline>
<codeline lineno="1502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OutDrawElements,</highlight></codeline>
<codeline lineno="1503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LayerId,</highlight></codeline>
<codeline lineno="1504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AllottedGeometry.ToPaintGeometry(),</highlight></codeline>
<codeline lineno="1505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GlowPts,</highlight></codeline>
<codeline lineno="1506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESlateDrawEffect::None,</highlight></codeline>
<codeline lineno="1507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BaseRGB.CopyWithNewOpacity(TailAlpha<sp/>*<sp/>0.7f),</highlight></codeline>
<codeline lineno="1508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>**not<sp/>closed!**</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GlowThickness);</highlight></codeline>
<codeline lineno="1510"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1511"><highlight class="normal"></highlight></codeline>
<codeline lineno="1512"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1513"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>4B<sp/><sp/>crisp<sp/>core<sp/>(one<sp/>polyline;<sp/>constant<sp/>2?px)<sp/><sp/>&lt;&lt;<sp/>replace<sp/>2nd<sp/>loop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1514"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1515"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>CoreThickness<sp/>=<sp/>2.f;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>fixed<sp/>-<sp/>remove<sp/>variable<sp/>width</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FSlateDrawElement::MakeLines(</highlight></codeline>
<codeline lineno="1518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OutDrawElements,</highlight></codeline>
<codeline lineno="1519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LayerId<sp/>+<sp/>1,</highlight></codeline>
<codeline lineno="1520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AllottedGeometry.ToPaintGeometry(),</highlight></codeline>
<codeline lineno="1521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Resampled,</highlight></codeline>
<codeline lineno="1522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESlateDrawEffect::None,</highlight></codeline>
<codeline lineno="1523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BaseRGB.CopyWithNewOpacity(HeadAlpha),<sp/></highlight></codeline>
<codeline lineno="1524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CoreThickness);</highlight></codeline>
<codeline lineno="1526"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1527"><highlight class="normal"></highlight></codeline>
<codeline lineno="1528"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1529"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>4C<sp/><sp/>Sparkle<sp/>at<sp/>pen<sp/>tip<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[C]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1530"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1531"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FVector2D<sp/>TipPos<sp/>=<sp/>Resampled.Last()<sp/>-<sp/>FVector2D(TipSize<sp/>*<sp/>0.5f);</highlight></codeline>
<codeline lineno="1532"><highlight class="normal"><sp/><sp/><sp/><sp/>FSlateDrawElement::MakeBox(</highlight></codeline>
<codeline lineno="1533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OutDrawElements,</highlight></codeline>
<codeline lineno="1534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LayerId<sp/>+<sp/>2,</highlight></codeline>
<codeline lineno="1535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AllottedGeometry.ToPaintGeometry(TipPos,<sp/>FVector2D(TipSize)),</highlight></codeline>
<codeline lineno="1536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FCoreStyle::Get().GetBrush(</highlight><highlight class="stringliteral">&quot;WhiteBrush&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="1537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESlateDrawEffect::None,</highlight></codeline>
<codeline lineno="1538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FLinearColor(1.f,<sp/>1.f,<sp/>1.f,<sp/>0.85f));<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>bright</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1539"><highlight class="normal"></highlight></codeline>
<codeline lineno="1540"><highlight class="normal"><sp/><sp/><sp/><sp/>OutDrawElements.PopClip();</highlight></codeline>
<codeline lineno="1541"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="Source/TimeAssassin/GridCanvasWidget.cpp"/>
  </compounddef>
</doxygen>
