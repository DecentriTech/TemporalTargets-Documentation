<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="_temporal_character_8cpp" kind="file" language="C++">
    <compoundname>TemporalCharacter.cpp</compoundname>
    <includes refid="_temporal_character_8h" local="yes">TemporalCharacter.h</includes>
    <includes local="yes">GameFramework/Actor.h</includes>
    <includes local="yes">Kismet/KismetMathLibrary.h</includes>
    <includes local="yes">GameFramework/CharacterMovementComponent.h</includes>
    <includes refid="_interaction_component_8h" local="yes">InteractionComponent.h</includes>
    <includes refid="_replay_recorder_component_8h" local="yes">ReplayRecorderComponent.h</includes>
    <includes refid="_weapon_component_8h" local="yes">WeaponComponent.h</includes>
    <includes refid="_weapon_inventory_component_8h" local="yes">WeaponInventoryComponent.h</includes>
    <includes refid="_damageable_interface_8h" local="yes">DamageableInterface.h</includes>
    <includes refid="_temporal_game_mode_8h" local="yes">TemporalGameMode.h</includes>
    <includes local="yes">Kismet/GameplayStatics.h</includes>
    <includes local="yes">Templates/SharedPointer.h</includes>
    <incdepgraph>
      <node id="8">
        <label>BPI_Interactable.generated.h</label>
      </node>
      <node id="34">
        <label>Blueprint/UserWidget.h</label>
      </node>
      <node id="11">
        <label>Components/ActorComponent.h</label>
      </node>
      <node id="3">
        <label>CoreMinimal.h</label>
      </node>
      <node id="35">
        <label>CrosshairWidget.generated.h</label>
      </node>
      <node id="13">
        <label>DamageableComponent.generated.h</label>
      </node>
      <node id="14">
        <label>DamageableInterface.generated.h</label>
      </node>
      <node id="20">
        <label>Engine/DataAsset.h</label>
      </node>
      <node id="6">
        <label>BPI_Interactable.h</label>
        <link refid="_b_p_i___interactable_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="37">
        <label>CombatTags.h</label>
        <link refid="_combat_tags_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
      </node>
      <node id="33">
        <label>CrosshairWidget.h</label>
        <link refid="_crosshair_widget_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>DamageableComponent.h</label>
        <link refid="_damageable_component_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>DamageableInterface.h</label>
        <link refid="_damageable_interface_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>FPlayerFrameData.h</label>
        <link refid="_f_player_frame_data_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="36">
        <label>HitmarkerWidget.h</label>
        <link refid="_hitmarker_widget_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>InteractionComponent.h</label>
        <link refid="_interaction_component_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>ReplayRecorderComponent.h</label>
        <link refid="_replay_recorder_component_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>TACharacter.h</label>
        <link refid="_t_a_character_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="45">
        <label>TemporalAIController.h</label>
        <link refid="_temporal_a_i_controller_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>Source/TimeAssassin/TemporalCharacter.cpp</label>
        <link refid="_temporal_character_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>TemporalCharacter.h</label>
        <link refid="_temporal_character_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="43">
        <label>TemporalGameMode.h</label>
        <link refid="_temporal_game_mode_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
      </node>
      <node id="32">
        <label>WeaponComponent.h</label>
        <link refid="_weapon_component_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>WeaponDataAsset.h</label>
        <link refid="_weapon_data_asset_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="41">
        <label>WeaponInventoryComponent.h</label>
        <link refid="_weapon_inventory_component_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>FPlayerFrameData.generated.h</label>
      </node>
      <node id="25">
        <label>GameFramework/Actor.h</label>
      </node>
      <node id="4">
        <label>GameFramework/Character.h</label>
      </node>
      <node id="27">
        <label>GameFramework/CharacterMovementComponent.h</label>
      </node>
      <node id="44">
        <label>GameFramework/GameModeBase.h</label>
      </node>
      <node id="12">
        <label>GameplayTagContainer.h</label>
      </node>
      <node id="39">
        <label>HitmarkerWidget.generated.h</label>
      </node>
      <node id="15">
        <label>InputAction.h</label>
      </node>
      <node id="16">
        <label>InputMappingContext.h</label>
      </node>
      <node id="29">
        <label>InteractionComponent.generated.h</label>
      </node>
      <node id="49">
        <label>Kismet/GameplayStatics.h</label>
      </node>
      <node id="26">
        <label>Kismet/KismetMathLibrary.h</label>
      </node>
      <node id="38">
        <label>NativeGameplayTags.h</label>
      </node>
      <node id="31">
        <label>ReplayRecorderComponent.generated.h</label>
      </node>
      <node id="46">
        <label>Runtime/AIModule/Classes/AIController.h</label>
      </node>
      <node id="17">
        <label>TACharacter.generated.h</label>
      </node>
      <node id="23">
        <label>Templates/SharedPointer.h</label>
      </node>
      <node id="47">
        <label>TemporalAIController.generated.h</label>
      </node>
      <node id="24">
        <label>TemporalCharacter.generated.h</label>
      </node>
      <node id="48">
        <label>TemporalGameMode.generated.h</label>
      </node>
      <node id="7">
        <label>UObject/Interface.h</label>
      </node>
      <node id="40">
        <label>WeaponComponent.generated.h</label>
      </node>
      <node id="21">
        <label>WeaponDataAsset.generated.h</label>
      </node>
      <node id="42">
        <label>WeaponInventoryComponent.generated.h</label>
      </node>
    </incdepgraph>
    <sectiondef kind="define">
      <memberdef kind="define" id="_temporal_character_8cpp_1af9b7a70540abecc8e501d289684cb973" prot="public" static="no">
        <name>X</name>
        <param><defname>Flag</defname></param>
        <param><defname>Func</defname></param>
        <initializer>        ReplayEventHandlers.Add(<ref refid="struct_f_replay_handler_entry" kindref="compound">FReplayHandlerEntry</ref>{ EReplayActionFlags::Flag, FReplayEventDelegate::CreateUObject(this, &amp;ATemporalCharacter::Func) });</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/TimeAssassin/TemporalCharacter.cpp" line="33" column="13"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Fill<sp/>out<sp/>your<sp/>copyright<sp/>notice<sp/>in<sp/>the<sp/>Description<sp/>page<sp/>of<sp/>Project<sp/>Settings.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_temporal_character_8h" kindref="compound">TemporalCharacter.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;GameFramework/Actor.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Kismet/KismetMathLibrary.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;GameFramework/CharacterMovementComponent.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_interaction_component_8h" kindref="compound">InteractionComponent.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_replay_recorder_component_8h" kindref="compound">ReplayRecorderComponent.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_weapon_component_8h" kindref="compound">WeaponComponent.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_weapon_inventory_component_8h" kindref="compound">WeaponInventoryComponent.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_damageable_interface_8h" kindref="compound">DamageableInterface.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_temporal_game_mode_8h" kindref="compound">TemporalGameMode.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Kismet/GameplayStatics.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Templates/SharedPointer.h&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>Ensure<sp/>shared<sp/>pointers<sp/>are<sp/>available</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Sets<sp/>default<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17" refid="class_a_temporal_character_1a667d9c49508c25567dfb5672b15a6008" refkind="member"><highlight class="normal"><ref refid="class_a_temporal_character_1a667d9c49508c25567dfb5672b15a6008" kindref="member">ATemporalCharacter::ATemporalCharacter</ref>()</highlight></codeline>
<codeline lineno="18"><highlight class="normal">{</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>PrimaryActorTick.bCanEverTick<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_a_temporal_character_1a67673baa8f7cc8622a16e9733fa978cb" kindref="member">PlaybackTime</ref><sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Initialize<sp/>shared<sp/>pointer<sp/>to<sp/>nullptr</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_a_temporal_character_1a1449c43797c7d07b6c2f5f9e3ffe2a5d" kindref="member">ReplayDataPtr</ref><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>up<sp/>the<sp/>event<sp/>handlers<sp/>map.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>For<sp/>each<sp/>replay<sp/>action<sp/>flag,<sp/>bind<sp/>the<sp/>default<sp/>C++<sp/>function.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>You<sp/>can<sp/>override<sp/>these<sp/>by<sp/>implementing<sp/>the<sp/>Blueprint<sp/>events<sp/>(OnGhostJump,<sp/>OnGhostShoot)<sp/>if<sp/>needed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//ReplayEventHandlers.Add(EReplayActionFlags::Jumped,<sp/>FReplayEventDelegate::CreateUObject(this,<sp/>&amp;ATemporalCharacter::ProcessJumpEvent));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//ReplayEventHandlers.Add(EReplayActionFlags::FiredWeapon,<sp/>FReplayEventDelegate::CreateUObject(this,<sp/>&amp;ATemporalCharacter::ProcessShootEvent));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Automatically<sp/>bind<sp/>replay<sp/>events<sp/>using<sp/>the<sp/>macro<sp/>list.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>X(Flag,<sp/>Func)<sp/>\</highlight></codeline>
<codeline lineno="34"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ReplayEventHandlers.Add(FReplayHandlerEntry{<sp/>EReplayActionFlags::Flag,<sp/>FReplayEventDelegate::CreateUObject(this,<sp/>&amp;ATemporalCharacter::Func)<sp/>});</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_temporal_character_8h_1a5dc31e53903277847805dd17628d2435" kindref="member">REPLAY_EVENT_LIST</ref></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#undef<sp/>X</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>UCharacterMovementComponent*<sp/>Movement<sp/>=<sp/>GetCharacterMovement();</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Movement)</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>these<sp/>to<sp/>high<sp/>values<sp/>so<sp/>that<sp/>the<sp/>velocity<sp/>change<sp/>is<sp/>nearly<sp/>instantaneous.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Movement-&gt;bUseControllerDesiredRotation<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Movement-&gt;MaxAcceleration<sp/>=<sp/>BIG_NUMBER;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Movement-&gt;BrakingDecelerationWalking<sp/>=<sp/>0.f;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Movement-&gt;GroundFriction<sp/>=<sp/>0.f;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Optionally,<sp/>ensure<sp/>the<sp/>ghost<sp/>is<sp/>in<sp/>the<sp/>walking<sp/>mode.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Movement-&gt;SetMovementMode(MOVE_Falling);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>You<sp/>may<sp/>also<sp/>want<sp/>to<sp/>set<sp/>MaxWalkSpeed<sp/>to<sp/>a<sp/>sufficiently<sp/>high<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Movement-&gt;MaxWalkSpeed<sp/>=<sp/>10000.f;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Movement-&gt;MaxFlySpeed<sp/>=<sp/>10000.f;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal">}</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59" refid="class_a_temporal_character_1a1efeb6e6a04c85d8e29dd8b8fe1b2c0f" refkind="member"><highlight class="normal"><ref refid="class_a_temporal_character_1a1efeb6e6a04c85d8e29dd8b8fe1b2c0f" kindref="member">ATemporalCharacter::~ATemporalCharacter</ref>()</highlight></codeline>
<codeline lineno="60"><highlight class="normal">{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_a_temporal_character_1a67673baa8f7cc8622a16e9733fa978cb" kindref="member">PlaybackTime</ref><sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="62"><highlight class="normal">}</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64" refid="class_a_temporal_character_1a6870164dc921d6cb870dc2f5acc1e427" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_a_temporal_character_1a6870164dc921d6cb870dc2f5acc1e427" kindref="member">ATemporalCharacter::EndPlay</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>EEndPlayReason::Type<sp/>EndPlayReason)</highlight></codeline>
<codeline lineno="65"><highlight class="normal">{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>Super::EndPlay(EndPlayReason);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_a_temporal_character_1a1bcb0fc42ec0b14204fa1ca589931c58" kindref="member">ReplayEventHandlers</ref>.Reset();</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//ReplayDataPtr.Reset();<sp/>//<sp/>No<sp/>need<sp/>to<sp/>reset<sp/>shared<sp/>pointer,<sp/>it<sp/>will<sp/>be<sp/>cleaned<sp/>up<sp/>automatically.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal">}</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72" refid="class_a_temporal_character_1a67a3cec0d56a486a1a53894e5214bb58" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_a_temporal_character_1a67a3cec0d56a486a1a53894e5214bb58" kindref="member">ATemporalCharacter::BeginPlay</ref>()</highlight></codeline>
<codeline lineno="73"><highlight class="normal">{</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>Super::BeginPlay();</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>Tags.AddUnique(</highlight><highlight class="stringliteral">&quot;Ghost&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_a_temporal_character_1a5fd5e34a8a8b28296d28154c8b0e9d48" kindref="member">LastGhostPosition</ref><sp/>=<sp/>GetActorLocation();</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Optionally<sp/>clear<sp/>or<sp/>precompute<sp/>CumulativeDistances<sp/>here.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_a_temporal_character_1af1c84fd0c105c9a623da357a1ef3302a" kindref="member">CumulativeDistances</ref>.Empty();</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_a_temporal_game_mode" kindref="compound">ATemporalGameMode</ref>*<sp/>GM<sp/>=<sp/>Cast&lt;ATemporalGameMode&gt;(UGameplayStatics::GetGameMode(</highlight><highlight class="keyword">this</highlight><highlight class="normal">)))</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="class_a_temporal_character_1ad2de46499d798556533a4dd3fb6f8d2f" kindref="member">GhostID</ref>.IsNone())</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GM-&gt;RegisterGhost(<ref refid="class_a_temporal_character_1ad2de46499d798556533a4dd3fb6f8d2f" kindref="member">GhostID</ref>,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="89"><highlight class="normal">}</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91" refid="class_a_temporal_character_1a4ceee8241c27f2e30ea2aa494cd4af94" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_a_temporal_character_1a4ceee8241c27f2e30ea2aa494cd4af94" kindref="member">ATemporalCharacter::Tick</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>DeltaTime)</highlight></codeline>
<codeline lineno="92"><highlight class="normal">{</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>Super::Tick(DeltaTime);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>**Ensure<sp/>replay<sp/>data<sp/>is<sp/>valid<sp/>before<sp/>processing**</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="class_a_temporal_character_1a1449c43797c7d07b6c2f5f9e3ffe2a5d" kindref="member">ReplayDataPtr</ref>.IsValid()<sp/>||<sp/><ref refid="class_a_temporal_character_1a1449c43797c7d07b6c2f5f9e3ffe2a5d" kindref="member">ReplayDataPtr</ref>-&gt;Num()<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UE_LOG(LogTemp,<sp/>Warning,<sp/>TEXT(</highlight><highlight class="stringliteral">&quot;%s<sp/>-<sp/>ReplayDataPtr<sp/>is<sp/>invalid!&quot;</highlight><highlight class="normal">),<sp/>*GetName());</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_a_temporal_character_1a67673baa8f7cc8622a16e9733fa978cb" kindref="member">PlaybackTime</ref><sp/>+=<sp/>DeltaTime;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_a_temporal_character_1a745d6f6b56355d20a6bfe60a82dd199d" kindref="member">UpdatePlayback</ref>(DeltaTime);<sp/></highlight></codeline>
<codeline lineno="104"><highlight class="normal">}</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106" refid="class_a_temporal_character_1a775894fbb17c7d40caacabd2ffdf7acb" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_a_temporal_character_1a775894fbb17c7d40caacabd2ffdf7acb" kindref="member">ATemporalCharacter::InitializeGhostPlayback</ref>(TSharedPtr&lt;TArray&lt;FPlayerFrameData&gt;&gt;<sp/>InReplayDataPtr)</highlight></codeline>
<codeline lineno="107"><highlight class="normal">{</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!InReplayDataPtr.IsValid()<sp/>||<sp/>InReplayDataPtr-&gt;Num()<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UE_LOG(LogTemp,<sp/>Warning,<sp/>TEXT(</highlight><highlight class="stringliteral">&quot;%s<sp/>-<sp/>Received<sp/>invalid<sp/>or<sp/>empty<sp/>replay<sp/>data!&quot;</highlight><highlight class="normal">),<sp/>*GetName());</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Assign<sp/>new<sp/>shared<sp/>pointer<sp/>(NO<sp/>COPY)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_a_temporal_character_1a1449c43797c7d07b6c2f5f9e3ffe2a5d" kindref="member">ReplayDataPtr</ref><sp/>=<sp/>InReplayDataPtr;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_a_temporal_character_1a67673baa8f7cc8622a16e9733fa978cb" kindref="member">PlaybackTime</ref><sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>---------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>Walk<sp/>every<sp/>frame<sp/>&amp;<sp/>shot<sp/>once,<sp/>load<sp/>unique<sp/>WeaponUsed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>---------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_a_temporal_character_1ab4d3ee10af91b626d223f704316948d1" kindref="member">CachedWeapons</ref>.Empty();</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_f_player_frame_data" kindref="compound">FPlayerFrameData</ref>&amp;<sp/>Frame<sp/>:<sp/>*<ref refid="class_a_temporal_character_1a1449c43797c7d07b6c2f5f9e3ffe2a5d" kindref="member">ReplayDataPtr</ref>)</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_f_recorded_shot" kindref="compound">FRecordedShot</ref>&amp;<sp/>Shot<sp/>:<sp/>Frame.CombatData.Shots)</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Shot.<ref refid="struct_f_recorded_shot_1a10c570c36ca0c84b3fe30910b7f6f13c" kindref="member">WeaponUsed</ref>.IsNull())</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FSoftObjectPath<sp/>Path<sp/>=<sp/>Shot.<ref refid="struct_f_recorded_shot_1a10c570c36ca0c84b3fe30910b7f6f13c" kindref="member">WeaponUsed</ref>.ToSoftObjectPath();</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="class_a_temporal_character_1ab4d3ee10af91b626d223f704316948d1" kindref="member">CachedWeapons</ref>.Contains(Path))<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>load<sp/>only<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_u_weapon_data_asset" kindref="compound">UWeaponDataAsset</ref>*<sp/>Loaded<sp/>=<sp/>Shot.<ref refid="struct_f_recorded_shot_1a10c570c36ca0c84b3fe30910b7f6f13c" kindref="member">WeaponUsed</ref>.LoadSynchronous();</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Loaded)</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_a_temporal_character_1ab4d3ee10af91b626d223f704316948d1" kindref="member">CachedWeapons</ref>.Add(Path,<sp/>Loaded);</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UE_LOG(LogTemp,<sp/>Warning,</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TEXT(</highlight><highlight class="stringliteral">&quot;%s<sp/>–<sp/>failed<sp/>to<sp/>stream<sp/>weapon<sp/>asset<sp/>%s&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*GetName(),<sp/>*Path.ToString());</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/>UE_LOG(LogTemp,<sp/>Log,<sp/>TEXT(</highlight><highlight class="stringliteral">&quot;%s<sp/>–<sp/>Weapon<sp/>cache<sp/>built<sp/>with<sp/>%d<sp/>unique<sp/>assets&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*GetName(),<sp/><ref refid="class_a_temporal_character_1ab4d3ee10af91b626d223f704316948d1" kindref="member">CachedWeapons</ref>.Num());</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Log<sp/>memory<sp/>details<sp/>for<sp/>this<sp/>ghost</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/>UE_LOG(LogTemp,<sp/>Warning,<sp/>TEXT(</highlight><highlight class="stringliteral">&quot;%s<sp/>-<sp/>Ghost<sp/>initialized<sp/>with<sp/>%d<sp/>frames.<sp/>Memory<sp/>Address:<sp/>%p&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*GetName(),<sp/><ref refid="class_a_temporal_character_1a1449c43797c7d07b6c2f5f9e3ffe2a5d" kindref="member">ReplayDataPtr</ref>-&gt;Num(),<sp/><ref refid="class_a_temporal_character_1a1449c43797c7d07b6c2f5f9e3ffe2a5d" kindref="member">ReplayDataPtr</ref>.Get());</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Ensure<sp/>timestamps<sp/>are<sp/>normalized</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>FirstFrameTime<sp/>=<sp/>(*ReplayDataPtr)[0].TimeStamp;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="struct_f_player_frame_data" kindref="compound">FPlayerFrameData</ref>&amp;<sp/>Frame<sp/>:<sp/>*<ref refid="class_a_temporal_character_1a1449c43797c7d07b6c2f5f9e3ffe2a5d" kindref="member">ReplayDataPtr</ref>)</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Frame.TimeStamp<sp/>-=<sp/>FirstFrameTime;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>initial<sp/>position<sp/>and<sp/>rotation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/>SetActorLocation((*<ref refid="class_a_temporal_character_1a1449c43797c7d07b6c2f5f9e3ffe2a5d" kindref="member">ReplayDataPtr</ref>)[0].Position);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/>SetActorRotation((*<ref refid="class_a_temporal_character_1a1449c43797c7d07b6c2f5f9e3ffe2a5d" kindref="member">ReplayDataPtr</ref>)[0].Rotation);</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/>UE_LOG(LogTemp,<sp/>Log,<sp/>TEXT(</highlight><highlight class="stringliteral">&quot;%s<sp/>-<sp/>Initialized<sp/>with<sp/>%d<sp/>frames.&quot;</highlight><highlight class="normal">),<sp/>*GetName(),<sp/><ref refid="class_a_temporal_character_1a1449c43797c7d07b6c2f5f9e3ffe2a5d" kindref="member">ReplayDataPtr</ref>-&gt;Num());</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>---<sp/>NEW:<sp/>turn<sp/>off<sp/>all<sp/>the<sp/>inherited<sp/>player<sp/>components<sp/>---</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_a_t_a_character_1a5d445cc065fe5e3bd04fd8b00c82028d" kindref="member">InteractionComponent</ref>)</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_a_t_a_character_1a5d445cc065fe5e3bd04fd8b00c82028d" kindref="member">InteractionComponent</ref>-&gt;Deactivate();</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_a_t_a_character_1a5d445cc065fe5e3bd04fd8b00c82028d" kindref="member">InteractionComponent</ref>-&gt;SetComponentTickEnabled(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_a_t_a_character_1ae55321ef89f0bcf840071cd5d06ca0ee" kindref="member">ReplayRecorder</ref>)</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_a_t_a_character_1ae55321ef89f0bcf840071cd5d06ca0ee" kindref="member">ReplayRecorder</ref>-&gt;Deactivate();</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_a_t_a_character_1ae55321ef89f0bcf840071cd5d06ca0ee" kindref="member">ReplayRecorder</ref>-&gt;SetComponentTickEnabled(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_a_t_a_character_1a2a904c02b55c2da7d1fef9a03289f456" kindref="member">WeaponComponent</ref>)</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_a_t_a_character_1a2a904c02b55c2da7d1fef9a03289f456" kindref="member">WeaponComponent</ref>-&gt;Deactivate();</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_a_t_a_character_1a2a904c02b55c2da7d1fef9a03289f456" kindref="member">WeaponComponent</ref>-&gt;SetComponentTickEnabled(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_a_t_a_character_1a666442dd8f14913d33e191711aa9e793" kindref="member">WeaponInventoryComponent</ref>)</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_a_t_a_character_1a666442dd8f14913d33e191711aa9e793" kindref="member">WeaponInventoryComponent</ref>-&gt;Deactivate();</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_a_t_a_character_1a666442dd8f14913d33e191711aa9e793" kindref="member">WeaponInventoryComponent</ref>-&gt;SetComponentTickEnabled(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="190"><highlight class="normal">}</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="192" refid="class_a_temporal_character_1a2ce29be167b8086ade12bd84c96521db" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TArray&lt;FPlayerFrameData&gt;&amp;<sp/><ref refid="class_a_temporal_character_1a2ce29be167b8086ade12bd84c96521db" kindref="member">ATemporalCharacter::GetRecordedFrames</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="193"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_a_temporal_character_1ad4db9cd1cff04a4c9cc488eee1b8630c" kindref="member">ReplayData</ref>;</highlight></codeline>
<codeline lineno="195"><highlight class="normal">}</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197" refid="class_a_temporal_character_1a9196bf916e358973e22db2f41d32fe26" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_a_temporal_character_1a9196bf916e358973e22db2f41d32fe26" kindref="member">ATemporalCharacter::ResetPlayback</ref>()</highlight></codeline>
<codeline lineno="198"><highlight class="normal">{</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_a_temporal_character_1a67673baa8f7cc8622a16e9733fa978cb" kindref="member">PlaybackTime</ref><sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_a_temporal_character_1a1449c43797c7d07b6c2f5f9e3ffe2a5d" kindref="member">ReplayDataPtr</ref>.IsValid()<sp/>&amp;&amp;<sp/><ref refid="class_a_temporal_character_1a1449c43797c7d07b6c2f5f9e3ffe2a5d" kindref="member">ReplayDataPtr</ref>-&gt;Num()<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SetActorLocation((*<ref refid="class_a_temporal_character_1a1449c43797c7d07b6c2f5f9e3ffe2a5d" kindref="member">ReplayDataPtr</ref>)[0].Position);</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SetActorRotation((*<ref refid="class_a_temporal_character_1a1449c43797c7d07b6c2f5f9e3ffe2a5d" kindref="member">ReplayDataPtr</ref>)[0].Rotation);</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="205"><highlight class="normal">}</highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="207" refid="class_a_temporal_character_1a745d6f6b56355d20a6bfe60a82dd199d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_a_temporal_character_1a745d6f6b56355d20a6bfe60a82dd199d" kindref="member">ATemporalCharacter::UpdatePlayback</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>DeltaTime)</highlight></codeline>
<codeline lineno="208"><highlight class="normal">{</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Update<sp/>the<sp/>DeltaTime<sp/>history.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_a_temporal_character_1a6456d62609dce400918c6a88ff5e12da" kindref="member">DeltaTimeHistory</ref>.Add(DeltaTime);</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_a_temporal_character_1a6456d62609dce400918c6a88ff5e12da" kindref="member">DeltaTimeHistory</ref>.Num()<sp/>&gt;<sp/>3)</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Keep<sp/>only<sp/>the<sp/>most<sp/>recent<sp/>3<sp/>values.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_a_temporal_character_1a6456d62609dce400918c6a88ff5e12da" kindref="member">DeltaTimeHistory</ref>.RemoveAt(0);</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>AverageDeltaTime<sp/>=<sp/>0.f;</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>dt<sp/>:<sp/><ref refid="class_a_temporal_character_1a6456d62609dce400918c6a88ff5e12da" kindref="member">DeltaTimeHistory</ref>)</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AverageDeltaTime<sp/>+=<sp/>dt;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_a_temporal_character_1a6456d62609dce400918c6a88ff5e12da" kindref="member">DeltaTimeHistory</ref>.Num()<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AverageDeltaTime<sp/>/=<sp/><ref refid="class_a_temporal_character_1a6456d62609dce400918c6a88ff5e12da" kindref="member">DeltaTimeHistory</ref>.Num();</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AverageDeltaTime<sp/>=<sp/>DeltaTime;</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Validate<sp/>replay<sp/>data.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="class_a_temporal_character_1a1449c43797c7d07b6c2f5f9e3ffe2a5d" kindref="member">ReplayDataPtr</ref>.IsValid()<sp/>||<sp/><ref refid="class_a_temporal_character_1a1449c43797c7d07b6c2f5f9e3ffe2a5d" kindref="member">ReplayDataPtr</ref>-&gt;Num()<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FINAL<sp/>FRAME:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>int32<sp/>LastIndex<sp/>=<sp/><ref refid="class_a_temporal_character_1a1449c43797c7d07b6c2f5f9e3ffe2a5d" kindref="member">ReplayDataPtr</ref>-&gt;Num()<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_f_player_frame_data" kindref="compound">FPlayerFrameData</ref>&amp;<sp/>FinalFrame<sp/>=<sp/>(*ReplayDataPtr)[LastIndex];</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_a_temporal_character_1a67673baa8f7cc8622a16e9733fa978cb" kindref="member">PlaybackTime</ref><sp/>&gt;=<sp/>FinalFrame.<ref refid="struct_f_player_frame_data_1aa7d6d6c4a99f0ff0dab19b2ddde1eaa9" kindref="member">TimeStamp</ref>)</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FVector<sp/>CurrentPos<sp/>=<sp/>GetActorLocation();</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FVector<sp/>PositionError<sp/>=<sp/>FinalFrame.<ref refid="struct_f_player_frame_data_1ae8c3f2db3f2516246d4c0530d2220086" kindref="member">Position</ref><sp/>-<sp/>CurrentPos;</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FVector<sp/>DesiredVelocity<sp/>=<sp/>PositionError<sp/>/<sp/>DeltaTime;</highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FVector<sp/>RawFinalVelocity<sp/>=<sp/>FinalFrame.<ref refid="struct_f_player_frame_data_1acb405992f31731489233f2158749b361" kindref="member">Velocity</ref>;</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FVector<sp/>DeltaV<sp/>=<sp/>DesiredVelocity<sp/>-<sp/>RawFinalVelocity;</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FVector<sp/>ClampedDeltaV<sp/>=<sp/>DeltaV.GetClampedToMaxSize(100000.f<sp/>*<sp/>DeltaTime);</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DesiredVelocity<sp/>=<sp/>RawFinalVelocity<sp/>+<sp/>ClampedDeltaV;</highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GetCharacterMovement()-&gt;Velocity<sp/>=<sp/>DesiredVelocity;</highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>TurnInterpSpeed<sp/>=<sp/>25.0f;</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FRotator<sp/>NewRot<sp/>=<sp/>FMath::RInterpTo(GetActorRotation(),<sp/>FinalFrame.<ref refid="struct_f_player_frame_data_1a93eaa32f56a69cc27334627065c575f6" kindref="member">Rotation</ref>,<sp/>DeltaTime,<sp/>TurnInterpSpeed);</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SetActorRotation(NewRot);</highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_a_temporal_character_1a95c4e4fb84e82d7057db4c24f285c24d" kindref="member">ProcessPlaybackEvents</ref>(FinalFrame);</highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NORMAL<sp/>PLAYBACK:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/>int32<sp/>TargetIndex<sp/>=<sp/><ref refid="class_a_temporal_character_1a61318c77c5821210f32ec1b0e625cd6d" kindref="member">FindTargetFrameIndex</ref>(<ref refid="class_a_temporal_character_1a67673baa8f7cc8622a16e9733fa978cb" kindref="member">PlaybackTime</ref>);</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(TargetIndex<sp/>&lt;=<sp/>0<sp/>||<sp/>TargetIndex<sp/>&gt;=<sp/><ref refid="class_a_temporal_character_1a1449c43797c7d07b6c2f5f9e3ffe2a5d" kindref="member">ReplayDataPtr</ref>-&gt;Num())</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_f_player_frame_data" kindref="compound">FPlayerFrameData</ref>&amp;<sp/>FrameA<sp/>=<sp/>(*ReplayDataPtr)[TargetIndex<sp/>-<sp/>1];</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_f_player_frame_data" kindref="compound">FPlayerFrameData</ref>&amp;<sp/>FrameB<sp/>=<sp/>(*ReplayDataPtr)[TargetIndex];</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>FrameDelta<sp/>=<sp/>FrameB.<ref refid="struct_f_player_frame_data_1aa7d6d6c4a99f0ff0dab19b2ddde1eaa9" kindref="member">TimeStamp</ref><sp/>-<sp/>FrameA.<ref refid="struct_f_player_frame_data_1aa7d6d6c4a99f0ff0dab19b2ddde1eaa9" kindref="member">TimeStamp</ref>;</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>TimeSinceFrameA<sp/>=<sp/><ref refid="class_a_temporal_character_1a67673baa8f7cc8622a16e9733fa978cb" kindref="member">PlaybackTime</ref><sp/>-<sp/>FrameA.<ref refid="struct_f_player_frame_data_1aa7d6d6c4a99f0ff0dab19b2ddde1eaa9" kindref="member">TimeStamp</ref>;</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>TimeRemaining<sp/>=<sp/>FrameDelta<sp/>-<sp/>TimeSinceFrameA;</highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>NextTime<sp/>=<sp/><ref refid="class_a_temporal_character_1a67673baa8f7cc8622a16e9733fa978cb" kindref="member">PlaybackTime</ref><sp/>+<sp/>DeltaTime;</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>AlphaNext<sp/>=<sp/>(FrameDelta<sp/>&gt;<sp/>KINDA_SMALL_NUMBER)<sp/>?<sp/>(NextTime<sp/>-<sp/>FrameA.<ref refid="struct_f_player_frame_data_1aa7d6d6c4a99f0ff0dab19b2ddde1eaa9" kindref="member">TimeStamp</ref>)<sp/>/<sp/>FrameDelta<sp/>:<sp/>0.f;</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/>AlphaNext<sp/>=<sp/>FMath::Clamp(AlphaNext,<sp/>0.f,<sp/>1.f);</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/>FVector<sp/>ExpectedPosition<sp/>=<sp/>FMath::Lerp(FrameA.<ref refid="struct_f_player_frame_data_1ae8c3f2db3f2516246d4c0530d2220086" kindref="member">Position</ref>,<sp/>FrameB.<ref refid="struct_f_player_frame_data_1ae8c3f2db3f2516246d4c0530d2220086" kindref="member">Position</ref>,<sp/>AlphaNext);</highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/>FVector<sp/>CurrentPos<sp/>=<sp/>GetActorLocation();</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/>FVector<sp/>PositionError<sp/>=<sp/>ExpectedPosition<sp/>-<sp/>CurrentPos;</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/>FVector<sp/>DesiredVelocity<sp/>=<sp/>PositionError<sp/>/<sp/>DeltaTime;</highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(TimeRemaining<sp/>&lt;<sp/>AverageDeltaTime<sp/>&amp;&amp;<sp/>TimeRemaining<sp/>&gt;<sp/>KINDA_SMALL_NUMBER)</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DesiredVelocity<sp/>=<sp/>(ExpectedPosition<sp/>-<sp/>CurrentPos)<sp/>/<sp/>TimeRemaining;</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DesiredVelocity<sp/>=<sp/>(ExpectedPosition<sp/>-<sp/>CurrentPos)<sp/>/<sp/>DeltaTime;</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/>FVector<sp/>RawVelocity<sp/>=<sp/>FMath::Lerp(FrameA.<ref refid="struct_f_player_frame_data_1acb405992f31731489233f2158749b361" kindref="member">Velocity</ref>,<sp/>FrameB.<ref refid="struct_f_player_frame_data_1acb405992f31731489233f2158749b361" kindref="member">Velocity</ref>,<sp/>(<ref refid="class_a_temporal_character_1a67673baa8f7cc8622a16e9733fa978cb" kindref="member">PlaybackTime</ref><sp/>-<sp/>FrameA.<ref refid="struct_f_player_frame_data_1aa7d6d6c4a99f0ff0dab19b2ddde1eaa9" kindref="member">TimeStamp</ref>)<sp/>/<sp/>FrameDelta);</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/>FVector<sp/>DeltaV<sp/>=<sp/>DesiredVelocity<sp/>-<sp/>RawVelocity;</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/>FVector<sp/>ClampedDeltaV<sp/>=<sp/>DeltaV.GetClampedToMaxSize(100000.f<sp/>*<sp/>DeltaTime);</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/>DesiredVelocity<sp/>=<sp/>RawVelocity<sp/>+<sp/>ClampedDeltaV;</highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/>GetCharacterMovement()-&gt;Velocity<sp/>=<sp/>DesiredVelocity;</highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>TurnInterpSpeed<sp/>=<sp/>25.0f;</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/>FRotator<sp/>NewRot<sp/>=<sp/>FMath::RInterpTo(GetActorRotation(),<sp/>FrameB.<ref refid="struct_f_player_frame_data_1a93eaa32f56a69cc27334627065c575f6" kindref="member">Rotation</ref>,<sp/>DeltaTime,<sp/>TurnInterpSpeed);</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/>SetActorRotation(NewRot);</highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_a_temporal_character_1a95c4e4fb84e82d7057db4c24f285c24d" kindref="member">ProcessPlaybackEvents</ref>(FrameB);</highlight></codeline>
<codeline lineno="305"><highlight class="normal">}</highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight></codeline>
<codeline lineno="307" refid="class_a_temporal_character_1a95c4e4fb84e82d7057db4c24f285c24d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_a_temporal_character_1a95c4e4fb84e82d7057db4c24f285c24d" kindref="member">ATemporalCharacter::ProcessPlaybackEvents</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_f_player_frame_data" kindref="compound">FPlayerFrameData</ref>&amp;<sp/>FrameData)</highlight></codeline>
<codeline lineno="308"><highlight class="normal">{</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_a_temporal_character_1a6f9ccb885c218189efedb6d30b9eb0fe" kindref="member">CurrentFrameIndex</ref><sp/>=<sp/><ref refid="class_a_temporal_character_1a61318c77c5821210f32ec1b0e625cd6d" kindref="member">FindTargetFrameIndex</ref>(<ref refid="class_a_temporal_character_1a67673baa8f7cc8622a16e9733fa978cb" kindref="member">PlaybackTime</ref>);</highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>this<sp/>frame<sp/>is<sp/>new,<sp/>reset<sp/>the<sp/>processed<sp/>events<sp/>bitmask.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(FrameData.<ref refid="struct_f_player_frame_data_1aa7d6d6c4a99f0ff0dab19b2ddde1eaa9" kindref="member">TimeStamp</ref><sp/>&gt;<sp/><ref refid="class_a_temporal_character_1a977b73d33bbec5918cb5b9d6def3cc1a" kindref="member">LastProcessedFrameTime</ref>)</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_a_temporal_character_1a977b73d33bbec5918cb5b9d6def3cc1a" kindref="member">LastProcessedFrameTime</ref><sp/>=<sp/>FrameData.<ref refid="struct_f_player_frame_data_1aa7d6d6c4a99f0ff0dab19b2ddde1eaa9" kindref="member">TimeStamp</ref>;</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_a_temporal_character_1a6c75476b38e5f282597ac260805706dc" kindref="member">ProcessedEventFlags</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_a_temporal_character_1abf6c7c6aca0ecd935f7a91aabf4b9b57" kindref="member">LastProcessedShotIndex</ref><sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Calculate<sp/>which<sp/>events<sp/>have<sp/>not<sp/>yet<sp/>been<sp/>processed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8<sp/>NewEvents<sp/>=<sp/>(uint8)FrameData.<ref refid="struct_f_player_frame_data_1a8768b296bb4d63e293d36003f2c4fa66" kindref="member">ActionFlags</ref><sp/>&amp;<sp/>~<ref refid="class_a_temporal_character_1a6c75476b38e5f282597ac260805706dc" kindref="member">ProcessedEventFlags</ref>;</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(NewEvents<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>nothing<sp/>to<sp/>do</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>**DEFENSIVE<sp/>CHECK**:<sp/>if<sp/>for<sp/>some<sp/>reason<sp/>our<sp/>handler<sp/>map<sp/>is<sp/>empty,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>bail<sp/>before<sp/>the<sp/>range-for<sp/>can<sp/>touch<sp/>its<sp/>internal<sp/>bit<sp/>array.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_a_temporal_character_1a1bcb0fc42ec0b14204fa1ca589931c58" kindref="member">ReplayEventHandlers</ref>.Num()<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UE_LOG(LogTemp,<sp/>Warning,<sp/>TEXT(</highlight><highlight class="stringliteral">&quot;%s:<sp/>No<sp/>handlers<sp/>bound<sp/>but<sp/>got<sp/>new<sp/>events=0x%02x&quot;</highlight><highlight class="normal">),<sp/>*GetName(),<sp/>NewEvents);</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>**Snapshot<sp/>the<sp/>handlers<sp/>so<sp/>we<sp/>can<sp/>safely<sp/>iterate<sp/>even<sp/>if</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>the<sp/>original<sp/>array<sp/>gets<sp/>modified<sp/>by<sp/>a<sp/>handler.**</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TArray&lt;FReplayHandlerEntry&gt;<sp/>HandlersSnapshot<sp/>=<sp/><ref refid="class_a_temporal_character_1a1bcb0fc42ec0b14204fa1ca589931c58" kindref="member">ReplayEventHandlers</ref>;</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>int32<sp/>HandlerCount<sp/>=<sp/>HandlersSnapshot.Num();</highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(int32<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>HandlerCount;<sp/>++i)</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_f_replay_handler_entry" kindref="compound">FReplayHandlerEntry</ref>&amp;<sp/>Entry<sp/>=<sp/>HandlersSnapshot[i];</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8<sp/>FlagMask<sp/>=<sp/>(uint8)Entry.<ref refid="struct_f_replay_handler_entry_1a907577cfd4db9610671659e64fc0546d" kindref="member">Flag</ref>;</highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(NewEvents<sp/>&amp;<sp/>FlagMask)</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Entry.<ref refid="struct_f_replay_handler_entry_1ad3397bb1077e60055aee63d248c8d9e5" kindref="member">Handler</ref>.ExecuteIfBound();</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_a_temporal_character_1a6c75476b38e5f282597ac260805706dc" kindref="member">ProcessedEventFlags</ref><sp/>|=<sp/>FlagMask;</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="352"><highlight class="normal">}</highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight></codeline>
<codeline lineno="354" refid="class_a_temporal_character_1ac65bcd28d575599452d3abd0534b71e6" refkind="member"><highlight class="normal">FVector2D<sp/><ref refid="class_a_temporal_character_1ac65bcd28d575599452d3abd0534b71e6" kindref="member">ATemporalCharacter::ClosestPointOnSegment2D</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FVector2D&amp;<sp/>A,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FVector2D&amp;<sp/>B,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FVector2D&amp;<sp/>P)</highlight></codeline>
<codeline lineno="355"><highlight class="normal">{</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FVector2D<sp/>AB<sp/>=<sp/>B<sp/>-<sp/>A;</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>ABLenSq<sp/>=<sp/>AB.SizeSquared();</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ABLenSq<sp/>&lt;<sp/>KINDA_SMALL_NUMBER)</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Degenerate<sp/>segment:<sp/>A<sp/>and<sp/>B<sp/>are<sp/>effectively<sp/>the<sp/>same<sp/>point</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>A;</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Project<sp/>vector<sp/>AP<sp/>onto<sp/>AB<sp/>to<sp/>get<sp/>parameter<sp/>t<sp/>of<sp/>the<sp/>closest<sp/>point:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>t<sp/>=<sp/>FVector2D::DotProduct((P<sp/>-<sp/>A),<sp/>AB)<sp/>/<sp/>ABLenSq;</highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t<sp/>&lt;=<sp/>0.0f)</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Closest<sp/>to<sp/>A</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>A;</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t<sp/>&gt;=<sp/>1.0f)</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Closest<sp/>to<sp/>B</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>B;</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Closest<sp/>point<sp/>is<sp/>in<sp/>between<sp/>A<sp/>and<sp/>B</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>A<sp/>+<sp/>(t<sp/>*<sp/>AB);</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="382"><highlight class="normal">}</highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight></codeline>
<codeline lineno="384" refid="class_a_temporal_character_1aa9e690184522fb9542f1f488e37125e6" refkind="member"><highlight class="normal">int32<sp/><ref refid="class_a_temporal_character_1aa9e690184522fb9542f1f488e37125e6" kindref="member">ATemporalCharacter::CalculateCurrentTargetIndex</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FVector&amp;<sp/>CurrentPos)</highlight></codeline>
<codeline lineno="385"><highlight class="normal">{</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="class_a_temporal_character_1a1449c43797c7d07b6c2f5f9e3ffe2a5d" kindref="member">ReplayDataPtr</ref>.IsValid()<sp/>||<sp/><ref refid="class_a_temporal_character_1a1449c43797c7d07b6c2f5f9e3ffe2a5d" kindref="member">ReplayDataPtr</ref>-&gt;Num()<sp/>&lt;<sp/>2)</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>int32<sp/>FrameCount<sp/>=<sp/><ref refid="class_a_temporal_character_1a1449c43797c7d07b6c2f5f9e3ffe2a5d" kindref="member">ReplayDataPtr</ref>-&gt;Num();</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/>FVector2D<sp/>CurrentXY(CurrentPos.X,<sp/>CurrentPos.Y);</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/>int32<sp/>BestSegmentIndex<sp/>=<sp/>1;<sp/></highlight><highlight class="comment">//<sp/>default:<sp/>segment<sp/>from<sp/>frame<sp/>0<sp/>to<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>MinDistSq<sp/>=<sp/>FLT_MAX;</highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(int32<sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>FrameCount;<sp/>i++)</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>XY<sp/>positions<sp/>of<sp/>the<sp/>two<sp/>endpoints<sp/>of<sp/>the<sp/>segment</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FVector2D<sp/>P0((*<ref refid="class_a_temporal_character_1a1449c43797c7d07b6c2f5f9e3ffe2a5d" kindref="member">ReplayDataPtr</ref>)[i<sp/>-<sp/>1].Position.X,<sp/>(*<ref refid="class_a_temporal_character_1a1449c43797c7d07b6c2f5f9e3ffe2a5d" kindref="member">ReplayDataPtr</ref>)[i<sp/>-<sp/>1].Position.Y);</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FVector2D<sp/>P1((*<ref refid="class_a_temporal_character_1a1449c43797c7d07b6c2f5f9e3ffe2a5d" kindref="member">ReplayDataPtr</ref>)[i].Position.X,<sp/>(*<ref refid="class_a_temporal_character_1a1449c43797c7d07b6c2f5f9e3ffe2a5d" kindref="member">ReplayDataPtr</ref>)[i].Position.Y);</highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>the<sp/>vector<sp/>from<sp/>P0<sp/>to<sp/>P1.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FVector2D<sp/>AB<sp/>=<sp/>P1<sp/>-<sp/>P0;</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>ABLengthSq<sp/>=<sp/>AB.SizeSquared();</highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Calculate<sp/>the<sp/>projection<sp/>scalar<sp/>&apos;t&apos;<sp/>along<sp/>AB<sp/>that<sp/>minimizes<sp/>the<sp/>distance</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>t<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ABLengthSq<sp/>&gt;<sp/>KINDA_SMALL_NUMBER)</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>=<sp/>FVector2D::DotProduct(CurrentXY<sp/>-<sp/>P0,<sp/>AB)<sp/>/<sp/>ABLengthSq;</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>=<sp/>FMath::Clamp(t,<sp/>0.0f,<sp/>1.0f);</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>closest<sp/>point<sp/>on<sp/>the<sp/>segment<sp/>is:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FVector2D<sp/>Projection<sp/>=<sp/>P0<sp/>+<sp/>t<sp/>*<sp/>AB;</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>DistSq<sp/>=<sp/>FVector2D::DistSquared(CurrentXY,<sp/>Projection);</highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Log<sp/>for<sp/>debugging<sp/>(you<sp/>can<sp/>adjust<sp/>verbosity<sp/>as<sp/>needed)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UE_LOG(LogTemp,<sp/>Verbose,<sp/>TEXT(</highlight><highlight class="stringliteral">&quot;Segment<sp/>%d:<sp/>P0=%s,<sp/>P1=%s,<sp/>t=%f,<sp/>DistSq=%f&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i,<sp/>*P0.ToString(),<sp/>*P1.ToString(),<sp/>t,<sp/>DistSq);</highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(DistSq<sp/>&lt;<sp/>MinDistSq)</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MinDistSq<sp/>=<sp/>DistSq;</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BestSegmentIndex<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/>UE_LOG(LogTemp,<sp/>Verbose,<sp/>TEXT(</highlight><highlight class="stringliteral">&quot;Chosen<sp/>TargetIndex:<sp/>%d<sp/>(MinDistSq=%f)&quot;</highlight><highlight class="normal">),<sp/>BestSegmentIndex,<sp/>MinDistSq);</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>BestSegmentIndex;</highlight></codeline>
<codeline lineno="431"><highlight class="normal">}</highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>fraction<sp/>(0.0<sp/>to<sp/>1.0)<sp/>along<sp/>the<sp/>segment<sp/>ending<sp/>at<sp/>TargetIndex,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight><highlight class="comment">//<sp/>representing<sp/>how<sp/>far<sp/>along<sp/>the<sp/>segment<sp/>(from<sp/>its<sp/>start<sp/>at<sp/>index<sp/>TargetIndex-1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>ghost&apos;s<sp/>current<sp/>XY<sp/>position<sp/>lies.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="436" refid="class_a_temporal_character_1a7758d063ce228d511c90efd4ff0d8759" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="class_a_temporal_character_1a7758d063ce228d511c90efd4ff0d8759" kindref="member">ATemporalCharacter::CalculateFractionAlongSegment</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FVector&amp;<sp/>CurrentPos,<sp/>int32<sp/>TargetIndex)</highlight></codeline>
<codeline lineno="437"><highlight class="normal">{</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="class_a_temporal_character_1a1449c43797c7d07b6c2f5f9e3ffe2a5d" kindref="member">ReplayDataPtr</ref>.IsValid()<sp/>||<sp/><ref refid="class_a_temporal_character_1a1449c43797c7d07b6c2f5f9e3ffe2a5d" kindref="member">ReplayDataPtr</ref>-&gt;Num()<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0.0f;</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>TargetIndex<sp/>is<sp/>out<sp/>of<sp/>bounds<sp/>or<sp/>no<sp/>segment<sp/>exists,<sp/>return<sp/>0<sp/>or<sp/>1<sp/>appropriately.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>int32<sp/>FrameCount<sp/>=<sp/><ref refid="class_a_temporal_character_1a1449c43797c7d07b6c2f5f9e3ffe2a5d" kindref="member">ReplayDataPtr</ref>-&gt;Num();</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(TargetIndex<sp/>&lt;<sp/>1)</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0.0f;</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(TargetIndex<sp/>&gt;=<sp/>FrameCount)</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1.0f;</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/>FVector2D<sp/>CurrentXY(CurrentPos.X,<sp/>CurrentPos.Y);</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/>FVector2D<sp/>P0((*<ref refid="class_a_temporal_character_1a1449c43797c7d07b6c2f5f9e3ffe2a5d" kindref="member">ReplayDataPtr</ref>)[TargetIndex<sp/>-<sp/>1].Position.X,<sp/>(*<ref refid="class_a_temporal_character_1a1449c43797c7d07b6c2f5f9e3ffe2a5d" kindref="member">ReplayDataPtr</ref>)[TargetIndex<sp/>-<sp/>1].Position.Y);</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/>FVector2D<sp/>P1((*<ref refid="class_a_temporal_character_1a1449c43797c7d07b6c2f5f9e3ffe2a5d" kindref="member">ReplayDataPtr</ref>)[TargetIndex].Position.X,<sp/>(*<ref refid="class_a_temporal_character_1a1449c43797c7d07b6c2f5f9e3ffe2a5d" kindref="member">ReplayDataPtr</ref>)[TargetIndex].Position.Y);</highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/>FVector2D<sp/>AB<sp/>=<sp/>P1<sp/>-<sp/>P0;</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>ABLengthSq<sp/>=<sp/>AB.SizeSquared();</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>t<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ABLengthSq<sp/>&gt;<sp/>KINDA_SMALL_NUMBER)</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>=<sp/>FVector2D::DotProduct(CurrentXY<sp/>-<sp/>P0,<sp/>AB)<sp/>/<sp/>ABLengthSq;</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>=<sp/>FMath::Clamp(t,<sp/>0.0f,<sp/>1.0f);</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="466"><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/>UE_LOG(LogTemp,<sp/>Verbose,<sp/>TEXT(</highlight><highlight class="stringliteral">&quot;CalculateFractionAlongSegment:<sp/>TargetIndex=%d,<sp/>P0=%s,<sp/>P1=%s,<sp/>t=%f&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TargetIndex,<sp/>*P0.ToString(),<sp/>*P1.ToString(),<sp/>t);</highlight></codeline>
<codeline lineno="469"><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>t;</highlight></codeline>
<codeline lineno="471"><highlight class="normal">}</highlight></codeline>
<codeline lineno="472"><highlight class="normal"></highlight></codeline>
<codeline lineno="473" refid="class_a_temporal_character_1a61318c77c5821210f32ec1b0e625cd6d" refkind="member"><highlight class="normal">int32<sp/><ref refid="class_a_temporal_character_1a61318c77c5821210f32ec1b0e625cd6d" kindref="member">ATemporalCharacter::FindTargetFrameIndex</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>InPlaybackTime)</highlight></codeline>
<codeline lineno="474"><highlight class="normal">{</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Ensure<sp/>we<sp/>have<sp/>enough<sp/>data.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="class_a_temporal_character_1a1449c43797c7d07b6c2f5f9e3ffe2a5d" kindref="member">ReplayDataPtr</ref>.IsValid()<sp/>||<sp/><ref refid="class_a_temporal_character_1a1449c43797c7d07b6c2f5f9e3ffe2a5d" kindref="member">ReplayDataPtr</ref>-&gt;Num()<sp/>&lt;<sp/>2)</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>int32<sp/>FrameCount<sp/>=<sp/><ref refid="class_a_temporal_character_1a1449c43797c7d07b6c2f5f9e3ffe2a5d" kindref="member">ReplayDataPtr</ref>-&gt;Num();</highlight></codeline>
<codeline lineno="482"><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>playback<sp/>time<sp/>is<sp/>before<sp/>or<sp/>at<sp/>the<sp/>first<sp/>frame&apos;s<sp/>timestamp,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>return<sp/>the<sp/>second<sp/>frame&apos;s<sp/>index<sp/>(so<sp/>we<sp/>can<sp/>interpolate<sp/>using<sp/>index<sp/>0<sp/>and<sp/>1).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(InPlaybackTime<sp/>&lt;=<sp/>(*<ref refid="class_a_temporal_character_1a1449c43797c7d07b6c2f5f9e3ffe2a5d" kindref="member">ReplayDataPtr</ref>)[0].TimeStamp)</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="489"><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Loop<sp/>through<sp/>frames<sp/>to<sp/>find<sp/>the<sp/>first<sp/>frame<sp/>with<sp/>a<sp/>timestamp<sp/>greater<sp/>than<sp/>PlaybackTime.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(int32<sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>FrameCount;<sp/>++i)</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(InPlaybackTime<sp/>&lt;<sp/>(*<ref refid="class_a_temporal_character_1a1449c43797c7d07b6c2f5f9e3ffe2a5d" kindref="member">ReplayDataPtr</ref>)[i].TimeStamp)</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="498"><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>InPlaybackTime<sp/>exceeds<sp/>all<sp/>frame<sp/>timestamps,<sp/>return<sp/>the<sp/>last<sp/>valid<sp/>index.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FrameCount<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="501"><highlight class="normal">}</highlight></codeline>
<codeline lineno="502"><highlight class="normal"></highlight></codeline>
<codeline lineno="503" refid="class_a_temporal_character_1afc2a969d0bfae6ded5f58af00cdec4db" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_a_temporal_character_1afc2a969d0bfae6ded5f58af00cdec4db" kindref="member">ATemporalCharacter::ProcessJumpEvent</ref>()</highlight></codeline>
<codeline lineno="504"><highlight class="normal">{</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Default<sp/>C++<sp/>behavior<sp/>for<sp/>jump<sp/>event<sp/>(can<sp/>be<sp/>overridden<sp/>in<sp/>Blueprint)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/>UE_LOG(LogTemp,<sp/>Warning,<sp/>TEXT(</highlight><highlight class="stringliteral">&quot;%s<sp/>-<sp/>Processing<sp/>Jump<sp/>Event&quot;</highlight><highlight class="normal">),<sp/>*GetName());</highlight></codeline>
<codeline lineno="507"><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(GetCharacterMovement()-&gt;IsMovingOnGround())</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Jump();</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>e.g.,<sp/>Play<sp/>jump<sp/>animation<sp/>or<sp/>trigger<sp/>a<sp/>jump<sp/>sound</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="513"><highlight class="normal">}</highlight></codeline>
<codeline lineno="514"><highlight class="normal"></highlight></codeline>
<codeline lineno="515" refid="class_a_temporal_character_1af171fc77f851673403d59d286197f5fd" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_a_temporal_character_1af171fc77f851673403d59d286197f5fd" kindref="member">ATemporalCharacter::ProcessShootEvent</ref>()</highlight></codeline>
<codeline lineno="516"><highlight class="normal">{</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//UE_LOG(LogTemp,<sp/>Warning,<sp/>TEXT(&quot;%s<sp/>-<sp/>Processing<sp/>Shoot<sp/>Event&quot;),<sp/>*GetName());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="518"><highlight class="normal"></highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="class_a_temporal_character_1a1449c43797c7d07b6c2f5f9e3ffe2a5d" kindref="member">ReplayDataPtr</ref>.IsValid()<sp/>||<sp/>!<ref refid="class_a_temporal_character_1a1449c43797c7d07b6c2f5f9e3ffe2a5d" kindref="member">ReplayDataPtr</ref>-&gt;IsValidIndex(<ref refid="class_a_temporal_character_1a6f9ccb885c218189efedb6d30b9eb0fe" kindref="member">CurrentFrameIndex</ref>))</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="521"><highlight class="normal"></highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_f_player_frame_data" kindref="compound">FPlayerFrameData</ref>&amp;<sp/>Frame<sp/>=<sp/>(*ReplayDataPtr)[<ref refid="class_a_temporal_character_1a6f9ccb885c218189efedb6d30b9eb0fe" kindref="member">CurrentFrameIndex</ref>];</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_f_combat_frame_data" kindref="compound">FCombatFrameData</ref>&amp;<sp/>CombatData<sp/>=<sp/>Frame.<ref refid="struct_f_player_frame_data_1a3fa9bf4a003e8a3e02897ea1884c47ea" kindref="member">CombatData</ref>;</highlight></codeline>
<codeline lineno="524"><highlight class="normal"></highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TArray&lt;FRecordedShot&gt;&amp;<sp/>Shots<sp/>=<sp/>CombatData.<ref refid="struct_f_combat_frame_data_1a003398095dc5c56fcdb970f13a6a86a6" kindref="member">Shots</ref>;</highlight></codeline>
<codeline lineno="526"><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(int32<sp/>i<sp/>=<sp/><ref refid="class_a_temporal_character_1abf6c7c6aca0ecd935f7a91aabf4b9b57" kindref="member">LastProcessedShotIndex</ref><sp/>+<sp/>1;<sp/>i<sp/>&lt;<sp/>Shots.Num();<sp/>++i)</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_f_recorded_shot" kindref="compound">FRecordedShot</ref>&amp;<sp/>Shot<sp/>=<sp/>Shots[i];</highlight></codeline>
<codeline lineno="530"><highlight class="normal"></highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_u_weapon_data_asset" kindref="compound">UWeaponDataAsset</ref>*<sp/>UsedWeapon<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FSoftObjectPath<sp/>Path<sp/>=<sp/>Shot.<ref refid="struct_f_recorded_shot_1a10c570c36ca0c84b3fe30910b7f6f13c" kindref="member">WeaponUsed</ref>.ToSoftObjectPath();</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_a_temporal_character_1ab4d3ee10af91b626d223f704316948d1" kindref="member">CachedWeapons</ref>.Contains(Path))</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UsedWeapon<sp/>=<sp/><ref refid="class_a_temporal_character_1ab4d3ee10af91b626d223f704316948d1" kindref="member">CachedWeapons</ref>[Path];</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>unexpected<sp/>–<sp/>asset<sp/>wasn’t<sp/>in<sp/>cache;<sp/>load<sp/>on<sp/>the<sp/>fly<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UsedWeapon<sp/>=<sp/>Shot.<ref refid="struct_f_recorded_shot_1a10c570c36ca0c84b3fe30910b7f6f13c" kindref="member">WeaponUsed</ref>.LoadSynchronous();</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(UsedWeapon)<sp/><ref refid="class_a_temporal_character_1ab4d3ee10af91b626d223f704316948d1" kindref="member">CachedWeapons</ref>.Add(Path,<sp/>UsedWeapon);</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UE_LOG(LogTemp,<sp/>Warning,<sp/>TEXT(</highlight><highlight class="stringliteral">&quot;%s<sp/>–<sp/>late-loaded<sp/>weapon<sp/>%s&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*GetName(),<sp/>*Path.ToString());</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="547"><highlight class="normal"></highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!UsedWeapon)</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UE_LOG(LogTemp,<sp/>Warning,<sp/>TEXT(</highlight><highlight class="stringliteral">&quot;Ghost<sp/>%s<sp/>–<sp/>Failed<sp/>to<sp/>load<sp/>WeaponUsed<sp/>asset!&quot;</highlight><highlight class="normal">),<sp/>*GetName());</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="553"><highlight class="normal"></highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!UsedWeapon)</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UE_LOG(LogTemp,<sp/>Warning,<sp/>TEXT(</highlight><highlight class="stringliteral">&quot;Ghost<sp/>%s<sp/>-<sp/>Failed<sp/>to<sp/>load<sp/>WeaponUsed<sp/>asset!&quot;</highlight><highlight class="normal">),<sp/>*GetName());</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="559"><highlight class="normal"></highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Viewpoint</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FVector<sp/>Start;</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FRotator<sp/>ViewRot;</highlight></codeline>
<codeline lineno="563"><highlight class="normal"></highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(AController*<sp/>PC<sp/>=<sp/>GetController())</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PC-&gt;GetPlayerViewPoint(Start,<sp/>ViewRot);</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Start<sp/>=<sp/>GetActorLocation()<sp/>+<sp/>FVector(0.f,<sp/>0.f,<sp/>BaseEyeHeight);</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ViewRot<sp/>=<sp/>GetActorRotation();</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="573"><highlight class="normal"></highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Plausibility<sp/>checks</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>PositionError<sp/>=<sp/>FVector::Dist(Start,<sp/>Shot.<ref refid="struct_f_recorded_shot_1ad3f3302ee527fee92c5e238a64095d1c" kindref="member">ViewLocation</ref>);</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>MaxAllowedError<sp/>=<sp/>100.0f;</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>bPositionCloseEnough<sp/>=<sp/>PositionError<sp/>&lt;=<sp/>MaxAllowedError;</highlight></codeline>
<codeline lineno="578"><highlight class="normal"></highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FHitResult<sp/>LOSCheck;</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FCollisionQueryParams<sp/>LOSParams;</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOSParams.AddIgnoredActor(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="582"><highlight class="normal"></highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>bHasLOSRaw<sp/>=<sp/>GetWorld()-&gt;LineTraceSingleByChannel(</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOSCheck,</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Start,</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Shot.<ref refid="struct_f_recorded_shot_1ac0daef34f3c2a5b30458387d3665794f" kindref="member">ImpactLocation</ref>,</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ECC_Visibility,</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOSParams</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="590"><highlight class="normal"></highlight></codeline>
<codeline lineno="591"><highlight class="normal"></highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>we<sp/>originally<sp/>recorded<sp/>a<sp/>MISS,<sp/>but<sp/>now<sp/>our<sp/>LOS<sp/>trace<sp/>hits<sp/>a<sp/>pawn,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>treat<sp/>that<sp/>as<sp/>“no<sp/>obstruction”<sp/>(so<sp/>bHasLOSRaw==false).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bHasLOSRaw<sp/>&amp;&amp;<sp/>!Shot.<ref refid="struct_f_recorded_shot_1a4e41c04830f61746bc63ce81a04b0739" kindref="member">HitActor</ref>.IsValid()<sp/>&amp;&amp;<sp/>LOSCheck.GetActor())</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>hit<sp/>a<sp/>dynamic<sp/>actor<sp/>now,<sp/>but<sp/>the<sp/>player<sp/>originally<sp/>shot<sp/>past<sp/>it<sp/>-&gt;<sp/>allow<sp/>the<sp/>ghost<sp/>to<sp/>hit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bHasLOSRaw<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="599"><highlight class="normal"></highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>bImpactMatches<sp/>=<sp/>bHasLOSRaw<sp/>?<sp/>LOSCheck.ImpactPoint.Equals(Shot.<ref refid="struct_f_recorded_shot_1ac0daef34f3c2a5b30458387d3665794f" kindref="member">ImpactLocation</ref>,<sp/>3.0f)<sp/>:<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>bHasLineOfSight<sp/>=</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(!bHasLOSRaw)<sp/>||<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>clear<sp/>path</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(Shot.<ref refid="struct_f_recorded_shot_1a4e41c04830f61746bc63ce81a04b0739" kindref="member">HitActor</ref>.IsValid()<sp/>&amp;&amp;<sp/>LOSCheck.GetActor()<sp/>==<sp/>Shot.<ref refid="struct_f_recorded_shot_1a4e41c04830f61746bc63ce81a04b0739" kindref="member">HitActor</ref>.Get());</highlight></codeline>
<codeline lineno="604"><highlight class="normal"></highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Detailed<sp/>logging<sp/>for<sp/>failure<sp/>analysis</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!bPositionCloseEnough<sp/>||<sp/>!bHasLineOfSight)</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UE_LOG(LogTemp,<sp/>Warning,<sp/>TEXT(</highlight><highlight class="stringliteral">&quot;Ghost<sp/>%s<sp/>-<sp/>Shot<sp/>%d<sp/>failed<sp/>plausibility<sp/>checks:&quot;</highlight><highlight class="normal">),<sp/>*GetName(),<sp/>Shot.<ref refid="struct_f_recorded_shot_1a78ac3a58ce0bd04bb0397259ae857eba" kindref="member">ShotIndex</ref>);</highlight></codeline>
<codeline lineno="609"><highlight class="normal"></highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UE_LOG(LogTemp,<sp/>Log,<sp/>TEXT(</highlight><highlight class="stringliteral">&quot;Shot<sp/>%d<sp/>|<sp/>bHit:<sp/>%s<sp/>|<sp/>ImpactLocation:<sp/>%s<sp/>|<sp/>Trace<sp/>Impact:<sp/>%s&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Shot.<ref refid="struct_f_recorded_shot_1a78ac3a58ce0bd04bb0397259ae857eba" kindref="member">ShotIndex</ref>,</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Shot.<ref refid="struct_f_recorded_shot_1a443385bba9e9512a1a0a00a02407587f" kindref="member">bHit</ref><sp/>?<sp/>TEXT(</highlight><highlight class="stringliteral">&quot;TRUE&quot;</highlight><highlight class="normal">)<sp/>:<sp/>TEXT(</highlight><highlight class="stringliteral">&quot;FALSE&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*Shot.<ref refid="struct_f_recorded_shot_1ac0daef34f3c2a5b30458387d3665794f" kindref="member">ImpactLocation</ref>.ToString(),</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*LOSCheck.ImpactPoint.ToString());</highlight></codeline>
<codeline lineno="615"><highlight class="normal"></highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!bPositionCloseEnough)</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UE_LOG(LogTemp,<sp/>Warning,<sp/>TEXT(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>Position<sp/>error<sp/>too<sp/>large:<sp/>%.2f<sp/>&gt;<sp/>%.2f&quot;</highlight><highlight class="normal">),<sp/>PositionError,<sp/>MaxAllowedError);</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UE_LOG(LogTemp,<sp/>Warning,<sp/>TEXT(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>GhostView:<sp/>%s<sp/>|<sp/>RecordedView:<sp/>%s&quot;</highlight><highlight class="normal">),<sp/>*Start.ToString(),<sp/>*Shot.<ref refid="struct_f_recorded_shot_1ad3f3302ee527fee92c5e238a64095d1c" kindref="member">ViewLocation</ref>.ToString());</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="621"><highlight class="normal"></highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!bHasLOSRaw)</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UE_LOG(LogTemp,<sp/>Warning,<sp/>TEXT(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>No<sp/>line<sp/>of<sp/>sight<sp/>from<sp/>ghost<sp/>to<sp/>impact<sp/>location.&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!bImpactMatches)</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UE_LOG(LogTemp,<sp/>Warning,<sp/>TEXT(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>LOS<sp/>ImpactPoint<sp/>mismatch:<sp/>expected<sp/>%s,<sp/>got<sp/>%s&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*Shot.<ref refid="struct_f_recorded_shot_1ac0daef34f3c2a5b30458387d3665794f" kindref="member">ImpactLocation</ref>.ToString(),</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*LOSCheck.ImpactPoint.ToString());</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="632"><highlight class="normal"></highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Shot.<ref refid="struct_f_recorded_shot_1a4e41c04830f61746bc63ce81a04b0739" kindref="member">HitActor</ref>.IsValid())</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UE_LOG(LogTemp,<sp/>Warning,<sp/>TEXT(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>Recorded<sp/>hit<sp/>actor:<sp/>%s&quot;</highlight><highlight class="normal">),<sp/>*GetNameSafe(Shot.<ref refid="struct_f_recorded_shot_1a4e41c04830f61746bc63ce81a04b0739" kindref="member">HitActor</ref>.Get()));</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UE_LOG(LogTemp,<sp/>Warning,<sp/>TEXT(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>LOS<sp/>hit<sp/>actor:<sp/>%s&quot;</highlight><highlight class="normal">),<sp/>*GetNameSafe(LOSCheck.GetActor()));</highlight></codeline>
<codeline lineno="637"><highlight class="normal"></highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Shot.<ref refid="struct_f_recorded_shot_1a4e41c04830f61746bc63ce81a04b0739" kindref="member">HitActor</ref>.Get()<sp/>!=<sp/>LOSCheck.GetActor())</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UE_LOG(LogTemp,<sp/>Warning,<sp/>TEXT(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>Recorded<sp/>hit<sp/>actor<sp/>does<sp/>not<sp/>match<sp/>LOS<sp/>hit<sp/>actor.&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="643"><highlight class="normal"></highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bHasLineOfSight)</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UE_LOG(LogTemp,<sp/>Warning,<sp/>TEXT(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>Line<sp/>of<sp/>sight<sp/>to<sp/>target<sp/>actor<sp/>%s.&quot;</highlight><highlight class="normal">),<sp/>*GetNameSafe(Shot.<ref refid="struct_f_recorded_shot_1a4e41c04830f61746bc63ce81a04b0739" kindref="member">HitActor</ref>.Get()));</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UE_LOG(LogTemp,<sp/>Warning,<sp/>TEXT(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>No<sp/>line<sp/>of<sp/>sight<sp/>to<sp/>target<sp/>actor<sp/>%s.&quot;</highlight><highlight class="normal">),<sp/>*GetNameSafe(Shot.<ref refid="struct_f_recorded_shot_1a4e41c04830f61746bc63ce81a04b0739" kindref="member">HitActor</ref>.Get()));</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="652"><highlight class="normal"></highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Visual<sp/>feedback</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DrawDebugLine(GetWorld(),<sp/>Start,<sp/>Shot.<ref refid="struct_f_recorded_shot_1ac0daef34f3c2a5b30458387d3665794f" kindref="member">ImpactLocation</ref>,<sp/>FColor::Red,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>1.0f,<sp/>0,<sp/>2.0f);</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="657"><highlight class="normal"></highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Shot<sp/>logic</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FVector<sp/>ShotDirection<sp/>=<sp/>Shot.<ref refid="struct_f_recorded_shot_1a7556405c16fb2ade376a7943c11f8b67" kindref="member">ShotDirection</ref>.Vector();</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FVector<sp/>End<sp/>=<sp/>Shot.<ref refid="struct_f_recorded_shot_1ac0daef34f3c2a5b30458387d3665794f" kindref="member">ImpactLocation</ref><sp/>+<sp/>ShotDirection<sp/>*<sp/>1.0f;</highlight></codeline>
<codeline lineno="661"><highlight class="normal"></highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FHitResult<sp/>Hit;</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FCollisionQueryParams<sp/>Params;</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Params.AddIgnoredActor(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="665"><highlight class="normal"></highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>bHit<sp/>=<sp/>GetWorld()-&gt;LineTraceSingleByChannel(Hit,<sp/>Start,<sp/>End,<sp/>ECC_Visibility,<sp/>Params);</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FVector<sp/>ActualEnd<sp/>=<sp/>bHit<sp/>?<sp/>Hit.ImpactPoint<sp/>:<sp/>Shot.<ref refid="struct_f_recorded_shot_1ac0daef34f3c2a5b30458387d3665794f" kindref="member">ImpactLocation</ref>;</highlight></codeline>
<codeline lineno="668"><highlight class="normal"></highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>bSimulatedHit<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>bHitIntendedTarget<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="671"><highlight class="normal"></highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>we<sp/>hit<sp/>the<sp/>intended<sp/>target</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bHit<sp/>&amp;&amp;<sp/>Shot.<ref refid="struct_f_recorded_shot_1a4e41c04830f61746bc63ce81a04b0739" kindref="member">HitActor</ref>.IsValid())</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bHitIntendedTarget<sp/>=<sp/>Hit.GetActor()<sp/>==<sp/>Shot.<ref refid="struct_f_recorded_shot_1a4e41c04830f61746bc63ce81a04b0739" kindref="member">HitActor</ref>.Get();</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="677"><highlight class="normal"></highlight></codeline>
<codeline lineno="678"><highlight class="normal"></highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="680"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Log<sp/>plausibility<sp/>checks</highlight></codeline>
<codeline lineno="681"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UE_LOG(LogTemp,<sp/>Log,<sp/>TEXT(&quot;[%s]<sp/>Shot<sp/>%d<sp/>|<sp/>PosError:<sp/>%.2f<sp/>|<sp/>LOS:<sp/>%s<sp/>|<sp/>RecordedHit:<sp/>%s<sp/>|<sp/>ActorValid:<sp/>%s&quot;),</highlight></codeline>
<codeline lineno="682"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*GetName(),</highlight></codeline>
<codeline lineno="683"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Shot.ShotIndex,</highlight></codeline>
<codeline lineno="684"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FVector::Dist(Start,<sp/>Shot.ViewLocation),</highlight></codeline>
<codeline lineno="685"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bHasLineOfSight<sp/>?<sp/>TEXT(&quot;YES&quot;)<sp/>:<sp/>TEXT(&quot;NO&quot;),</highlight></codeline>
<codeline lineno="686"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Shot.bHit<sp/>?<sp/>TEXT(&quot;YES&quot;)<sp/>:<sp/>TEXT(&quot;NO&quot;),</highlight></codeline>
<codeline lineno="687"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Shot.HitActor.IsValid()<sp/>?<sp/>TEXT(&quot;YES&quot;)<sp/>:<sp/>TEXT(&quot;NO&quot;));</highlight></codeline>
<codeline lineno="688"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="689"><highlight class="normal"></highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Force<sp/>hit<sp/>if<sp/>it<sp/>passed<sp/>our<sp/>plausibility<sp/>checks<sp/>but<sp/>the<sp/>trace<sp/>missed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((!bHit<sp/>||<sp/>!bHitIntendedTarget)<sp/>&amp;&amp;<sp/>bPositionCloseEnough<sp/>&amp;&amp;<sp/>bHasLineOfSight<sp/>&amp;&amp;<sp/>(Shot.<ref refid="struct_f_recorded_shot_1a443385bba9e9512a1a0a00a02407587f" kindref="member">bHit</ref><sp/>||<sp/>(!Shot.<ref refid="struct_f_recorded_shot_1a443385bba9e9512a1a0a00a02407587f" kindref="member">bHit</ref><sp/>&amp;&amp;<sp/>!Shot.<ref refid="struct_f_recorded_shot_1a4e41c04830f61746bc63ce81a04b0739" kindref="member">HitActor</ref>.IsValid())))</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bHit<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bSimulatedHit<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="695"><highlight class="normal"></highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Use<sp/>whatever<sp/>actor<sp/>the<sp/>LOS<sp/>trace<sp/>found<sp/>(or<sp/>the<sp/>recorded<sp/>one,<sp/>if<sp/>any)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AActor*<sp/>actorToHit<sp/>=<sp/>Shot.<ref refid="struct_f_recorded_shot_1a4e41c04830f61746bc63ce81a04b0739" kindref="member">HitActor</ref>.IsValid()</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>Shot.<ref refid="struct_f_recorded_shot_1a4e41c04830f61746bc63ce81a04b0739" kindref="member">HitActor</ref>.Get()</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>LOSCheck.GetActor();</highlight></codeline>
<codeline lineno="700"><highlight class="normal"></highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Hit.ImpactPoint<sp/>=<sp/>Shot.<ref refid="struct_f_recorded_shot_1ac0daef34f3c2a5b30458387d3665794f" kindref="member">ImpactLocation</ref>;</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Hit.TraceStart<sp/>=<sp/>Start;</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Hit.TraceEnd<sp/>=<sp/>Shot.<ref refid="struct_f_recorded_shot_1ac0daef34f3c2a5b30458387d3665794f" kindref="member">ImpactLocation</ref>;</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Hit.bBlockingHit<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="705"><highlight class="normal"></highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Correctly<sp/>simulate<sp/>the<sp/>actor<sp/>hit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Hit.HitObjectHandle<sp/>=<sp/>FActorInstanceHandle(actorToHit);</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Hit.BoneName<sp/>=<sp/>Shot.<ref refid="struct_f_recorded_shot_1ae107a5dae5978675afeb3478975f898d" kindref="member">HitBoneName</ref>;</highlight></codeline>
<codeline lineno="709"><highlight class="normal"></highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ActualEnd<sp/>=<sp/>Shot.<ref refid="struct_f_recorded_shot_1ac0daef34f3c2a5b30458387d3665794f" kindref="member">ImpactLocation</ref>;</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="712"><highlight class="normal"></highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FColor<sp/>LineColor<sp/>=<sp/>bHit<sp/>?<sp/>(bSimulatedHit<sp/>?<sp/>FColor::Cyan<sp/>:<sp/>FColor::Green)<sp/>:<sp/>FColor::Red;</highlight></codeline>
<codeline lineno="714"><highlight class="normal"></highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DrawDebugLine(GetWorld(),<sp/>Start,<sp/>ActualEnd,<sp/>LineColor,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>1.0f,<sp/>0,<sp/>2.0f);</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bHit)</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DrawDebugSphere(GetWorld(),<sp/>ActualEnd,<sp/>8.0f,<sp/>12,<sp/>FColor::Yellow,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>1.0f);</highlight></codeline>
<codeline lineno="719"><highlight class="normal"></highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="721"><highlight class="comment"></highlight></codeline>
<codeline lineno="722"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UE_LOG(LogTemp,<sp/>Log,<sp/>TEXT(&quot;[%s]<sp/>Shot<sp/>%d<sp/>HIT<sp/>(%s)<sp/>at<sp/>%s&quot;),</highlight></codeline>
<codeline lineno="723"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*GetName(),<sp/>Shot.ShotIndex,</highlight></codeline>
<codeline lineno="724"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bSimulatedHit<sp/>?<sp/>TEXT(&quot;SIMULATED&quot;)<sp/>:<sp/>TEXT(&quot;REAL&quot;),</highlight></codeline>
<codeline lineno="725"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*ActualEnd.ToString());</highlight></codeline>
<codeline lineno="726"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//UE_LOG(LogTemp,<sp/>Log,<sp/>TEXT(&quot;[%s]<sp/>Shot<sp/>%d<sp/>MISS&quot;),<sp/>*GetName(),<sp/>Shot.ShotIndex);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="733"><highlight class="normal"></highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bSimulatedHit)</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//UE_LOG(LogTemp,<sp/>Log,<sp/>TEXT(&quot;Simulated<sp/>hit<sp/>applied<sp/>at<sp/>%s<sp/>on<sp/>%s&quot;),<sp/>*Shot.ImpactLocation.ToString(),<sp/>*GetNameSafe(Shot.HitActor.Get()));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="738"><highlight class="normal"></highlight></codeline>
<codeline lineno="739"><highlight class="normal"></highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bHit<sp/>&amp;&amp;<sp/>Hit.GetActor()<sp/>&amp;&amp;<sp/>Hit.GetActor()-&gt;GetClass()-&gt;ImplementsInterface(UDamageableInterface::StaticClass()))</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_f_damage_info" kindref="compound">FDamageInfo</ref><sp/>DamageInfo;</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DamageInfo.DamageAmount<sp/>=<sp/>UsedWeapon-&gt;<ref refid="class_u_weapon_data_asset_1a38b2bafe40070d8ca22b70c32e890598" kindref="member">Damage</ref>;</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DamageInfo.Instigator<sp/>=<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DamageInfo.HitLocation<sp/>=<sp/>Hit.ImpactPoint;</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DamageInfo.ShotDirection<sp/>=<sp/>ShotDirection;</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DamageInfo.DamageType<sp/>=<sp/>UsedWeapon-&gt;<ref refid="class_u_weapon_data_asset_1af2ab9a2a8bc0e30d38d9102945980ad3" kindref="member">DamageType</ref>;</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DamageInfo.HitBoneName<sp/>=<sp/>Hit.BoneName;</highlight></codeline>
<codeline lineno="749"><highlight class="normal"></highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Hit.BoneName<sp/>==<sp/>FName(</highlight><highlight class="stringliteral">&quot;head&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DamageInfo.DamageTags.AddTag(FGameplayTag::RequestGameplayTag(FName(</highlight><highlight class="stringliteral">&quot;Damage.Critical&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="754"><highlight class="normal"></highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IDamageableInterface::Execute_TakeDamage(Hit.GetActor(),<sp/>DamageInfo);</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="757"><highlight class="normal"></highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_a_temporal_character_1abf6c7c6aca0ecd935f7a91aabf4b9b57" kindref="member">LastProcessedShotIndex</ref><sp/>=<sp/>i;<sp/></highlight><highlight class="comment">//<sp/>Mark<sp/>this<sp/>shot<sp/>as<sp/>done</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="760"><highlight class="normal">}</highlight></codeline>
<codeline lineno="761"><highlight class="normal"></highlight></codeline>
<codeline lineno="762" refid="class_a_temporal_character_1accf59b4a4abec73019a526a874076cbe" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_a_temporal_character_1accf59b4a4abec73019a526a874076cbe" kindref="member">ATemporalCharacter::ProcessInteractEvent</ref>()</highlight></codeline>
<codeline lineno="763"><highlight class="normal">{</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="class_a_temporal_character_1a1449c43797c7d07b6c2f5f9e3ffe2a5d" kindref="member">ReplayDataPtr</ref>.IsValid()<sp/>||<sp/>!<ref refid="class_a_temporal_character_1a1449c43797c7d07b6c2f5f9e3ffe2a5d" kindref="member">ReplayDataPtr</ref>-&gt;IsValidIndex(<ref refid="class_a_temporal_character_1a6f9ccb885c218189efedb6d30b9eb0fe" kindref="member">CurrentFrameIndex</ref>))</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UE_LOG(LogTemp,<sp/>Warning,<sp/>TEXT(</highlight><highlight class="stringliteral">&quot;%s<sp/>-<sp/>Cannot<sp/>process<sp/>interaction:<sp/>invalid<sp/>frame<sp/>index&quot;</highlight><highlight class="normal">),<sp/>*GetName());</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="769"><highlight class="normal"></highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_f_player_frame_data" kindref="compound">FPlayerFrameData</ref>&amp;<sp/>Frame<sp/>=<sp/>(*ReplayDataPtr)[<ref refid="class_a_temporal_character_1a6f9ccb885c218189efedb6d30b9eb0fe" kindref="member">CurrentFrameIndex</ref>];</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_f_interaction_data" kindref="compound">FInteractionData</ref>&amp;<sp/>InteractionData<sp/>=<sp/>Frame.<ref refid="struct_f_player_frame_data_1a99366cbe0b8fe264b6dd0b7b101075fc" kindref="member">InteractionData</ref>;</highlight></codeline>
<codeline lineno="772"><highlight class="normal"></highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!InteractionData.<ref refid="struct_f_interaction_data_1addc40f0abb89d7c03dd071b6a958f053" kindref="member">TargetActorPath</ref>.IsValid()<sp/>||<sp/>!InteractionData.<ref refid="struct_f_interaction_data_1addc40f0abb89d7c03dd071b6a958f053" kindref="member">TargetActorPath</ref>.ResolveObject())</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UE_LOG(LogTemp,<sp/>Warning,<sp/>TEXT(</highlight><highlight class="stringliteral">&quot;%s<sp/>-<sp/>InteractionData<sp/>is<sp/>empty<sp/>or<sp/>invalid<sp/>at<sp/>time<sp/>%.2f&quot;</highlight><highlight class="normal">),<sp/>*GetName(),<sp/>Frame.<ref refid="struct_f_player_frame_data_1aa7d6d6c4a99f0ff0dab19b2ddde1eaa9" kindref="member">TimeStamp</ref>);</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="778"><highlight class="normal"></highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/>AActor*<sp/>TargetActor<sp/>=<sp/>Cast&lt;AActor&gt;(InteractionData.<ref refid="struct_f_interaction_data_1addc40f0abb89d7c03dd071b6a958f053" kindref="member">TargetActorPath</ref>.ResolveObject());</highlight></codeline>
<codeline lineno="780"><highlight class="normal"></highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!TargetActor)</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UE_LOG(LogTemp,<sp/>Error,<sp/>TEXT(</highlight><highlight class="stringliteral">&quot;%s<sp/>-<sp/>Could<sp/>not<sp/>resolve<sp/>actor<sp/>from<sp/>path:<sp/>%s&quot;</highlight><highlight class="normal">),<sp/>*GetName(),<sp/>*InteractionData.<ref refid="struct_f_interaction_data_1addc40f0abb89d7c03dd071b6a958f053" kindref="member">TargetActorPath</ref>.ToString());</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="786"><highlight class="normal"></highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(TargetActor-&gt;GetClass()-&gt;ImplementsInterface(UBPI_Interactable::StaticClass()))</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UE_LOG(LogTemp,<sp/>Log,<sp/>TEXT(</highlight><highlight class="stringliteral">&quot;%s<sp/>-<sp/>Replaying<sp/>interaction<sp/>with:<sp/>%s&quot;</highlight><highlight class="normal">),<sp/>*GetName(),<sp/>*TargetActor-&gt;GetName());</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IBPI_Interactable::Execute_Interact(TargetActor,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UE_LOG(LogTemp,<sp/>Warning,<sp/>TEXT(</highlight><highlight class="stringliteral">&quot;%s<sp/>-<sp/>TargetActor<sp/>&apos;%s&apos;<sp/>does<sp/>not<sp/>implement<sp/>BPI_Interactable&quot;</highlight><highlight class="normal">),<sp/>*GetName(),<sp/>*TargetActor-&gt;GetName());</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="796"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="Source/TimeAssassin/TemporalCharacter.cpp"/>
  </compounddef>
</doxygen>
