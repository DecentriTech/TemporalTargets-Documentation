"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[5514],{1718:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>i,contentTitle:()=>t,default:()=>p,frontMatter:()=>o,metadata:()=>c,toc:()=>l});const c=JSON.parse('{"id":"API/Modular Components/ReplayRecorderComponent","title":"\ud83d\udcc4 File: ReplayRecorderComponent.h","description":"Declares the UReplayRecorderComponent for capturing per-frame player replay data.","source":"@site/docs/API/Modular Components/ReplayRecorderComponent.md","sourceDirName":"API/Modular Components","slug":"/API/_replay_recorder_component_8h","permalink":"/TemporalTargets-Documentation/docs/API/_replay_recorder_component_8h","draft":false,"unlisted":false,"editUrl":"https://github.com/DecentriTech/TemporalTargets-Documentation/tree/main/website/docs/API/Modular Components/ReplayRecorderComponent.md","tags":[],"version":"current","frontMatter":{"title":"\ud83d\udcc4 File: ReplayRecorderComponent.h","slug":"/API/_replay_recorder_component_8h"},"sidebar":"tutorialSidebar","previous":{"title":"\ud83d\udcc4 File: InteractionComponent.h","permalink":"/TemporalTargets-Documentation/docs/API/_interaction_component_8h"},"next":{"title":"\ud83d\udcc4 File: WeaponComponent.h","permalink":"/TemporalTargets-Documentation/docs/API/_weapon_component_8h"}}');var a=r(4848),s=r(8453);const o={title:"\ud83d\udcc4 File: ReplayRecorderComponent.h",slug:"/API/_replay_recorder_component_8h"},t="\ud83d\udcc4 File: ReplayRecorderComponent.h",i={},l=[];function d(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",header:"header",li:"li",p:"p",ul:"ul",...(0,s.R)(),...e.components},{Details:r,ExpandableCodeBlock:c}=n;return r||m("Details",!0),c||m("ExpandableCodeBlock",!0),(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsxs)(n.h1,{id:"-file-replayrecordercomponenth",children:["\ud83d\udcc4 File: ",(0,a.jsx)(n.code,{children:"ReplayRecorderComponent.h"})]})}),"\n",(0,a.jsxs)(n.blockquote,{children:["\n",(0,a.jsxs)(n.p,{children:["Declares the ",(0,a.jsx)(n.a,{href:"#class_u_replay_recorder_component",children:"UReplayRecorderComponent"})," for capturing per-frame player replay data."]}),"\n"]}),"\n",(0,a.jsxs)(r,{open:!0,children:[(0,a.jsxs)(n.p,{children:[(0,a.jsx)("summary",{children:"\ud83d\udcdd Detailed Description"}),"\r\nThis file defines the ",(0,a.jsx)(n.a,{href:"#class_u_replay_recorder_component",children:"UReplayRecorderComponent"})," class, which is responsible for:"]}),(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:"Capturing frame-by-frame player data at a specified interval."}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:"Logging interaction and combat events during gameplay."}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:"Exposing recorded replay data for later playback or analysis."}),"\n"]}),"\n"]}),(0,a.jsx)(n.p,{children:(0,a.jsx)(n.a,{href:"#group___modular___components",children:"Modular Components"})})]}),"\n",(0,a.jsxs)(r,{children:[(0,a.jsx)("summary",{children:(0,a.jsxs)(n.p,{children:["\ud83d\udcd8 Class ",(0,a.jsx)(n.code,{children:"UReplayRecorderComponent"}),"\r\n",(0,a.jsx)("span",{class:"brief-description-pill",children:"Component that captures and stores per-frame player state for replay."})]})}),(0,a.jsxs)(n.blockquote,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.a,{href:"#class_u_replay_recorder_component",children:"UReplayRecorderComponent"})," ticks every frame and, when active, collects a stream of ",(0,a.jsx)(n.a,{href:"#struct_f_player_frame_data",children:"FPlayerFrameData"})," at intervals defined by ",(0,a.jsx)(n.a,{href:"#class_u_replay_recorder_component_1a4841fd81b50d9458b6b2542404c676cd",children:"RecordingInterval"}),". It also records interaction events via ",(0,a.jsx)(n.a,{href:"#class_u_replay_recorder_component_1a4d009df22d2f236d5956cdc7931229aa",children:"CaptureInteractionData()"})," and shot events via ",(0,a.jsx)(n.a,{href:"#class_u_replay_recorder_component_1a95379bbc4b1adfd811455da125dffaf4",children:"CaptureShotData()"}),". All recorded frames are exposed through ",(0,a.jsx)(n.a,{href:"#class_u_replay_recorder_component_1a6a4a12bbaf2bcc3f32b46aa2e5136d19",children:"GetRecordedData()"}),"."]}),"\n"]}),(0,a.jsxs)(r,{open:!0,children:[(0,a.jsx)("summary",{children:"\ud83e\uddcd Members"}),(0,a.jsxs)(r,{open:!0,children:[(0,a.jsx)("summary",{children:"\u2699\ufe0f Functions"}),(0,a.jsxs)(r,{children:[(0,a.jsx)("summary",{children:(0,a.jsxs)(n.p,{children:["\ud83e\udde0 ",(0,a.jsx)("code",{children:"UReplayRecorderComponent"}),"\r\n",(0,a.jsx)("span",{class:"member-badge kind-function",children:"function"}),"\r\n",(0,a.jsx)("span",{class:"member-badge section-public-func",children:"Public"}),"\r\n",(0,a.jsx)("span",{class:"brief-description-pill",children:"Construct and set default component properties."})]})}),(0,a.jsxs)("p",{children:[(0,a.jsx)("strong",{children:"Parameters:"})," None"]}),(0,a.jsx)("hr",{}),(0,a.jsxs)("p",{children:[(0,a.jsx)("strong",{children:"\ud83d\udcc4 Source:"})," ",(0,a.jsx)("code",{children:"Source/TimeAssassin/ReplayRecorderComponent.cpp"})," (lines 8\u201315)"]}),(0,a.jsx)(c,{code:"UReplayRecorderComponent::UReplayRecorderComponent()\n{\nPrimaryComponentTick.bCanEverTick = true;\nbRecording = false;\nRecordingInterval = 0.033f; // Approximately 30 FPS\nRecordingAccumulator = 0.0f;\n  CurrentFrameActionFlags = EReplayActionFlags::None;\n}",language:"cpp",previewLines:15})]}),(0,a.jsxs)(r,{children:[(0,a.jsx)("summary",{children:(0,a.jsxs)(n.p,{children:["\ud83e\udde0 ",(0,a.jsx)("code",{children:"TickComponent"}),"\r\n",(0,a.jsx)("span",{class:"member-badge kind-function",children:"function"}),"\r\n",(0,a.jsx)("span",{class:"member-badge section-public-func",children:"Public"}),"\r\n",(0,a.jsx)("span",{class:"brief-description-pill",children:"Called each frame to advance recording logic."})]})}),(0,a.jsx)("p",{children:(0,a.jsx)("strong",{children:"Parameters:"})}),(0,a.jsxs)("ul",{children:[(0,a.jsxs)("li",{children:[(0,a.jsx)("code",{children:"float DeltaTime"})," \u2013 Time since last tick."]}),(0,a.jsxs)("li",{children:[(0,a.jsx)("code",{children:"ELevelTick TickType"})," \u2013 Type of tick this is."]}),(0,a.jsxs)("li",{children:[(0,a.jsx)("code",{children:"FActorComponentTickFunction * ThisTickFunction"})," \u2013 Internal tick function struct."]})]}),(0,a.jsx)("hr",{}),(0,a.jsxs)("p",{children:[(0,a.jsx)("strong",{children:"\ud83d\udcc4 Source:"})," ",(0,a.jsx)("code",{children:"Source/TimeAssassin/ReplayRecorderComponent.cpp"})," (lines 67\u2013132)"]}),(0,a.jsx)(c,{code:'void UReplayRecorderComponent::TickComponent(float DeltaTime, ELevelTick TickType, FActorComponentTickFunction* ThisTickFunction)\n{\n  Super::TickComponent(DeltaTime, TickType, ThisTickFunction);\n\n  // Debug Log to Check if Tick is Running\n  GEngine->AddOnScreenDebugMessage(9999, 1.0f, FColor::Red, TEXT("[ReplayRecorder] TickComponent is RUNNING"));\n\n  if (bRecording)\n  {\n      RecordingAccumulator += DeltaTime;\n\n      // Log accumulated time before the frame update\n      FString LogMessage = FString::Printf(TEXT("[ReplayRecorder] Accumulated Time: %.3f"), RecordingAccumulator);\n      GEngine->AddOnScreenDebugMessage((uint64)89, 0.05f, FColor::Cyan, LogMessage);\n\n      if (RecordingAccumulator >= RecordingInterval)\n      {\n          // Reset the accumulator\n          RecordingAccumulator = 0.0f;\n\n          // Capture current state from the owner (player character)\n          AActor* Owner = GetOwner();\n          if (Owner)\n          {\n              FPlayerFrameData Frame;\n              Frame.TimeStamp = Owner->GetWorld()->GetTimeSeconds();\n              Frame.Position = Owner->GetActorLocation();\n\t\t\tFrame.Velocity = Owner->GetVelocity();\n              Frame.Rotation = Owner->GetActorRotation();\n              Frame.ActionFlags = CurrentFrameActionFlags;\n\n              if (Frame.HasAction(EReplayActionFlags::Interacted))\n              {\n                  Frame.InteractionData = PendingInteractionData;\n              }\n\n              if (Frame.HasAction(EReplayActionFlags::FiredWeapon))\n              {\n                  Frame.CombatData = PendingCombatData;\n\n                  if (Frame.CombatData.Shots.Num()) UE_LOG(LogTemp, Log, TEXT("Frame copy impact = %s"), *Frame.CombatData.Shots.Last().ImpactLocation.ToString());\n              }\n\n              RecordedFrames.Add(Frame);\n\n              // Log the frame data\n              FString FrameLog = FString::Printf(\n                  TEXT("[ReplayRecorder] Frame: %d | TimeStamp: %.2f | Position: (%.2f, %.2f, %.2f) | Rotation: (%.2f, %.2f, %.2f) | Flags: %d"),\n                  RecordedFrames.Num(),\n                  Frame.TimeStamp,\n                  Frame.Position.X, Frame.Position.Y, Frame.Position.Z,\n                  Frame.Rotation.Pitch, Frame.Rotation.Yaw, Frame.Rotation.Roll,\n                  (uint8)Frame.ActionFlags\n              );\n\n              // Use a static message key to avoid spam\n              GEngine->AddOnScreenDebugMessage(123456, 2.0f, FColor::Green, FrameLog);\n          }\n          // Reset the accumulated flags after recording the frame.\n          CurrentFrameActionFlags = EReplayActionFlags::None;\n          PendingInteractionData = FInteractionData();\n\t\tPendingCombatData = FCombatFrameData();\n      }\n  }\n}',language:"cpp",previewLines:15})]}),(0,a.jsxs)(r,{children:[(0,a.jsx)("summary",{children:(0,a.jsxs)(n.p,{children:["\ud83e\udde0 ",(0,a.jsx)("code",{children:"StartRecording"}),"\r\n",(0,a.jsx)("span",{class:"member-badge kind-function",children:"function"}),"\r\n",(0,a.jsx)("span",{class:"member-badge section-public-func",children:"Public"}),"\r\n",(0,a.jsx)("span",{class:"brief-description-pill",children:"Begin a new recording session."})]})}),(0,a.jsxs)("p",{children:[(0,a.jsx)("strong",{children:"Parameters:"})," None"]}),(0,a.jsx)("hr",{}),(0,a.jsxs)("p",{children:[(0,a.jsx)("strong",{children:"\ud83d\udcc4 Source:"})," ",(0,a.jsx)("code",{children:"Source/TimeAssassin/ReplayRecorderComponent.cpp"})," (lines 18\u201324)"]}),(0,a.jsx)(c,{code:"void UReplayRecorderComponent::StartRecording()\n{\n  RecordedFrames.Empty();\n  bRecording = true;\n  RecordingAccumulator = 0.0f;\n  CurrentFrameActionFlags = EReplayActionFlags::None;\n}",language:"cpp",previewLines:15})]}),(0,a.jsxs)(r,{children:[(0,a.jsx)("summary",{children:(0,a.jsxs)(n.p,{children:["\ud83e\udde0 ",(0,a.jsx)("code",{children:"StopRecording"}),"\r\n",(0,a.jsx)("span",{class:"member-badge kind-function",children:"function"}),"\r\n",(0,a.jsx)("span",{class:"member-badge section-public-func",children:"Public"}),"\r\n",(0,a.jsx)("span",{class:"brief-description-pill",children:"End the current recording session."})]})}),(0,a.jsxs)("p",{children:[(0,a.jsx)("strong",{children:"Parameters:"})," None"]}),(0,a.jsx)("hr",{}),(0,a.jsxs)("p",{children:[(0,a.jsx)("strong",{children:"\ud83d\udcc4 Source:"})," ",(0,a.jsx)("code",{children:"Source/TimeAssassin/ReplayRecorderComponent.cpp"})," (lines 26\u201329)"]}),(0,a.jsx)(c,{code:"void UReplayRecorderComponent::StopRecording()\n{\n  bRecording = false;\n}",language:"cpp",previewLines:15})]}),(0,a.jsxs)(r,{children:[(0,a.jsx)("summary",{children:(0,a.jsxs)(n.p,{children:["\ud83e\udde0 ",(0,a.jsx)("code",{children:"AddActionFlag"}),"\r\n",(0,a.jsx)("span",{class:"member-badge kind-function",children:"function"}),"\r\n",(0,a.jsx)("span",{class:"member-badge section-public-func",children:"Public"}),"\r\n",(0,a.jsx)("span",{class:"brief-description-pill",children:"Add an action flag for this frame."})]})}),(0,a.jsx)("p",{children:(0,a.jsx)("strong",{children:"Parameters:"})}),(0,a.jsx)("ul",{children:(0,a.jsxs)("li",{children:[(0,a.jsx)("code",{children:" NewFlag"})," \u2013 The  to record."]})}),(0,a.jsx)("hr",{}),(0,a.jsxs)("p",{children:[(0,a.jsx)("strong",{children:"\ud83d\udcc4 Source:"})," ",(0,a.jsx)("code",{children:"Source/TimeAssassin/ReplayRecorderComponent.cpp"})," (lines 31\u201335)"]}),(0,a.jsx)(c,{code:"void UReplayRecorderComponent::AddActionFlag(EReplayActionFlags NewFlag)\n{\n  // Blueprint callable function to add an action flag.\n  CurrentFrameActionFlags = (EReplayActionFlags)((uint8)CurrentFrameActionFlags | (uint8)NewFlag);\n}",language:"cpp",previewLines:15})]}),(0,a.jsxs)(r,{children:[(0,a.jsx)("summary",{children:(0,a.jsxs)(n.p,{children:["\ud83e\udde0 ",(0,a.jsx)("code",{children:"CaptureInteractionData"}),"\r\n",(0,a.jsx)("span",{class:"member-badge kind-function",children:"function"}),"\r\n",(0,a.jsx)("span",{class:"member-badge section-public-func",children:"Public"}),"\r\n",(0,a.jsx)("span",{class:"brief-description-pill",children:"Capture interaction metadata when the player interacts with an actor."})]})}),(0,a.jsx)("p",{children:(0,a.jsx)("strong",{children:"Parameters:"})}),(0,a.jsx)("ul",{children:(0,a.jsxs)("li",{children:[(0,a.jsx)("code",{children:"AActor * InteractedActor"})," \u2013 The actor being interacted with."]})}),(0,a.jsx)("hr",{}),(0,a.jsxs)("p",{children:[(0,a.jsx)("strong",{children:"\ud83d\udcc4 Source:"})," ",(0,a.jsx)("code",{children:"Source/TimeAssassin/ReplayRecorderComponent.cpp"})," (lines 37\u201357)"]}),(0,a.jsx)(c,{code:'void UReplayRecorderComponent::CaptureInteractionData(AActor* InteractedActor)\n{\n  if (!InteractedActor || !bRecording) return;\n\nPendingInteractionData.TargetActorPath = FSoftObjectPath(InteractedActor);\n  PendingInteractionData.RelativeLocationToTarget = GetOwner()->GetActorLocation() - InteractedActor->GetActorLocation();\n\n  // Optional: set a tag/type here\n  if (InteractedActor->ActorHasTag("Pickup"))\n  {\n      PendingInteractionData.InteractionType = FName("Pickup");\n  }\n  else if (InteractedActor->ActorHasTag("Terminal"))\n  {\n      PendingInteractionData.InteractionType = FName("Terminal");\n  }\n  else\n  {\n      PendingInteractionData.InteractionType = FName("Generic");\n  }\n}',language:"cpp",previewLines:15})]}),(0,a.jsxs)(r,{children:[(0,a.jsx)("summary",{children:(0,a.jsxs)(n.p,{children:["\ud83e\udde0 ",(0,a.jsx)("code",{children:"CaptureShotData"}),"\r\n",(0,a.jsx)("span",{class:"member-badge kind-function",children:"function"}),"\r\n",(0,a.jsx)("span",{class:"member-badge section-public-func",children:"Public"}),"\r\n",(0,a.jsx)("span",{class:"brief-description-pill",children:"Append a recorded shot event to the pending combat data."})]})}),(0,a.jsx)("p",{children:(0,a.jsx)("strong",{children:"Parameters:"})}),(0,a.jsx)("ul",{children:(0,a.jsxs)("li",{children:[(0,a.jsx)("code",{children:"const  & ShotData"})," \u2013 The  details for this shot."]})}),(0,a.jsx)("hr",{}),(0,a.jsxs)("p",{children:[(0,a.jsx)("strong",{children:"\ud83d\udcc4 Source:"})," ",(0,a.jsx)("code",{children:"Source/TimeAssassin/ReplayRecorderComponent.cpp"})," (lines 59\u201365)"]}),(0,a.jsx)(c,{code:'void UReplayRecorderComponent::CaptureShotData(const FRecordedShot& ShotData)\n{\nif (!bRecording) return;\nPendingCombatData.Shots.Add(ShotData);\n\n  UE_LOG(LogTemp, Log, TEXT("PendingCombatData last shot = %s"), *PendingCombatData.Shots.Last().ImpactLocation.ToString());\n}',language:"cpp",previewLines:15})]}),(0,a.jsxs)(r,{children:[(0,a.jsx)("summary",{children:(0,a.jsxs)(n.p,{children:["\ud83e\udde0 ",(0,a.jsx)("code",{children:"GetRecordedData"}),"\r\n",(0,a.jsx)("span",{class:"member-badge kind-function",children:"function"}),"\r\n",(0,a.jsx)("span",{class:"member-badge section-public-func",children:"Public"}),"\r\n",(0,a.jsx)("span",{class:"brief-description-pill",children:"Access the array of recorded frames."})]})}),(0,a.jsxs)("p",{children:[(0,a.jsx)("strong",{children:"Parameters:"})," None"]}),(0,a.jsx)("hr",{}),(0,a.jsxs)("p",{children:[(0,a.jsx)("strong",{children:"\ud83d\udcc4 Source:"})," ",(0,a.jsx)("code",{children:"Source/TimeAssassin/ReplayRecorderComponent.h"})," (lines 116\u2013116)"]}),(0,a.jsx)(c,{code:"\tconst TArray<FPlayerFrameData>& GetRecordedData() const { return RecordedFrames; }",language:"cpp",previewLines:15})]})]}),(0,a.jsxs)(r,{open:!0,children:[(0,a.jsx)("summary",{children:"\ud83d\udce6 Variables"}),(0,a.jsxs)(r,{children:[(0,a.jsx)("summary",{children:(0,a.jsxs)(n.p,{children:["\ud83e\udde0 ",(0,a.jsx)("code",{children:"RecordedFrames"}),"\r\n",(0,a.jsx)("span",{class:"member-badge kind-variable",children:"variable"}),"\r\n",(0,a.jsx)("span",{class:"member-badge section-public-attrib",children:"Public"}),"\r\n",(0,a.jsxs)("span",{class:"brief-description-pill",children:["Storage of all frames captured since the last ",(0,a.jsx)(n.a,{href:"#class_u_replay_recorder_component_1a0ae8d215de8e486015cc161070c8e111",children:"StartRecording()"}),"."]})]})}),(0,a.jsxs)("p",{children:["Storage of all frames captured since the last ",(0,a.jsx)(n.a,{href:"#class_u_replay_recorder_component_1a0ae8d215de8e486015cc161070c8e111",children:"StartRecording()"}),"."]})]})]})]})]})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}function m(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},8453:(e,n,r)=>{r.d(n,{R:()=>o,x:()=>t});var c=r(6540);const a={},s=c.createContext(a);function o(e){const n=c.useContext(s);return c.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),c.createElement(s.Provider,{value:n},e.children)}}}]);