"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[1090],{8453:(e,n,r)=>{r.d(n,{R:()=>s,x:()=>o});var t=r(6540);const a={},i=t.createContext(a);function s(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),t.createElement(i.Provider,{value:n},e.children)}},8528:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>p,frontMatter:()=>s,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"API/Modular Components/WeaponComponent","title":"\ud83d\udcc4 File: WeaponComponent.h","description":"Declares the UWeaponComponent responsible for handling all weapon-related logic.","source":"@site/docs/API/Modular Components/WeaponComponent.md","sourceDirName":"API/Modular Components","slug":"/API/_weapon_component_8h","permalink":"/TemporalTargets-Documentation/docs/API/_weapon_component_8h","draft":false,"unlisted":false,"editUrl":"https://github.com/DecentriTech/TemporalTargets-Documentation/tree/main/website/docs/API/Modular Components/WeaponComponent.md","tags":[],"version":"current","frontMatter":{"title":"\ud83d\udcc4 File: WeaponComponent.h","slug":"/API/_weapon_component_8h"},"sidebar":"tutorialSidebar","previous":{"title":"\ud83d\udcc4 File: ReplayRecorderComponent.h","permalink":"/TemporalTargets-Documentation/docs/API/_replay_recorder_component_8h"},"next":{"title":"\ud83d\udcc4 File: WeaponInventoryComponent.h","permalink":"/TemporalTargets-Documentation/docs/API/_weapon_inventory_component_8h"}}');var a=r(4848),i=r(8453);const s={title:"\ud83d\udcc4 File: WeaponComponent.h",slug:"/API/_weapon_component_8h"},o="\ud83d\udcc4 File: WeaponComponent.h",c={},l=[];function d(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",header:"header",li:"li",p:"p",ul:"ul",...(0,i.R)(),...e.components},{Details:r,ExpandableCodeBlock:t}=n;return r||m("Details",!0),t||m("ExpandableCodeBlock",!0),(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsxs)(n.h1,{id:"-file-weaponcomponenth",children:["\ud83d\udcc4 File: ",(0,a.jsx)(n.code,{children:"WeaponComponent.h"})]})}),"\n",(0,a.jsxs)(n.blockquote,{children:["\n",(0,a.jsxs)(n.p,{children:["Declares the ",(0,a.jsx)(n.a,{href:"#class_u_weapon_component",children:"UWeaponComponent"})," responsible for handling all weapon-related logic."]}),"\n"]}),"\n",(0,a.jsxs)(r,{open:!0,children:[(0,a.jsxs)(n.p,{children:[(0,a.jsx)("summary",{children:"\ud83d\udcdd Detailed Description"}),"\r\nThis file defines the ",(0,a.jsx)(n.a,{href:"#class_u_weapon_component",children:"UWeaponComponent"})," class and the ",(0,a.jsx)(n.a,{href:"#struct_f_weapon_ammo_data",children:"FWeaponAmmoData"})," struct, which together manage:"]}),(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:"Firing, automatic and single-shot behavior."}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:"Recoil management and spread dynamics."}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:"Reloading logic and ammo tracking."}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:"HUD integration for crosshairs and hitmarkers."}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:"Dynamic weapon switching and data asset handling."}),"\n"]}),"\n"]}),(0,a.jsx)(n.p,{children:(0,a.jsx)(n.a,{href:"#group___modular___components",children:"Modular Components"})})]}),"\n",(0,a.jsxs)(r,{children:[(0,a.jsx)("summary",{children:(0,a.jsxs)(n.p,{children:["\ud83d\udcd8 Class ",(0,a.jsx)(n.code,{children:"FWeaponAmmoData"}),"\r\n",(0,a.jsx)("span",{class:"brief-description-pill",children:"Tracks the ammo counts in the weapon's clip and its reserve."})]})}),(0,a.jsxs)(r,{open:!0,children:[(0,a.jsx)("summary",{children:"\ud83e\uddcd Members"}),(0,a.jsx)(r,{open:!0,children:(0,a.jsx)("summary",{children:"\u2699\ufe0f Functions"})}),(0,a.jsxs)(r,{open:!0,children:[(0,a.jsx)("summary",{children:"\ud83d\udce6 Variables"}),(0,a.jsxs)(r,{children:[(0,a.jsx)("summary",{children:(0,a.jsxs)(n.p,{children:["\ud83e\udde0 ",(0,a.jsx)("code",{children:"CurrentAmmo"}),"\r\n",(0,a.jsx)("span",{class:"member-badge kind-variable",children:"variable"}),"\r\n",(0,a.jsx)("span",{class:"member-badge section-public-attrib",children:"Public"}),"\r\n",(0,a.jsx)("span",{class:"brief-description-pill",children:"Current number of rounds in the clip."})]})}),(0,a.jsx)("p",{children:"Current number of rounds in the clip."})]}),(0,a.jsxs)(r,{children:[(0,a.jsx)("summary",{children:(0,a.jsxs)(n.p,{children:["\ud83e\udde0 ",(0,a.jsx)("code",{children:"ReserveAmmo"}),"\r\n",(0,a.jsx)("span",{class:"member-badge kind-variable",children:"variable"}),"\r\n",(0,a.jsx)("span",{class:"member-badge section-public-attrib",children:"Public"}),"\r\n",(0,a.jsx)("span",{class:"brief-description-pill",children:"Number of rounds available in reserve."})]})}),(0,a.jsx)("p",{children:"Number of rounds available in reserve."})]})]})]})]}),"\n",(0,a.jsxs)(r,{children:[(0,a.jsx)("summary",{children:(0,a.jsxs)(n.p,{children:["\ud83d\udcd8 Class ",(0,a.jsx)(n.code,{children:"UWeaponComponent"}),"\r\n",(0,a.jsx)("span",{class:"brief-description-pill",children:"Component responsible for all weapon behavior: firing, reloading, recoil, and UI updates."})]})}),(0,a.jsxs)(n.blockquote,{children:["\n",(0,a.jsx)(n.p,{children:"This component exposes:"}),"\n"]}),(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.a,{href:"#class_u_weapon_component_1aa9f322fa843b509d339ae30970396dd3",children:"FireWeapon()"})," for triggering shots (supports sub-shots via the ",(0,a.jsx)(n.code,{children:"SubShotIndex"})," parameter)."]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.a,{href:"#class_u_weapon_component_1a0cc8cc9981a534155199674703d6a44a",children:"ReloadWeapon()"})," and ",(0,a.jsx)(n.a,{href:"#class_u_weapon_component_1a8fc78ff182ea627b1f08c68642cb85b1",children:"FinishReloading()"})," for handling ammo refill."]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.a,{href:"#class_u_weapon_component_1a7441dc2b5b6429fcf4e28440c926f98a",children:"UpdateCrosshairSpread()"})," for driving the HUD crosshair based on movement and weapon state."]}),"\n"]}),"\n"]}),(0,a.jsxs)(r,{open:!0,children:[(0,a.jsx)("summary",{children:"\ud83e\uddcd Members"}),(0,a.jsxs)(r,{open:!0,children:[(0,a.jsx)("summary",{children:"\u2699\ufe0f Functions"}),(0,a.jsxs)(r,{children:[(0,a.jsx)("summary",{children:(0,a.jsxs)(n.p,{children:["\ud83e\udde0 ",(0,a.jsx)("code",{children:"UWeaponComponent"}),"\r\n",(0,a.jsx)("span",{class:"member-badge kind-function",children:"function"}),"\r\n",(0,a.jsx)("span",{class:"member-badge section-public-func",children:"Public"}),"\r\n",(0,a.jsx)("span",{class:"brief-description-pill",children:"Constructor that sets default values for this component's properties."})]})}),(0,a.jsxs)("p",{children:[(0,a.jsx)("strong",{children:"Parameters:"})," None"]}),(0,a.jsx)("hr",{}),(0,a.jsxs)("p",{children:[(0,a.jsx)("strong",{children:"\ud83d\udcc4 Source:"})," ",(0,a.jsx)("code",{children:"Source/TimeAssassin/WeaponComponent.cpp"})," (lines 23\u201333)"]}),(0,a.jsx)(t,{code:"UWeaponComponent::UWeaponComponent()\n{\n// Set this component to be initialized when the game starts, and to be ticked every frame.  You can turn these features\n// off to improve performance if you don't need them.\n// \n// Turn *off* ticking until someone sets a valid widget\nPrimaryComponentTick.bCanEverTick = true;\n\nPrimaryComponentTick.bStartWithTickEnabled = true;\n// ...\n}",language:"cpp",previewLines:15})]}),(0,a.jsxs)(r,{children:[(0,a.jsx)("summary",{children:(0,a.jsxs)(n.p,{children:["\ud83e\udde0 ",(0,a.jsx)("code",{children:"FireWeapon"}),"\r\n",(0,a.jsx)("span",{class:"member-badge kind-function",children:"function"}),"\r\n",(0,a.jsx)("span",{class:"member-badge section-public-func",children:"Public"}),"\r\n",(0,a.jsx)("span",{class:"brief-description-pill",children:"Fire a single shot or sub-shot."})]})}),(0,a.jsx)("p",{children:(0,a.jsx)("strong",{children:"Parameters:"})}),(0,a.jsxs)("ul",{children:[(0,a.jsxs)("li",{children:[(0,a.jsx)("code",{children:"int32 SubShotIndex"})," \u2013 Index to support multi-projectile weapons (e.g. shotgun pellets)."]}),(0,a.jsxs)("li",{children:[(0,a.jsx)("code",{children:"float SimulatedTime"})," \u2013 Used for replicated fire timing; defaults to local time."]})]}),(0,a.jsx)("hr",{}),(0,a.jsxs)("p",{children:[(0,a.jsx)("strong",{children:"\ud83d\udcc4 Source:"})," ",(0,a.jsx)("code",{children:"Source/TimeAssassin/WeaponComponent.cpp"})," (lines 345\u2013588)"]}),(0,a.jsx)(t,{code:'void UWeaponComponent::FireWeapon(int32 SubShotIndex, float SimulatedTime)\n{\nif (!WeaponData)\n{\n\tUE_LOG(LogTemp, Warning, TEXT("FireWeapon: No WeaponData assigned!"));\n\treturn;\n}\nif (!GetOwner())\n{\n\tUE_LOG(LogTemp, Warning, TEXT("FireWeapon: No owner assigned!"));\n\treturn;\n}\nif (!WeaponData || !GetOwner()) return;\n\nif (!CanFire())\n{\n\tUE_LOG(LogTemp, Warning, TEXT("FireWeapon: Cannot fire yet!"));\n\treturn;\n}\n\nif (!CachedHUD.IsValid())\n{\n\tUE_LOG(LogTemp, Warning, TEXT("FireWeapon: No HUD widget assigned!"));\n\tif (APlayerController* PC = Cast<APlayerController>(GetOwner()->GetInstigatorController()))\n\t{\n\t\tif (AGameHUD* GameHUD = Cast<AGameHUD>(PC->GetHUD()))\n\t\t{\n\t\t\tCachedHUD = GameHUD->GetHUDWidget();\n\t\t\tUE_LOG(LogTemp, Log, TEXT("FireWeapon: Retrieved HUD widget from GameHUD."));\n\t\t}\n\t}\n}\n\n// === Fire Rate Debug ===\nstatic float LastLoggedShotTime = -1.0f;\n\nif (SimulatedTime > 0.f)\n{\n\tif (LastLoggedShotTime >= 0.f)\n\t{\n\t\tconst float Interval = SimulatedTime - LastLoggedShotTime;\n\t\tconst float ActualRPM = 60.f / Interval;\n\n\t\tUE_LOG(LogTemp, Warning, TEXT("[Fire] Simulated Shot at %.4f"), SimulatedTime);\n\t\tUE_LOG(LogTemp, Log, TEXT("[FireRate Debug] Interval: %.4f s | Actual RPM: %.1f"), Interval, ActualRPM);\n\n\t\tconst float ExpectedInterval = 60.f / WeaponData->FireRate;\n\t\tconst float Drift = FMath::Abs(Interval - ExpectedInterval);\n\n\t\tif (Drift > 0.0005f) // (More precise threshold for high RPM)\n\t\t{\n\t\t\tUE_LOG(LogTemp, Warning, TEXT("?? RPM Drift! ? = %.4f (Expected: %.4f)"), Drift, ExpectedInterval);\n\t\t}\n\t}\n\n\tLastLoggedShotTime = SimulatedTime;\n}\n\n\n\nAActor* Owner = GetOwner();\n\nFVector ViewLocation;\nFRotator ViewRotation;\n\n// Get viewpoint from controller (player or AI)\nif (APawn* PawnOwner = Cast<APawn>(Owner))\n{\n\tAController* Controller = PawnOwner->GetController();\n\tif (Controller)\n\t{\n\t\tController->GetPlayerViewPoint(ViewLocation, ViewRotation);\n\t}\n\telse\n\t{\n\t\tViewLocation = Owner->GetActorLocation();\n\t\tViewRotation = Owner->GetActorRotation();\n\t}\n}\nelse\n{\n\tViewLocation = Owner->GetActorLocation();\n\tViewRotation = Owner->GetActorRotation();\n}\n\nFVector Start = ViewLocation;\nFVector ShootDir = ViewRotation.Vector();\n\nconst int32 PatternIndex = CurrentSprayIndex + SubShotIndex;\n\n// === APPLY SPRAY PATTERN TO BULLETS ===\nif (WeaponData && WeaponData->SprayPattern.IsValidIndex(PatternIndex))\n{\n\tconst FVector2D Point = WeaponData->SprayPattern[PatternIndex];\n\tconst FRotator PatternRot(Point.Y * WeaponData->BulletPatternMultiplier, Point.X * WeaponData->BulletPatternMultiplier, 0.f);\n\tFRotator BulletAim = ViewRotation + PatternRot;\n\tShootDir = BulletAim.Vector();\n\t\n}\n\n// === RANDOM SPREAD ===\nif (WeaponData && CurrentSpread > 0.f)\n{\n\tfloat HalfAngle = FMath::DegreesToRadians(CurrentSpread * 0.5f);\n\tShootDir = FMath::VRandCone(ShootDir, HalfAngle);\n\n\tUE_LOG(LogTemp, Log, TEXT("ShootDir with spread: %s"), *ShootDir.ToString());\n}\n\nFVector End = Start + ShootDir * WeaponData->TraceDistance;\n\nFHitResult Hit;\nFCollisionQueryParams Params;\nParams.AddIgnoredActor(Owner);\n\nconst bool bHit = GetWorld()->LineTraceSingleByChannel(Hit, Start, End, ECC_Visibility, Params);\nconst FVector ImpactPoint = bHit ? Hit.ImpactPoint : End;\n\n// === APPLY CAMERA RECOIL ===\nif (WeaponData && WeaponData->SprayPattern.IsValidIndex(CurrentSprayIndex))\n{\n\tconst FVector2D Point = WeaponData->SprayPattern[CurrentSprayIndex];\n\tconst FVector2D NextPoint = WeaponData->SprayPattern.IsValidIndex(CurrentSprayIndex + 1) ? WeaponData->SprayPattern[CurrentSprayIndex + 1] : Point;\n\tFVector2D PatternDelta = NextPoint - Point;\n\n\t// === FOV Punch ===\n\tif (WeaponData)\n\t{\n\t\tCurrentFOVOffset = WeaponData->FOVPunchAmount;\n\t\tFOVPunchElapsed = 0.f;\n\t\tbFOVPunchActive = true;\n\t}\n\n\tconst float CM = WeaponData->CameraRecoilMultiplier;\n\tif (APawn* P = Cast<APawn>(GetOwner()))\n\t{\n\t\tif (APlayerController* PC = Cast<APlayerController>(P->GetController()))\n\t\t{\n\t\t\tPC->AddPitchInput(-PatternDelta.Y * CM);\n\t\t\tPC->AddYawInput(PatternDelta.X * CM);\n\t\t}\n\t}\n\n\tGetWorld()->GetTimerManager().ClearTimer(RecoilResetTimer);\n\tGetWorld()->GetTimerManager().SetTimer(\n\t\tRecoilResetTimer,\n\t\tthis,\n\t\t&UWeaponComponent::ResetRecoilPattern,\n\t\tRecoilResetDelay,\n\t\tfalse\n\t);\n}\n\n// Visual Debug\n//const FColor LineColor = bHit ? FColor::Green : FColor::Red;\n//DrawDebugLine(GetWorld(), Start, ImpactPoint, LineColor, false, 1.0f, 0, 1.5f);\n\nif (bHit)\n{\n\tDrawDebugSphere(GetWorld(), ImpactPoint, 8.0f, 12, FColor::Yellow, false, 1.0f);\n\tUE_LOG(LogTemp, Log, TEXT("Hit Actor: %s at %s"), *Hit.GetActor()->GetName(), *ImpactPoint.ToString());\n}\n\n// Replay Recording\nif (UReplayRecorderComponent* Recorder = Owner->FindComponentByClass<UReplayRecorderComponent>())\n{\n\tRecorder->AddActionFlag(EReplayActionFlags::FiredWeapon);\n\n\tFRecordedShot NewShot;\n\tNewShot.ShotIndex = CurrentSprayIndex;\n\tNewShot.ViewLocation = ViewLocation;\n\tNewShot.ImpactLocation = ImpactPoint;\n\tNewShot.bHit = bHit;\n\tNewShot.ShotDirection = ShootDir.Rotation();\n\tNewShot.WeaponUsed = WeaponData;\n\n\tif (bHit && Hit.GetActor()->GetClass()->ImplementsInterface(UDamageableInterface::StaticClass()))\n\t{\n\t\tUE_LOG(LogTemp, Warning, TEXT("Hit Actor New Shot: %s at %s"), *Hit.GetActor()->GetName(), *ImpactPoint.ToString());\n\n\t\tif (ATemporalCharacter* Ghost = Cast<ATemporalCharacter>(Hit.GetActor()))\n\t\t{\n\t\t\tNewShot.HitGhostID = Ghost->GhostID;\n\t\t}\n\t\tNewShot.HitActor = Hit.GetActor();\n\t\tNewShot.HitBoneName = Hit.BoneName;\n\t}\n\n\tRecorder->CaptureShotData(NewShot);\n}\n\n// Apply Damage\nif (bHit && Hit.GetActor() && Hit.GetActor()->GetClass()->ImplementsInterface(UDamageableInterface::StaticClass()))\n{\n\tFDamageInfo DamageInfo;\n\tDamageInfo.DamageAmount = WeaponData->Damage;\n\tDamageInfo.Instigator = Owner;\n\tDamageInfo.HitLocation = ImpactPoint;\n\tDamageInfo.ShotDirection = ShootDir;\n\tDamageInfo.DamageType = WeaponData->DamageType;\n\tDamageInfo.HitBoneName = Hit.BoneName;\n\n\tif (Hit.BoneName == FName("head"))\n\t{\n\t\tDamageInfo.DamageTags.AddTag(TAG_Damage_Critical);\n\t\tDamageInfo.DamageTags.AddTag(TAG_Damage_Headshot);\n\t}\n\n\tIDamageableInterface::Execute_TakeDamage(Hit.GetActor(), DamageInfo);\n\n}\n\n// Mark that we\'re shooting (for visual crosshair expansion)\nbIsShooting = true;\nShootingCooldownTimer = 0.2f;\n\n// Increase bloom\nif (WeaponData)\n{\n\tCurrentSpread += WeaponData->FireSpread;\n\tCurrentSpread = FMath::Clamp(CurrentSpread, WeaponData->MinSpread, WeaponData->MaxSpread);\n\n\tUE_LOG(LogTemp, Log, TEXT("Current Spread: %.2f"), CurrentSpread);\n}\n\nif (!WeaponData->bInfiniteMag)\n{\n\tCurrentMagAmmo--;\n}\n\nCachedHUD->UpdateAmmoDisplay(CurrentMagAmmo, CurrentReserveAmmo);\n\nCurrentSprayIndex++; // Advance index per shot\n\n// Clamp to stay within the spray pattern length (Loops back to start)\nif (WeaponData && WeaponData->SprayPattern.Num() > 0)\n{\n\tCurrentSprayIndex = CurrentSprayIndex % WeaponData->SprayPattern.Num();\n}\n\nLastFireTime = GetWorld()->GetTimeSeconds();\n}',language:"cpp",previewLines:15})]}),(0,a.jsxs)(r,{children:[(0,a.jsx)("summary",{children:(0,a.jsxs)(n.p,{children:["\ud83e\udde0 ",(0,a.jsx)("code",{children:"ResetRecoilPattern"}),"\r\n",(0,a.jsx)("span",{class:"member-badge kind-function",children:"function"}),"\r\n",(0,a.jsx)("span",{class:"member-badge section-public-func",children:"Public"}),"\r\n",(0,a.jsx)("span",{class:"brief-description-pill",children:"Reset the recoil pattern to its starting index."})]})}),(0,a.jsxs)("p",{children:[(0,a.jsx)("strong",{children:"Parameters:"})," None"]}),(0,a.jsx)("hr",{}),(0,a.jsxs)("p",{children:[(0,a.jsx)("strong",{children:"\ud83d\udcc4 Source:"})," ",(0,a.jsx)("code",{children:"Source/TimeAssassin/WeaponComponent.cpp"})," (lines 590\u2013596)"]}),(0,a.jsx)(t,{code:'void UWeaponComponent::ResetRecoilPattern()\n{\n// Reset your current recoil index or logic here\nCurrentSprayIndex = 0;\n\nUE_LOG(LogTemp, Log, TEXT("Recoil pattern reset."));\n}',language:"cpp",previewLines:15})]}),(0,a.jsxs)(r,{children:[(0,a.jsx)("summary",{children:(0,a.jsxs)(n.p,{children:["\ud83e\udde0 ",(0,a.jsx)("code",{children:"StartFiring"}),"\r\n",(0,a.jsx)("span",{class:"member-badge kind-function",children:"function"}),"\r\n",(0,a.jsx)("span",{class:"member-badge section-public-func",children:"Public"}),"\r\n",(0,a.jsx)("span",{class:"brief-description-pill",children:"Begin continuous fire (for automatic weapons)."})]})}),(0,a.jsxs)("p",{children:[(0,a.jsx)("strong",{children:"Parameters:"})," None"]}),(0,a.jsx)("hr",{}),(0,a.jsxs)("p",{children:[(0,a.jsx)("strong",{children:"\ud83d\udcc4 Source:"})," ",(0,a.jsx)("code",{children:"Source/TimeAssassin/WeaponComponent.cpp"})," (lines 598\u2013616)"]}),(0,a.jsx)(t,{code:"void UWeaponComponent::StartFiring()\n{\nbWantsToFire = true;\nbIsFiring = true;\nShootingCooldownTimer = 0.2f; // Reset cooldown\n\nif (!WeaponData) return;\n\n// Immediately fire once for responsiveness (especially semi-auto)\nFireWeapon();\n\n\n// Reset accumulator so auto-fire starts clean\nFireAccumulator = 0.0f;\nbHasFiredThisPress = true;\n\n}",language:"cpp",previewLines:15})]}),(0,a.jsxs)(r,{children:[(0,a.jsx)("summary",{children:(0,a.jsxs)(n.p,{children:["\ud83e\udde0 ",(0,a.jsx)("code",{children:"StopFiring"}),"\r\n",(0,a.jsx)("span",{class:"member-badge kind-function",children:"function"}),"\r\n",(0,a.jsx)("span",{class:"member-badge section-public-func",children:"Public"}),"\r\n",(0,a.jsx)("span",{class:"brief-description-pill",children:"Cease continuous fire."})]})}),(0,a.jsxs)("p",{children:[(0,a.jsx)("strong",{children:"Parameters:"})," None"]}),(0,a.jsx)("hr",{}),(0,a.jsxs)("p",{children:[(0,a.jsx)("strong",{children:"\ud83d\udcc4 Source:"})," ",(0,a.jsx)("code",{children:"Source/TimeAssassin/WeaponComponent.cpp"})," (lines 618\u2013626)"]}),(0,a.jsx)(t,{code:"void UWeaponComponent::StopFiring()\n{\nbWantsToFire = false;\nbIsFiring = false;\nbHasFiredThisPress = false;\n\n// Reset accumulator to avoid unintended carry-over\nFireAccumulator = 0.0f;\n}",language:"cpp",previewLines:15})]}),(0,a.jsxs)(r,{children:[(0,a.jsx)("summary",{children:(0,a.jsxs)(n.p,{children:["\ud83e\udde0 ",(0,a.jsx)("code",{children:"HandleAutomaticFire"}),"\r\n",(0,a.jsx)("span",{class:"member-badge kind-function",children:"function"}),"\r\n",(0,a.jsx)("span",{class:"member-badge section-public-func",children:"Public"}),"\r\n",(0,a.jsxs)("span",{class:"brief-description-pill",children:["Called on each tick to handle automatic fire logic when ",(0,a.jsx)(n.a,{href:"#class_u_weapon_component_1a66deae0daed8099b90eb3c55943aa587",children:"StartFiring()"})," has been invoked."]})]})}),(0,a.jsxs)("p",{children:[(0,a.jsx)("strong",{children:"Parameters:"})," None"]}),(0,a.jsx)("hr",{}),(0,a.jsxs)("p",{children:[(0,a.jsx)("strong",{children:"\ud83d\udcc4 Source:"})," ",(0,a.jsx)("code",{children:"Source/TimeAssassin/WeaponComponent.cpp"})," (lines 628\u2013633)"]}),(0,a.jsx)(t,{code:"void UWeaponComponent::HandleAutomaticFire()\n{\nif (!bIsFiring || !WeaponData) return;\n\nFireWeapon();\n}",language:"cpp",previewLines:15})]}),(0,a.jsxs)(r,{children:[(0,a.jsx)("summary",{children:(0,a.jsxs)(n.p,{children:["\ud83e\udde0 ",(0,a.jsx)("code",{children:"ReloadWeapon"}),"\r\n",(0,a.jsx)("span",{class:"member-badge kind-function",children:"function"}),"\r\n",(0,a.jsx)("span",{class:"member-badge section-public-func",children:"Public"}),"\r\n",(0,a.jsx)("span",{class:"brief-description-pill",children:"Reload the weapon's clip if reserve ammo is available."})]})}),(0,a.jsxs)("p",{children:[(0,a.jsx)("strong",{children:"Parameters:"})," None"]}),(0,a.jsx)("hr",{}),(0,a.jsxs)("p",{children:[(0,a.jsx)("strong",{children:"\ud83d\udcc4 Source:"})," ",(0,a.jsx)("code",{children:"Source/TimeAssassin/WeaponComponent.cpp"})," (lines 635\u2013644)"]}),(0,a.jsx)(t,{code:"void UWeaponComponent::ReloadWeapon()\n{\nif (bIsReloading || !WeaponData) return;\n\nconst int32 Needed = WeaponData->MagSize - CurrentMagAmmo;\nif (Needed <= 0 || CurrentReserveAmmo <= 0) return;\n\nbIsReloading = true;\nGetWorld()->GetTimerManager().SetTimer(ReloadTimer, this, &UWeaponComponent::FinishReloading, WeaponData->bInstantReload ? 0.001f : WeaponData->ReloadDuration, false);\n}",language:"cpp",previewLines:15})]}),(0,a.jsxs)(r,{children:[(0,a.jsx)("summary",{children:(0,a.jsxs)(n.p,{children:["\ud83e\udde0 ",(0,a.jsx)("code",{children:"FinishReloading"}),"\r\n",(0,a.jsx)("span",{class:"member-badge kind-function",children:"function"}),"\r\n",(0,a.jsx)("span",{class:"member-badge section-public-func",children:"Public"}),"\r\n",(0,a.jsx)("span",{class:"brief-description-pill",children:"Finalize the reload, updating clip and reserve ammo counts."})]})}),(0,a.jsxs)("p",{children:[(0,a.jsx)("strong",{children:"Parameters:"})," None"]}),(0,a.jsx)("hr",{}),(0,a.jsxs)("p",{children:[(0,a.jsx)("strong",{children:"\ud83d\udcc4 Source:"})," ",(0,a.jsx)("code",{children:"Source/TimeAssassin/WeaponComponent.cpp"})," (lines 645\u2013665)"]}),(0,a.jsx)(t,{code:'void UWeaponComponent::FinishReloading()\n{\nif (!WeaponData || !CachedHUD.IsValid()) return;\n\nconst int32 Needed = WeaponData->MagSize - CurrentMagAmmo;\nconst int32 ToReload = FMath::Min(Needed, CurrentReserveAmmo);\n\nCurrentMagAmmo += ToReload;\n\nif (!WeaponData->bInfiniteAmmo)\n{\n\tCurrentReserveAmmo -= ToReload;\n}\n\nCachedHUD->UpdateAmmoDisplay(CurrentMagAmmo, CurrentReserveAmmo);\n\nbIsReloading = false;\n\nUE_LOG(LogTemp, Log, TEXT("Reloaded %d bullets. Clip: %d / Reserve: %d"), ToReload, CurrentMagAmmo, CurrentReserveAmmo);\n}',language:"cpp",previewLines:15})]}),(0,a.jsxs)(r,{children:[(0,a.jsx)("summary",{children:(0,a.jsxs)(n.p,{children:["\ud83e\udde0 ",(0,a.jsx)("code",{children:"GetCrosshairOffset"}),"\r\n",(0,a.jsx)("span",{class:"member-badge kind-function",children:"function"}),"\r\n",(0,a.jsx)("span",{class:"member-badge section-public-func",children:"Public"}),"\r\n",(0,a.jsx)("span",{class:"brief-description-pill",children:"Retrieve the current pixel offset used by the crosshair."})]})}),(0,a.jsxs)("p",{children:[(0,a.jsx)("strong",{children:"Parameters:"})," None"]}),(0,a.jsx)("hr",{}),(0,a.jsxs)("p",{children:[(0,a.jsx)("strong",{children:"\ud83d\udcc4 Source:"})," ",(0,a.jsx)("code",{children:"Source/TimeAssassin/WeaponComponent.cpp"})," (lines 260\u2013265)"]}),(0,a.jsx)(t,{code:"float UWeaponComponent::GetCrosshairOffset() const\n{\n// Converts spread (degrees) to pixels \ufffd tune this multiplier!\nconst float PixelMultiplier = 8.0f;\nreturn CurrentSpread * PixelMultiplier;\n}",language:"cpp",previewLines:15})]}),(0,a.jsxs)(r,{children:[(0,a.jsx)("summary",{children:(0,a.jsxs)(n.p,{children:["\ud83e\udde0 ",(0,a.jsx)("code",{children:"SetGameHUDWidget"}),"\r\n",(0,a.jsx)("span",{class:"member-badge kind-function",children:"function"}),"\r\n",(0,a.jsx)("span",{class:"member-badge section-public-func",children:"Public"}),"\r\n",(0,a.jsx)("span",{class:"brief-description-pill",children:"Assign the main HUD widget once the player controller has initialized it."})]})}),(0,a.jsx)("p",{children:(0,a.jsx)("strong",{children:"Parameters:"})}),(0,a.jsx)("ul",{children:(0,a.jsxs)("li",{children:[(0,a.jsx)("code",{children:"* InHUD"})," \u2013 Reference to the player's HUD widget."]})}),(0,a.jsx)("hr",{}),(0,a.jsxs)("p",{children:[(0,a.jsx)("strong",{children:"\ud83d\udcc4 Source:"})," ",(0,a.jsx)("code",{children:"Source/TimeAssassin/WeaponComponent.cpp"})," (lines 267\u2013270)"]}),(0,a.jsx)(t,{code:"void UWeaponComponent::SetGameHUDWidget(UGameHUDWidget* InHUD)\n{\nCachedHUD = InHUD;\n}",language:"cpp",previewLines:15})]}),(0,a.jsxs)(r,{children:[(0,a.jsx)("summary",{children:(0,a.jsxs)(n.p,{children:["\ud83e\udde0 ",(0,a.jsx)("code",{children:"SetCrosshairWidget"}),"\r\n",(0,a.jsx)("span",{class:"member-badge kind-function",children:"function"}),"\r\n",(0,a.jsx)("span",{class:"member-badge section-public-func",children:"Public"}),"\r\n",(0,a.jsx)("span",{class:"brief-description-pill",children:"Provide the crosshair widget for dynamic spread updates."})]})}),(0,a.jsx)("p",{children:(0,a.jsx)("strong",{children:"Parameters:"})}),(0,a.jsx)("ul",{children:(0,a.jsxs)("li",{children:[(0,a.jsx)("code",{children:"* InWidget"})," \u2013 The crosshair UI widget instance."]})}),(0,a.jsx)("hr",{}),(0,a.jsxs)("p",{children:[(0,a.jsx)("strong",{children:"\ud83d\udcc4 Source:"})," ",(0,a.jsx)("code",{children:"Source/TimeAssassin/WeaponComponent.cpp"})," (lines 272\u2013281)"]}),(0,a.jsx)(t,{code:"void UWeaponComponent::SetCrosshairWidget(UCrosshairWidget* InWidget)\n{\nCrosshairWidgetRef = InWidget;\n\n// Do one immediate update to lay down the crosshair\nif (IsValid(InWidget))\n{\n\tUpdateCrosshairSpread(0.f);\n}\n}",language:"cpp",previewLines:15})]}),(0,a.jsxs)(r,{children:[(0,a.jsx)("summary",{children:(0,a.jsxs)(n.p,{children:["\ud83e\udde0 ",(0,a.jsx)("code",{children:"SetHitmarkerWidget"}),"\r\n",(0,a.jsx)("span",{class:"member-badge kind-function",children:"function"}),"\r\n",(0,a.jsx)("span",{class:"member-badge section-public-func",children:"Public"}),"\r\n",(0,a.jsx)("span",{class:"brief-description-pill",children:"Provide the hitmarker widget to display impacts."})]})}),(0,a.jsx)("p",{children:(0,a.jsx)("strong",{children:"Parameters:"})}),(0,a.jsx)("ul",{children:(0,a.jsxs)("li",{children:[(0,a.jsx)("code",{children:"* InWidget"})," \u2013 The hitmarker UI widget instance."]})}),(0,a.jsx)("hr",{}),(0,a.jsxs)("p",{children:[(0,a.jsx)("strong",{children:"\ud83d\udcc4 Source:"})," ",(0,a.jsx)("code",{children:"Source/TimeAssassin/WeaponComponent.cpp"})," (lines 283\u2013286)"]}),(0,a.jsx)(t,{code:"void UWeaponComponent::SetHitmarkerWidget(UHitmarkerWidget* InWidget)\n{\nHitmarkerWidgetRef = InWidget;\n}",language:"cpp",previewLines:15})]}),(0,a.jsxs)(r,{children:[(0,a.jsx)("summary",{children:(0,a.jsxs)(n.p,{children:["\ud83e\udde0 ",(0,a.jsx)("code",{children:"GetCurrentSpread"}),"\r\n",(0,a.jsx)("span",{class:"member-badge kind-function",children:"function"}),"\r\n",(0,a.jsx)("span",{class:"member-badge section-public-func",children:"Public"}),"\r\n",(0,a.jsx)("span",{class:"brief-description-pill",children:"Returns the current spread value (degrees) for UI or recoil logic."})]})}),(0,a.jsxs)("p",{children:[(0,a.jsx)("strong",{children:"Parameters:"})," None"]}),(0,a.jsx)("hr",{}),(0,a.jsxs)("p",{children:[(0,a.jsx)("strong",{children:"\ud83d\udcc4 Source:"})," ",(0,a.jsx)("code",{children:"Source/TimeAssassin/WeaponComponent.h"})," (lines 169\u2013169)"]}),(0,a.jsx)(t,{code:"\tfloat GetCurrentSpread() const { return CurrentSpread; }",language:"cpp",previewLines:15})]}),(0,a.jsxs)(r,{children:[(0,a.jsx)("summary",{children:(0,a.jsxs)(n.p,{children:["\ud83e\udde0 ",(0,a.jsx)("code",{children:"GetAmmoCounts"}),"\r\n",(0,a.jsx)("span",{class:"member-badge kind-function",children:"function"}),"\r\n",(0,a.jsx)("span",{class:"member-badge section-public-func",children:"Public"}),"\r\n",(0,a.jsx)("span",{class:"brief-description-pill",children:"Query the current ammo counts."})]})}),(0,a.jsx)("p",{children:(0,a.jsx)("strong",{children:"Parameters:"})}),(0,a.jsxs)("ul",{children:[(0,a.jsxs)("li",{children:[(0,a.jsx)("code",{children:"int32 & OutClip"})," \u2013 Receives the number of rounds in the clip."]}),(0,a.jsxs)("li",{children:[(0,a.jsx)("code",{children:"int32 & OutReserve"})," \u2013 Receives the number of rounds in reserve."]})]}),(0,a.jsx)("hr",{}),(0,a.jsxs)("p",{children:[(0,a.jsx)("strong",{children:"\ud83d\udcc4 Source:"})," ",(0,a.jsx)("code",{children:"Source/TimeAssassin/WeaponComponent.cpp"})," (lines 288\u2013292)"]}),(0,a.jsx)(t,{code:"void UWeaponComponent::GetAmmoCounts(int32& OutClip, int32& OutReserve) const\n{\nOutClip = CurrentMagAmmo;\nOutReserve = CurrentReserveAmmo;\n}",language:"cpp",previewLines:15})]}),(0,a.jsxs)(r,{children:[(0,a.jsx)("summary",{children:(0,a.jsxs)(n.p,{children:["\ud83e\udde0 ",(0,a.jsx)("code",{children:"SetWeaponData"}),"\r\n",(0,a.jsx)("span",{class:"member-badge kind-function",children:"function"}),"\r\n",(0,a.jsx)("span",{class:"member-badge section-public-func",children:"Public"}),"\r\n",(0,a.jsx)("span",{class:"brief-description-pill",children:"Switch to a different weapon data asset at runtime."})]})}),(0,a.jsx)("p",{children:(0,a.jsx)("strong",{children:"Parameters:"})}),(0,a.jsx)("ul",{children:(0,a.jsxs)("li",{children:[(0,a.jsx)("code",{children:"* NewWeaponData"})," \u2013 The new weapon configuration asset."]})}),(0,a.jsx)("hr",{}),(0,a.jsxs)("p",{children:[(0,a.jsx)("strong",{children:"\ud83d\udcc4 Source:"})," ",(0,a.jsx)("code",{children:"Source/TimeAssassin/WeaponComponent.cpp"})," (lines 294\u2013343)"]}),(0,a.jsx)(t,{code:'void UWeaponComponent::SetWeaponData(UWeaponDataAsset* NewWeaponData)\n{\nif (!NewWeaponData)\n{\n\tUE_LOG(LogTemp, Warning, TEXT("SetWeaponData: NewWeaponData is null!"));\n\treturn;\n}\n\n// Save current weapon ammo\nif (WeaponData)\n{\n\tAmmoMap.FindOrAdd(WeaponData) = { CurrentMagAmmo, CurrentReserveAmmo };\n}\n\nWeaponData = NewWeaponData;\n\n// Load ammo for the new weapon\nFWeaponAmmoData* Stored = AmmoMap.Find(WeaponData);\nif (Stored)\n{\n\tCurrentMagAmmo = Stored->CurrentAmmo;\n\tCurrentReserveAmmo = Stored->ReserveAmmo;\n}\nelse\n{\n\t// First time equipping this weapon\n\tCurrentMagAmmo = WeaponData->MagSize;\n\tCurrentReserveAmmo = WeaponData->MaxReserveAmmo;\n}\n\nif (CrosshairWidgetRef.IsValid() && CachedHUD.IsValid())\n{\n\tCachedHUD->UpdateAmmoDisplay(CurrentMagAmmo, CurrentReserveAmmo);\n}\nelse\n{\n\tif (!CrosshairWidgetRef.IsValid())\n\t\tUE_LOG(LogTemp, Warning, TEXT("SetWeaponData: CrosshairWidget is not valid!"));\n\n\tif (!CachedHUD.IsValid())\n\t\tUE_LOG(LogTemp, Warning, TEXT("SetWeaponData: CachedHUD is not valid!"));\n}\n\nCurrentSprayIndex = 0;\nUE_LOG(LogTemp, Log, TEXT("Weapon data set: %s"), *WeaponData->GetName());\n\nUE_LOG(LogTemp, Log, TEXT("Weapon: %s | Ammo: %d / %d"),\n\t*WeaponData->GetName(), CurrentMagAmmo, CurrentReserveAmmo);\n}',language:"cpp",previewLines:15})]}),(0,a.jsxs)(r,{children:[(0,a.jsx)("summary",{children:(0,a.jsxs)(n.p,{children:["\ud83e\udde0 ",(0,a.jsx)("code",{children:"BeginPlay"}),"\r\n",(0,a.jsx)("span",{class:"member-badge kind-function",children:"function"}),"\r\n",(0,a.jsx)("span",{class:"member-badge section-protected-func",children:"Protected"}),"\r\n",(0,a.jsx)("span",{class:"brief-description-pill",children:"Called when the game starts; initializes ammo and HUD references."})]})}),(0,a.jsxs)("p",{children:[(0,a.jsx)("strong",{children:"Parameters:"})," None"]}),(0,a.jsx)("hr",{}),(0,a.jsxs)("p",{children:[(0,a.jsx)("strong",{children:"\ud83d\udcc4 Source:"})," ",(0,a.jsx)("code",{children:"Source/TimeAssassin/WeaponComponent.cpp"})," (lines 37\u201382)"]}),(0,a.jsx)(t,{code:'void UWeaponComponent::BeginPlay()\n{\nSuper::BeginPlay();\n\nSetComponentTickEnabled(true);\nPrimaryComponentTick.bStartWithTickEnabled = true;\n\nCachedCharacter = Cast<ATACharacter>(GetOwner());\nif (!CachedCharacter)\n{\n\tUE_LOG(LogTemp, Error, TEXT("WeaponComponent: Could not cast owner to ATACharacter."));\n}\n\nif (WeaponData)\n{\n\tCurrentMagAmmo = WeaponData->MagSize;\n\tCurrentReserveAmmo = WeaponData->MaxReserveAmmo;\n}\n\nif (!CachedHUD.IsValid())\n{\n\tUE_LOG(LogTemp, Warning, TEXT("BeginPlay: No HUD widget assigned!"));\n\tif (APlayerController* PC = Cast<APlayerController>(Cast<APawn>(GetOwner())->GetController()))\n\t{\n\t\tif (AGameHUD* GameHUD = Cast<AGameHUD>(PC->GetHUD()))\n\t\t{\n\t\t\tCachedHUD = GameHUD->GetHUDWidget();\n\t\t\tUE_LOG(LogTemp, Log, TEXT("BeginPlay: Retrieved HUD widget from GameHUD."));\n\t\t}\n\t\telse\n\t\t{\n\t\t\tUE_LOG(LogTemp, Error, TEXT("BeginPlay: No GameHUD found for owner!"));\n\t\t}\n\t}\n\telse\n\t{\n\t\tUE_LOG(LogTemp, Error, TEXT("BeginPlay: No PlayerController found for owner!"));\n\t}\n}\n\nif (CachedHUD.IsValid() && WeaponData)\n{\n\tCachedHUD->UpdateAmmoDisplay(CurrentMagAmmo, CurrentReserveAmmo);\n}\n\n}',language:"cpp",previewLines:15})]}),(0,a.jsxs)(r,{children:[(0,a.jsx)("summary",{children:(0,a.jsxs)(n.p,{children:["\ud83e\udde0 ",(0,a.jsx)("code",{children:"TickComponent"}),"\r\n",(0,a.jsx)("span",{class:"member-badge kind-function",children:"function"}),"\r\n",(0,a.jsx)("span",{class:"member-badge section-protected-func",children:"Protected"}),"\r\n",(0,a.jsx)("span",{class:"brief-description-pill",children:"Per-frame update."})]})}),(0,a.jsxs)("p",{children:[(0,a.jsx)("strong",{children:"Parameters:"})," None"]}),(0,a.jsx)("hr",{}),(0,a.jsxs)("p",{children:[(0,a.jsx)("strong",{children:"\ud83d\udcc4 Source:"})," ",(0,a.jsx)("code",{children:"Source/TimeAssassin/WeaponComponent.cpp"})," (lines 84\u2013188)"]}),(0,a.jsx)(t,{code:'void UWeaponComponent::TickComponent(float DeltaTime, ELevelTick TickType, FActorComponentTickFunction* ThisTickFunction)\n{\nSuper::TickComponent(DeltaTime, TickType, ThisTickFunction);\n\nUCrosshairWidget* Widget = CrosshairWidgetRef.Get();\nif (!IsValid(Widget) || !CachedCharacter || !WeaponData)\n{\n\t//SetComponentTickEnabled(false);\n\treturn;\n}\n\nif (!CachedHUD.IsValid())\n{\n\tUE_LOG(LogTemp, Warning, TEXT("FireWeapon: No HUD widget assigned!"));\n\tif (APlayerController* PC = Cast<APlayerController>(GetOwner()->GetInstigatorController()))\n\t{\n\t\tif (AGameHUD* GameHUD = Cast<AGameHUD>(PC->GetHUD()))\n\t\t{\n\t\t\tCachedHUD = GameHUD->GetHUDWidget();\n\t\t\tUE_LOG(LogTemp, Log, TEXT("FireWeapon: Retrieved HUD widget from GameHUD."));\n\t\t}\n\t}\n}\n\nUpdateCrosshairSpread(DeltaTime);\n\n// === Only handle firing logic if allowed ===\n// === Only handle auto-fire logic ===\nif (WeaponData && bIsFiring && bWantsToFire && WeaponData->bIsAutomatic)\n{\n\tconst float FireInterval = 60.0f / WeaponData->FireRate;\n\tconst float CurrentTime = GetWorld()->GetTimeSeconds();\n\n\tfloat SimulatedTime = LastFireTime;\n\tint32 MaxShotsPerFrame = 10;\n\tint32 SubShotIndex = 0;\n\n\twhile ((SimulatedTime + FireInterval) <= CurrentTime && SubShotIndex < MaxShotsPerFrame)\n\t{\n\t\tSimulatedTime += FireInterval;\n\t\tFireWeapon(SubShotIndex, SimulatedTime);\n\t\tSubShotIndex++;\n\t}\n\n\tLastFireTime = SimulatedTime;\n}\n\nif (bIsShooting)\n{\n\tShootingCooldownTimer -= DeltaTime;\n\tif (ShootingCooldownTimer <= 0.f)\n\t{\n\t\tbIsShooting = false;\n\t}\n}\n\n// Recover spread\nif (!bIsFiring && WeaponData && CurrentSpread > WeaponData->MinSpread)\n{\n\tCurrentSpread -= WeaponData->SpreadRecoveryRate * DeltaTime;\n\tCurrentSpread = FMath::Max(CurrentSpread, WeaponData->MinSpread);\n}\n\n// Push to crosshair\nif (CrosshairWidgetRef.IsValid() && WeaponData)\n{\n\tconst float SpreadPixelsPerDegree = 8.0f; // tweak this as needed\n\tfloat PixelOffset = CurrentSpread * SpreadPixelsPerDegree;\n\n\tCrosshairWidgetRef->SetCrosshairOffset(PixelOffset);\n}\n\n// === FOV PUNCH ===\nif (APawn* Pawn = Cast<APawn>(GetOwner()))\n{\n\tif (APlayerController* PC = Cast<APlayerController>(Pawn->GetController()))\n\t{\n\t\tif (PC->PlayerCameraManager)\n\t\t{\n\t\t\tconst float DefaultFOV = PC->PlayerCameraManager->DefaultFOV;\n\n\t\t\tif (bFOVPunchActive)\n\t\t\t{\n\t\t\t\tFOVPunchElapsed += DeltaTime;\n\t\t\t\tconst float Alpha = FMath::Clamp(FOVPunchElapsed / FOVPunchDuration, 0.f, 1.f);\n\t\t\t\tconst float EaseAlpha = FMath::InterpEaseOut(1.f, 0.f, Alpha, FOVEaseExponent); // goes from 1 -> 0\n\t\t\t\tconst float NewFOV = DefaultFOV + (CurrentFOVOffset * EaseAlpha);\n\n\t\t\t\tPC->PlayerCameraManager->SetFOV(NewFOV);\n\n\t\t\t\tif (Alpha >= 1.f)\n\t\t\t\t{\n\t\t\t\t\t// Done easing back\n\t\t\t\t\tbFOVPunchActive = false;\n\t\t\t\t\tCurrentFOVOffset = 0.f;\n\t\t\t\t\tFOVPunchElapsed = 0.f;\n\t\t\t\t\tPC->PlayerCameraManager->SetFOV(DefaultFOV);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n}',language:"cpp",previewLines:15})]}),(0,a.jsxs)(r,{children:[(0,a.jsx)("summary",{children:(0,a.jsxs)(n.p,{children:["\ud83e\udde0 ",(0,a.jsx)("code",{children:"InitializeComponent"}),"\r\n",(0,a.jsx)("span",{class:"member-badge kind-function",children:"function"}),"\r\n",(0,a.jsx)("span",{class:"member-badge section-protected-func",children:"Protected"}),"\r\n",(0,a.jsx)("span",{class:"brief-description-pill",children:"Called once the component is registered; ensures any Blueprint wiring occurs."})]})}),(0,a.jsxs)("p",{children:[(0,a.jsx)("strong",{children:"Parameters:"})," None"]}),(0,a.jsx)("hr",{}),(0,a.jsxs)("p",{children:[(0,a.jsx)("strong",{children:"\ud83d\udcc4 Source:"})," ",(0,a.jsx)("code",{children:"Source/TimeAssassin/WeaponComponent.cpp"})," (lines 190\u2013211)"]}),(0,a.jsx)(t,{code:'void UWeaponComponent::InitializeComponent()\n{\nSuper::InitializeComponent();\n\nUE_LOG(LogTemp, Log, TEXT("InitializeComponent: %s"), *GetName());\n\n// Force C++ defaults *after* any Blueprint wiring\nPrimaryComponentTick.bCanEverTick = true;\nPrimaryComponentTick.bStartWithTickEnabled = true;\nSetComponentTickEnabled(true);\n\nUE_LOG(LogTemp, Log, TEXT(\n\t"InitializeComponent: bCanEverTick=%d  bStartWithTickEnabled=%d  IsTickEnabled=%d"\n),\n\tPrimaryComponentTick.bCanEverTick,\n\tPrimaryComponentTick.bStartWithTickEnabled,\n\tPrimaryComponentTick.IsTickFunctionEnabled()\n);\n\n}',language:"cpp",previewLines:15})]}),(0,a.jsxs)(r,{children:[(0,a.jsx)("summary",{children:(0,a.jsxs)(n.p,{children:["\ud83e\udde0 ",(0,a.jsx)("code",{children:"CanFire"}),"\r\n",(0,a.jsx)("span",{class:"member-badge kind-function",children:"function"}),"\r\n",(0,a.jsx)("span",{class:"member-badge section-protected-func",children:"Protected"}),"\r\n",(0,a.jsx)("span",{class:"brief-description-pill",children:"Checks whether the weapon can currently fire."})]})}),(0,a.jsxs)("p",{children:[(0,a.jsx)("strong",{children:"Parameters:"})," None"]}),(0,a.jsx)("hr",{}),(0,a.jsxs)("p",{children:[(0,a.jsx)("strong",{children:"\ud83d\udcc4 Source:"})," ",(0,a.jsx)("code",{children:"Source/TimeAssassin/WeaponComponent.cpp"})," (lines 213\u2013230)"]}),(0,a.jsx)(t,{code:"bool UWeaponComponent::CanFire() const\n{\nif (!WeaponData || !GetWorld() || bIsReloading)\n\treturn false;\n\nif (CurrentMagAmmo <= 0)\n{\n\tif (WeaponData->bAutoReload && CurrentReserveAmmo > 0)\n\t{\n\t\t// Auto-reload if enabled and reserve ammo is available\n\t\tCachedCharacter->HandleReload();\n\t\treturn false; // Can't fire while reloading\n\t}\n\treturn false; // No ammo in mag and not reloading\n}\n\nreturn true;\n}",language:"cpp",previewLines:15})]}),(0,a.jsxs)(r,{children:[(0,a.jsx)("summary",{children:(0,a.jsxs)(n.p,{children:["\ud83e\udde0 ",(0,a.jsx)("code",{children:"UpdateCrosshairSpread"}),"\r\n",(0,a.jsx)("span",{class:"member-badge kind-function",children:"function"}),"\r\n",(0,a.jsx)("span",{class:"member-badge section-protected-func",children:"Protected"}),"\r\n",(0,a.jsx)("span",{class:"brief-description-pill",children:"Adjusts the player's crosshair spread based on movement, firing, and reload state."})]})}),(0,a.jsx)("p",{children:(0,a.jsx)("strong",{children:"Parameters:"})}),(0,a.jsx)("ul",{children:(0,a.jsxs)("li",{children:[(0,a.jsx)("code",{children:"float DeltaTime"})," \u2013 Time since last tick."]})}),(0,a.jsx)("hr",{}),(0,a.jsxs)("p",{children:[(0,a.jsx)("strong",{children:"\ud83d\udcc4 Source:"})," ",(0,a.jsx)("code",{children:"Source/TimeAssassin/WeaponComponent.cpp"})," (lines 232\u2013257)"]}),(0,a.jsx)(t,{code:"void UWeaponComponent::UpdateCrosshairSpread(float DeltaTime)\n{\nif (!CrosshairWidgetRef.IsValid() || !CachedCharacter || !WeaponData) return;\n\nTargetSpread = WeaponData->IdleSpread;\n\nif (CachedCharacter->bIsMoving)\n\tTargetSpread += WeaponData->WalkSpread;\n\nif (CachedCharacter->bIsAirborne)\n\tTargetSpread += WeaponData->AirborneSpread;\n\nif (CachedCharacter->bIsJumping)\n\tTargetSpread += WeaponData->JumpSpread;\n\nif (bIsReloading)\n\tTargetSpread += WeaponData->ReloadingSpread;\n\nif (bIsShooting)\n\tTargetSpread += WeaponData->FireSpread;\n\nCurrentSpread = FMath::FInterpTo(CurrentSpread, TargetSpread, DeltaTime, WeaponData->SpreadRecoveryRate);\n\nconst float PixelsPerUnit = 8.0f;\nCrosshairWidgetRef->SetCrosshairOffset(CurrentSpread * PixelsPerUnit);\n}",language:"cpp",previewLines:15})]})]}),(0,a.jsxs)(r,{open:!0,children:[(0,a.jsx)("summary",{children:"\ud83d\udce6 Variables"}),(0,a.jsxs)(r,{children:[(0,a.jsx)("summary",{children:(0,a.jsxs)(n.p,{children:["\ud83e\udde0 ",(0,a.jsx)("code",{children:"WeaponData"}),"\r\n",(0,a.jsx)("span",{class:"member-badge kind-variable",children:"variable"}),"\r\n",(0,a.jsx)("span",{class:"member-badge section-public-attrib",children:"Public"}),"\r\n",(0,a.jsx)("span",{class:"brief-description-pill",children:"Data asset defining weapon parameters: damage, fire rate, spread, etc."})]})}),(0,a.jsx)("p",{children:"Data asset defining weapon parameters: damage, fire rate, spread, etc."})]}),(0,a.jsxs)(r,{children:[(0,a.jsx)("summary",{children:(0,a.jsxs)(n.p,{children:["\ud83e\udde0 ",(0,a.jsx)("code",{children:"RecoilResetDelay"}),"\r\n",(0,a.jsx)("span",{class:"member-badge kind-variable",children:"variable"}),"\r\n",(0,a.jsx)("span",{class:"member-badge section-public-attrib",children:"Public"}),"\r\n",(0,a.jsx)("span",{class:"brief-description-pill",children:"Seconds after stopping fire before recoil pattern resets."})]})}),(0,a.jsx)("p",{children:"Seconds after stopping fire before recoil pattern resets."})]}),(0,a.jsxs)(r,{children:[(0,a.jsx)("summary",{children:(0,a.jsxs)(n.p,{children:["\ud83e\udde0 ",(0,a.jsx)("code",{children:"RecoilRecoverySpeed"}),"\r\n",(0,a.jsx)("span",{class:"member-badge kind-variable",children:"variable"}),"\r\n",(0,a.jsx)("span",{class:"member-badge section-public-attrib",children:"Public"}),"\r\n",(0,a.jsx)("span",{class:"brief-description-pill",children:"Speed at which recoil recovers (higher = faster)."})]})}),(0,a.jsx)("p",{children:"Speed at which recoil recovers (higher = faster)."})]}),(0,a.jsxs)(r,{children:[(0,a.jsx)("summary",{children:(0,a.jsxs)(n.p,{children:["\ud83e\udde0 ",(0,a.jsx)("code",{children:"RecoilInterpSpeed"}),"\r\n",(0,a.jsx)("span",{class:"member-badge kind-variable",children:"variable"}),"\r\n",(0,a.jsx)("span",{class:"member-badge section-public-attrib",children:"Public"}),"\r\n",(0,a.jsx)("span",{class:"brief-description-pill",children:"Interpolation speed for visual recoil easing."})]})}),(0,a.jsx)("p",{children:"Interpolation speed for visual recoil easing."})]}),(0,a.jsxs)(r,{children:[(0,a.jsx)("summary",{children:(0,a.jsxs)(n.p,{children:["\ud83e\udde0 ",(0,a.jsx)("code",{children:"RecoveryStrength"}),"\r\n",(0,a.jsx)("span",{class:"member-badge kind-variable",children:"variable"}),"\r\n",(0,a.jsx)("span",{class:"member-badge section-public-attrib",children:"Public"}),"\r\n",(0,a.jsx)("span",{class:"brief-description-pill",children:"Degrees/sec strength to recover back to initial aim."})]})}),(0,a.jsx)("p",{children:"Degrees/sec strength to recover back to initial aim."})]}),(0,a.jsxs)(r,{children:[(0,a.jsx)("summary",{children:(0,a.jsxs)(n.p,{children:["\ud83e\udde0 ",(0,a.jsx)("code",{children:"FOVPunchDuration"}),"\r\n",(0,a.jsx)("span",{class:"member-badge kind-variable",children:"variable"}),"\r\n",(0,a.jsx)("span",{class:"member-badge section-public-attrib",children:"Public"}),"\r\n",(0,a.jsx)("span",{class:"brief-description-pill",children:"Duration of the field-of-view punch effect (seconds)."})]})}),(0,a.jsx)("p",{children:"Duration of the field-of-view punch effect (seconds)."})]}),(0,a.jsxs)(r,{children:[(0,a.jsx)("summary",{children:(0,a.jsxs)(n.p,{children:["\ud83e\udde0 ",(0,a.jsx)("code",{children:"FOVEaseExponent"}),"\r\n",(0,a.jsx)("span",{class:"member-badge kind-variable",children:"variable"}),"\r\n",(0,a.jsx)("span",{class:"member-badge section-public-attrib",children:"Public"}),"\r\n",(0,a.jsx)("span",{class:"brief-description-pill",children:"Exponent for easing the FOV punch (higher = snappier start)."})]})}),(0,a.jsx)("p",{children:"Exponent for easing the FOV punch (higher = snappier start)."})]}),(0,a.jsxs)(r,{children:[(0,a.jsx)("summary",{children:(0,a.jsxs)(n.p,{children:["\ud83e\udde0 ",(0,a.jsx)("code",{children:"CurrentMagAmmo"}),"\r\n",(0,a.jsx)("span",{class:"member-badge kind-variable",children:"variable"}),"\r\n",(0,a.jsx)("span",{class:"member-badge section-public-attrib",children:"Public"}),"\r\n",(0,a.jsx)("span",{class:"brief-description-pill",children:"Current ammo loaded in the magazine."})]})}),(0,a.jsx)("p",{children:"Current ammo loaded in the magazine."})]}),(0,a.jsxs)(r,{children:[(0,a.jsx)("summary",{children:(0,a.jsxs)(n.p,{children:["\ud83e\udde0 ",(0,a.jsx)("code",{children:"CurrentReserveAmmo"}),"\r\n",(0,a.jsx)("span",{class:"member-badge kind-variable",children:"variable"}),"\r\n",(0,a.jsx)("span",{class:"member-badge section-public-attrib",children:"Public"}),"\r\n",(0,a.jsx)("span",{class:"brief-description-pill",children:"Current reserve ammo count."})]})}),(0,a.jsx)("p",{children:"Current reserve ammo count."})]}),(0,a.jsxs)(r,{children:[(0,a.jsx)("summary",{children:(0,a.jsxs)(n.p,{children:["\ud83e\udde0 ",(0,a.jsx)("code",{children:"bIsReloading"}),"\r\n",(0,a.jsx)("span",{class:"member-badge kind-variable",children:"variable"}),"\r\n",(0,a.jsx)("span",{class:"member-badge section-public-attrib",children:"Public"}),"\r\n",(0,a.jsx)("span",{class:"brief-description-pill",children:"True while a reload sequence is in progress."})]})}),(0,a.jsx)("p",{children:"True while a reload sequence is in progress."})]}),(0,a.jsxs)(r,{children:[(0,a.jsx)("summary",{children:(0,a.jsxs)(n.p,{children:["\ud83e\udde0 ",(0,a.jsx)("code",{children:"CrosshairWidgetRef"}),"\r\n",(0,a.jsx)("span",{class:"member-badge kind-variable",children:"variable"}),"\r\n",(0,a.jsx)("span",{class:"member-badge section-protected-attrib",children:"Protected"}),"\r\n",(0,a.jsx)("span",{class:"brief-description-pill",children:"Weak reference to the crosshair widget for UI updates."})]})}),(0,a.jsx)("p",{children:"Weak reference to the crosshair widget for UI updates."})]}),(0,a.jsxs)(r,{children:[(0,a.jsx)("summary",{children:(0,a.jsxs)(n.p,{children:["\ud83e\udde0 ",(0,a.jsx)("code",{children:"HitmarkerWidgetRef"}),"\r\n",(0,a.jsx)("span",{class:"member-badge kind-variable",children:"variable"}),"\r\n",(0,a.jsx)("span",{class:"member-badge section-protected-attrib",children:"Protected"}),"\r\n",(0,a.jsx)("span",{class:"brief-description-pill",children:"Weak reference to the hitmarker widget for UI updates."})]})}),(0,a.jsx)("p",{children:"Weak reference to the hitmarker widget for UI updates."})]})]})]})]})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}function m(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}}}]);