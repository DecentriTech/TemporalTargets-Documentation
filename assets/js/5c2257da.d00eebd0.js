"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[5718],{2162:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>o,contentTitle:()=>i,default:()=>p,frontMatter:()=>l,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"API/Core Gameplay Logic/TAPlayerController","title":"\ud83d\udcc4 File: TAPlayerController.h","description":"Declares the custom PlayerController responsible for HUD and spectate management.","source":"@site/docs/API/Core Gameplay Logic/TAPlayerController.md","sourceDirName":"API/Core Gameplay Logic","slug":"/API/_t_a_player_controller_8h","permalink":"/TemporalTargets-Documentation/docs/API/_t_a_player_controller_8h","draft":false,"unlisted":false,"editUrl":"https://github.com/DecentriTech/TemporalTargets-Documentation/tree/main/website/docs/API/Core Gameplay Logic/TAPlayerController.md","tags":[],"version":"current","frontMatter":{"title":"\ud83d\udcc4 File: TAPlayerController.h","slug":"/API/_t_a_player_controller_8h"},"sidebar":"tutorialSidebar","previous":{"title":"\ud83d\udcc4 File: TACharacter.h","permalink":"/TemporalTargets-Documentation/docs/API/_t_a_character_8h"},"next":{"title":"\ud83d\udcc4 File: TemporalAIController.h","permalink":"/TemporalTargets-Documentation/docs/API/_temporal_a_i_controller_8h"}}');var s=r(4848),a=r(8453);const l={title:"\ud83d\udcc4 File: TAPlayerController.h",slug:"/API/_t_a_player_controller_8h"},i="\ud83d\udcc4 File: TAPlayerController.h",o={},c=[];function d(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",header:"header",li:"li",p:"p",ul:"ul",...(0,a.R)(),...e.components},{Details:r,ExpandableCodeBlock:t}=n;return r||h("Details",!0),t||h("ExpandableCodeBlock",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsxs)(n.h1,{id:"-file-taplayercontrollerh",children:["\ud83d\udcc4 File: ",(0,s.jsx)(n.code,{children:"TAPlayerController.h"})]})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"Declares the custom PlayerController responsible for HUD and spectate management."}),"\n"]}),"\n",(0,s.jsxs)(r,{open:!0,children:[(0,s.jsxs)(n.p,{children:[(0,s.jsx)("summary",{children:"\ud83d\udcdd Detailed Description"}),"\r\nThis file defines the ",(0,s.jsx)(n.a,{href:"#class_a_t_a_player_controller",children:"ATAPlayerController"})," class, which handles:"]}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Managing player and spectator HUD widgets."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Toggling between live and spectate modes after death or respawn."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Spawning and possessing the Orbit Spectator pawn."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Updating countdown timers during spectate state."}),"\n"]}),"\n"]}),(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"#group___game___logic",children:"Core Gameplay Logic"})})]}),"\n",(0,s.jsxs)(r,{children:[(0,s.jsx)("summary",{children:(0,s.jsxs)(n.p,{children:["\ud83d\udcd8 Class ",(0,s.jsx)(n.code,{children:"ATAPlayerController"}),"\r\n",(0,s.jsx)("span",{class:"brief-description-pill",children:"PlayerController that manages the player's HUD and spectator flow."})]})}),(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"This controller spawns and owns either the live-player HUD or the spectator HUD widget, toggles between them on death/respawn, and updates any associated countdown timers."}),"\n"]}),(0,s.jsxs)(r,{open:!0,children:[(0,s.jsx)("summary",{children:"\ud83e\uddcd Members"}),(0,s.jsxs)(r,{open:!0,children:[(0,s.jsx)("summary",{children:"\u2699\ufe0f Functions"}),(0,s.jsxs)(r,{children:[(0,s.jsx)("summary",{children:(0,s.jsxs)(n.p,{children:["\ud83e\udde0 ",(0,s.jsx)("code",{children:"ATAPlayerController"}),"\r\n",(0,s.jsx)("span",{class:"member-badge kind-function",children:"function"}),"\r\n",(0,s.jsx)("span",{class:"member-badge section-public-func",children:"Public"}),"\r\n",(0,s.jsx)("span",{class:"brief-description-pill",children:"Constructor: sets default properties."})]})}),(0,s.jsxs)("p",{children:[(0,s.jsx)("strong",{children:"Parameters:"})," None"]}),(0,s.jsx)("hr",{}),(0,s.jsxs)("p",{children:[(0,s.jsx)("strong",{children:"\ud83d\udcc4 Source:"})," ",(0,s.jsx)("code",{children:"Source/TimeAssassin/TAPlayerController.cpp"})," (lines 16\u201320)"]}),(0,s.jsx)(t,{code:"ATAPlayerController::ATAPlayerController()\n{\n  bShowMouseCursor = false;\n  HUDWidgetInstance = nullptr;\n}",language:"cpp",previewLines:15})]}),(0,s.jsxs)(r,{children:[(0,s.jsx)("summary",{children:(0,s.jsxs)(n.p,{children:["\ud83e\udde0 ",(0,s.jsx)("code",{children:"EnterSpectate"}),"\r\n",(0,s.jsx)("span",{class:"member-badge kind-function",children:"function"}),"\r\n",(0,s.jsx)("span",{class:"member-badge section-public-func",children:"Public"}),"\r\n",(0,s.jsx)("span",{class:"brief-description-pill",children:"Enter spectate mode after death."})]})}),(0,s.jsx)("p",{children:(0,s.jsx)("strong",{children:"Parameters:"})}),(0,s.jsxs)("ul",{children:[(0,s.jsxs)("li",{children:[(0,s.jsx)("code",{children:"AActor * KillerActor"})," \u2013 The actor that caused this player's death."]}),(0,s.jsxs)("li",{children:[(0,s.jsx)("code",{children:"const FVector & DeathLocation"})," \u2013 World location where the player died."]})]}),(0,s.jsx)("hr",{}),(0,s.jsxs)("p",{children:[(0,s.jsx)("strong",{children:"\ud83d\udcc4 Source:"})," ",(0,s.jsx)("code",{children:"Source/TimeAssassin/TAPlayerController.cpp"})," (lines 22\u201385)"]}),(0,s.jsx)(t,{code:'void ATAPlayerController::EnterSpectate(AActor* KillerActor, const FVector& DeathLocation)\n{\n  if (!OrbitSpectatorClass)\n  {\n      UE_LOG(LogTemp, Warning, TEXT("EnterSpectate: OrbitSpectatorClass is null"));\n      return;\n  }\n\n  // 1) Spawn & possess our custom spectate pawn AT the death location\n  CurrentSpectatorPawn = GetWorld()->SpawnActor<AOrbitSpectatorPawn>(\n      OrbitSpectatorClass, DeathLocation, FRotator::ZeroRotator\n  );\n\n  if (!CurrentSpectatorPawn)\n  {\n      UE_LOG(LogTemp, Warning, TEXT("EnterSpectate: failed to spawn OrbitSpectatorPawn"));\n      return;\n  }\n\n  CurrentSpectatorPawn->InitializeSpectator(KillerActor, DeathLocation);\n  Possess(CurrentSpectatorPawn);\n\n  UE_LOG(LogTemp, Warning, TEXT("Spectate: Possessed OrbitSpectatorPawn for killer %s"),\n      *GetNameSafe(KillerActor));\n\n  // --- hide the normal gameplay HUD ---\n  if (HUDWidgetInstance)\n  {\n      HUDWidgetInstance->RemoveFromParent();\n\tHUDWidgetInstance = nullptr;\n  }\n\n  // 2) Create & show Spectator HUD\n  if (SpectatorHudClass)\n  {\n      SpectatorHudInstance = CreateWidget<USpectatorHudWidget>(this, SpectatorHudClass);\n      if (SpectatorHudInstance)\n      {\n          SpectatorHudInstance->AddToViewport();\n\n          // Pull respawn delay from GameMode\n          float Delay = 5.f;\n          if (auto* GM = GetWorld()->GetAuthGameMode<ATemporalGameMode>())\n          {\n              Delay = GM->RespawnDelay;\n          }\n          SpectatorHudInstance->SetRespawnTime(Delay);\n\n          bSpectating = true;\n\n          // start repeating countdown updates\n          GetWorldTimerManager().SetTimer(\n              SpectatorCountdownHandle,\n              this,\n              &ATAPlayerController::UpdateSpectatorCountdown,\n              0.1f,\n              true\n          );\n      }\n  }\n}',language:"cpp",previewLines:15})]}),(0,s.jsxs)(r,{children:[(0,s.jsx)("summary",{children:(0,s.jsxs)(n.p,{children:["\ud83e\udde0 ",(0,s.jsx)("code",{children:"ExitSpectate"}),"\r\n",(0,s.jsx)("span",{class:"member-badge kind-function",children:"function"}),"\r\n",(0,s.jsx)("span",{class:"member-badge section-public-func",children:"Public"}),"\r\n",(0,s.jsx)("span",{class:"brief-description-pill",children:"Exit spectate mode and return to live play."})]})}),(0,s.jsxs)("p",{children:[(0,s.jsx)("strong",{children:"Parameters:"})," None"]}),(0,s.jsx)("hr",{}),(0,s.jsxs)("p",{children:[(0,s.jsx)("strong",{children:"\ud83d\udcc4 Source:"})," ",(0,s.jsx)("code",{children:"Source/TimeAssassin/TAPlayerController.cpp"})," (lines 100\u2013122)"]}),(0,s.jsx)(t,{code:"void ATAPlayerController::ExitSpectate()\n{\nbSpectating = false;\n\n  // stop updates\n  GetWorldTimerManager().ClearTimer(SpectatorCountdownHandle);\n\n  // remove HUD\n  if (SpectatorHudInstance)\n  {\n      SpectatorHudInstance->RemoveFromParent();\n      SpectatorHudInstance = nullptr;\n  }\n\n  if (CurrentSpectatorPawn)\n  {\n      CurrentSpectatorPawn->Destroy();\n      CurrentSpectatorPawn = nullptr;\n  }\n\n// 3) Exit spectate mode\n  UnPossess();\n}",language:"cpp",previewLines:15})]}),(0,s.jsxs)(r,{children:[(0,s.jsx)("summary",{children:(0,s.jsxs)(n.p,{children:["\ud83e\udde0 ",(0,s.jsx)("code",{children:"IsSpectating"}),"\r\n",(0,s.jsx)("span",{class:"member-badge kind-function",children:"function"}),"\r\n",(0,s.jsx)("span",{class:"member-badge section-public-func",children:"Public"}),"\r\n",(0,s.jsx)("span",{class:"brief-description-pill",children:"Query whether the controller is currently in spectate mode."})]})}),(0,s.jsxs)("p",{children:[(0,s.jsx)("strong",{children:"Parameters:"})," None"]}),(0,s.jsx)("hr",{}),(0,s.jsxs)("p",{children:[(0,s.jsx)("strong",{children:"\ud83d\udcc4 Source:"})," ",(0,s.jsx)("code",{children:"Source/TimeAssassin/TAPlayerController.h"})," (lines 74\u201374)"]}),(0,s.jsx)(t,{code:"\tbool IsSpectating() const { return bSpectating; }",language:"cpp",previewLines:15})]}),(0,s.jsxs)(r,{children:[(0,s.jsx)("summary",{children:(0,s.jsxs)(n.p,{children:["\ud83e\udde0 ",(0,s.jsx)("code",{children:"OnPossess"}),"\r\n",(0,s.jsx)("span",{class:"member-badge kind-function",children:"function"}),"\r\n",(0,s.jsx)("span",{class:"member-badge section-protected-func",children:"Protected"}),"\r\n",(0,s.jsx)("span",{class:"brief-description-pill",children:"Hook called when this controller possesses a Pawn."})]})}),(0,s.jsx)("p",{children:(0,s.jsx)("strong",{children:"Parameters:"})}),(0,s.jsx)("ul",{children:(0,s.jsxs)("li",{children:[(0,s.jsx)("code",{children:"APawn * InPawn"})," \u2013 The Pawn being possessed."]})}),(0,s.jsx)("hr",{}),(0,s.jsxs)("p",{children:[(0,s.jsx)("strong",{children:"\ud83d\udcc4 Source:"})," ",(0,s.jsx)("code",{children:"Source/TimeAssassin/TAPlayerController.cpp"})," (lines 124\u2013199)"]}),(0,s.jsx)(t,{code:'void ATAPlayerController::OnPossess(APawn* InPawn)\n{\n  Super::OnPossess(InPawn);\n\nUE_LOG(LogTemp, Warning, TEXT("ATAPlayerController::OnPossess() called."));\n\n  // 1) Grab the HUDWidget that AGameHUD already made\n  if (!HUDWidgetInstance)\n  {\n      if (AGameHUD* GH = Cast<AGameHUD>(GetHUD()))\n      {\n\t\tUE_LOG(LogTemp, Warning, TEXT("ATAPlayerController::OnPossess: HUD is AGameHUD."));\n\n          GH->EnsureHUDWidget();\n          HUDWidgetInstance = GH->GetHUDWidget();\n\n          if (!HUDWidgetInstance)\n          {\n              UE_LOG(LogTemp, Warning, TEXT("AGameHUD::GetHUDWidget() returned null."));\n          }\n\n          if (!HUDWidgetInstance->IsInViewport())\n          {\n\t\t\t// Add the HUDWidget to the viewport\n\t\t\tHUDWidgetInstance->AddToViewport();\n\t\t\tHUDWidgetInstance->InitializeHUD();\n          }\n\n      }\n      else\n      {\n          UE_LOG(LogTemp, Warning, TEXT("PlayerController::GetHUD() is not an AGameHUD."));\n      }\n  }\n  else\n  {\n\tUE_LOG(LogTemp, Warning, TEXT("ATAPlayerController::OnPossess: HUDWidgetInstance already exists."));\n\tHUDWidgetInstance->AddToViewport();\n  }\n\n  if (ATACharacter* Char = Cast<ATACharacter>(InPawn))\n  {\n      if (Char->WeaponComponent)\n      {\n          Char->WeaponComponent->SetGameHUDWidget(HUDWidgetInstance);\n      }\n  }\n\n  // 2) Defer the actual wiring by a tiny delay so UMG has time to finish constructing\n  if (GetWorld())\n  {\n      // Clear any old pending call\n      GetWorldTimerManager().ClearTimer(DeferredWidgetHandle);\n\n      // Schedule DeferredWidgetSetup() to run in ~0.01s (effectively next frame)\n      GetWorldTimerManager().SetTimer(\n          DeferredWidgetHandle,\n          this,\n          &ATAPlayerController::DeferredWidgetSetup,\n          .01f,\n          false\n      );\n  }\n  // 3) Kick off recording if in PlayMode\n  if (ATACharacter* Char = Cast<ATACharacter>(InPawn))\n  {\n      if (ATemporalGameMode* GM = GetWorld()->GetAuthGameMode<ATemporalGameMode>())\n      {\n          if (GM->bPlayMode && Char->ReplayRecorder)\n          {\n              // Needs synced with blueprint Start Recording input currently.\n              //Char->ReplayRecorder->StartRecording();\n          }\n      }\n  }\n}',language:"cpp",previewLines:15})]}),(0,s.jsxs)(r,{children:[(0,s.jsx)("summary",{children:(0,s.jsxs)(n.p,{children:["\ud83e\udde0 ",(0,s.jsx)("code",{children:"OnUnPossess"}),"\r\n",(0,s.jsx)("span",{class:"member-badge kind-function",children:"function"}),"\r\n",(0,s.jsx)("span",{class:"member-badge section-protected-func",children:"Protected"}),"\r\n",(0,s.jsx)("span",{class:"brief-description-pill",children:"Hook called when this controller unpossesses its Pawn."})]})}),(0,s.jsxs)("p",{children:[(0,s.jsx)("strong",{children:"Parameters:"})," None"]}),(0,s.jsx)("hr",{}),(0,s.jsxs)("p",{children:[(0,s.jsx)("strong",{children:"\ud83d\udcc4 Source:"})," ",(0,s.jsx)("code",{children:"Source/TimeAssassin/TAPlayerController.cpp"})," (lines 244\u2013264)"]}),(0,s.jsx)(t,{code:"void ATAPlayerController::OnUnPossess()\n{\n  // Cancel any pending deferred setup\n  if (GetWorld())\n  {\n      GetWorld()->GetTimerManager().ClearTimer(DeferredWidgetHandle);\n  }\n\n  HUDWidgetInstance = nullptr;\n  \n  if (ATACharacter* Char = Cast<ATACharacter>(GetPawn()))\n  {\n\tif (Char->WeaponComponent)\n\t{\n\t\tChar->WeaponComponent->SetCrosshairWidget(nullptr);\n\t\tChar->WeaponComponent->SetHitmarkerWidget(nullptr);\n\t}\n  }\n\n  Super::OnUnPossess();\n}",language:"cpp",previewLines:15})]})]}),(0,s.jsxs)(r,{open:!0,children:[(0,s.jsx)("summary",{children:"\ud83d\udce6 Variables"}),(0,s.jsxs)(r,{children:[(0,s.jsx)("summary",{children:(0,s.jsxs)(n.p,{children:["\ud83e\udde0 ",(0,s.jsx)("code",{children:"HUDWidgetClass"}),"\r\n",(0,s.jsx)("span",{class:"member-badge kind-variable",children:"variable"}),"\r\n",(0,s.jsx)("span",{class:"member-badge section-protected-attrib",children:"Protected"}),"\r\n",(0,s.jsx)("span",{class:"brief-description-pill",children:"The HUD widget class for the live player."})]})}),(0,s.jsx)("p",{children:"The HUD widget class for the live player."})]}),(0,s.jsxs)(r,{children:[(0,s.jsx)("summary",{children:(0,s.jsxs)(n.p,{children:["\ud83e\udde0 ",(0,s.jsx)("code",{children:"SpectatorHudClass"}),"\r\n",(0,s.jsx)("span",{class:"member-badge kind-variable",children:"variable"}),"\r\n",(0,s.jsx)("span",{class:"member-badge section-protected-attrib",children:"Protected"}),"\r\n",(0,s.jsx)("span",{class:"brief-description-pill",children:"The Spectator HUD widget class."})]})}),(0,s.jsx)("p",{children:"The Spectator HUD widget class."})]}),(0,s.jsxs)(r,{children:[(0,s.jsx)("summary",{children:(0,s.jsxs)(n.p,{children:["\ud83e\udde0 ",(0,s.jsx)("code",{children:"OrbitSpectatorClass"}),"\r\n",(0,s.jsx)("span",{class:"member-badge kind-variable",children:"variable"}),"\r\n",(0,s.jsx)("span",{class:"member-badge section-protected-attrib",children:"Protected"}),"\r\n",(0,s.jsx)("span",{class:"brief-description-pill",children:"The Spectator pawn class to spawn when entering spectate mode."})]})}),(0,s.jsx)("p",{children:"The Spectator pawn class to spawn when entering spectate mode."})]})]})]})]})]})}function p(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}function h(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},8453:(e,n,r)=>{r.d(n,{R:()=>l,x:()=>i});var t=r(6540);const s={},a=t.createContext(s);function l(e){const n=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);